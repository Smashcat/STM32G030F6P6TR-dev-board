
Hardware-test-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c60  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f64  08006f64  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08006f64  08006f64  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f64  08006f64  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f68  08006f68  00016f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000080  08006fec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08006fec  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185ca  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af8  00000000  00000000  00038672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0003b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0003c2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173ab  00000000  00000000  0003d378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001627d  00000000  00000000  00054723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092599  00000000  00000000  0006a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcf39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004524  00000000  00000000  000fcf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000080 	.word	0x20000080
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006d00 	.word	0x08006d00

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000084 	.word	0x20000084
 80000fc:	08006d00 	.word	0x08006d00

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	; 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	; 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	; 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)

08000410 <__aeabi_fmul>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	4657      	mov	r7, sl
 8000414:	464e      	mov	r6, r9
 8000416:	4645      	mov	r5, r8
 8000418:	46de      	mov	lr, fp
 800041a:	0244      	lsls	r4, r0, #9
 800041c:	b5e0      	push	{r5, r6, r7, lr}
 800041e:	0045      	lsls	r5, r0, #1
 8000420:	1c0f      	adds	r7, r1, #0
 8000422:	0a64      	lsrs	r4, r4, #9
 8000424:	0e2d      	lsrs	r5, r5, #24
 8000426:	0fc6      	lsrs	r6, r0, #31
 8000428:	2d00      	cmp	r5, #0
 800042a:	d047      	beq.n	80004bc <__aeabi_fmul+0xac>
 800042c:	2dff      	cmp	r5, #255	; 0xff
 800042e:	d04d      	beq.n	80004cc <__aeabi_fmul+0xbc>
 8000430:	2300      	movs	r3, #0
 8000432:	2080      	movs	r0, #128	; 0x80
 8000434:	469a      	mov	sl, r3
 8000436:	469b      	mov	fp, r3
 8000438:	00e4      	lsls	r4, r4, #3
 800043a:	04c0      	lsls	r0, r0, #19
 800043c:	4304      	orrs	r4, r0
 800043e:	3d7f      	subs	r5, #127	; 0x7f
 8000440:	0278      	lsls	r0, r7, #9
 8000442:	0a43      	lsrs	r3, r0, #9
 8000444:	4699      	mov	r9, r3
 8000446:	007a      	lsls	r2, r7, #1
 8000448:	0ffb      	lsrs	r3, r7, #31
 800044a:	4698      	mov	r8, r3
 800044c:	0e12      	lsrs	r2, r2, #24
 800044e:	464b      	mov	r3, r9
 8000450:	d044      	beq.n	80004dc <__aeabi_fmul+0xcc>
 8000452:	2aff      	cmp	r2, #255	; 0xff
 8000454:	d011      	beq.n	800047a <__aeabi_fmul+0x6a>
 8000456:	00d8      	lsls	r0, r3, #3
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	04db      	lsls	r3, r3, #19
 800045c:	4303      	orrs	r3, r0
 800045e:	4699      	mov	r9, r3
 8000460:	2000      	movs	r0, #0
 8000462:	3a7f      	subs	r2, #127	; 0x7f
 8000464:	18ad      	adds	r5, r5, r2
 8000466:	4647      	mov	r7, r8
 8000468:	4653      	mov	r3, sl
 800046a:	4077      	eors	r7, r6
 800046c:	1c69      	adds	r1, r5, #1
 800046e:	2b0f      	cmp	r3, #15
 8000470:	d83f      	bhi.n	80004f2 <__aeabi_fmul+0xe2>
 8000472:	4a72      	ldr	r2, [pc, #456]	; (800063c <__aeabi_fmul+0x22c>)
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	58d3      	ldr	r3, [r2, r3]
 8000478:	469f      	mov	pc, r3
 800047a:	35ff      	adds	r5, #255	; 0xff
 800047c:	2b00      	cmp	r3, #0
 800047e:	d000      	beq.n	8000482 <__aeabi_fmul+0x72>
 8000480:	e079      	b.n	8000576 <__aeabi_fmul+0x166>
 8000482:	4652      	mov	r2, sl
 8000484:	2302      	movs	r3, #2
 8000486:	431a      	orrs	r2, r3
 8000488:	4692      	mov	sl, r2
 800048a:	2002      	movs	r0, #2
 800048c:	e7eb      	b.n	8000466 <__aeabi_fmul+0x56>
 800048e:	4647      	mov	r7, r8
 8000490:	464c      	mov	r4, r9
 8000492:	4683      	mov	fp, r0
 8000494:	465b      	mov	r3, fp
 8000496:	2b02      	cmp	r3, #2
 8000498:	d028      	beq.n	80004ec <__aeabi_fmul+0xdc>
 800049a:	2b03      	cmp	r3, #3
 800049c:	d100      	bne.n	80004a0 <__aeabi_fmul+0x90>
 800049e:	e0c6      	b.n	800062e <__aeabi_fmul+0x21e>
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d14f      	bne.n	8000544 <__aeabi_fmul+0x134>
 80004a4:	2000      	movs	r0, #0
 80004a6:	2400      	movs	r4, #0
 80004a8:	05c0      	lsls	r0, r0, #23
 80004aa:	07ff      	lsls	r7, r7, #31
 80004ac:	4320      	orrs	r0, r4
 80004ae:	4338      	orrs	r0, r7
 80004b0:	bcf0      	pop	{r4, r5, r6, r7}
 80004b2:	46bb      	mov	fp, r7
 80004b4:	46b2      	mov	sl, r6
 80004b6:	46a9      	mov	r9, r5
 80004b8:	46a0      	mov	r8, r4
 80004ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004bc:	2c00      	cmp	r4, #0
 80004be:	d171      	bne.n	80005a4 <__aeabi_fmul+0x194>
 80004c0:	2304      	movs	r3, #4
 80004c2:	469a      	mov	sl, r3
 80004c4:	3b03      	subs	r3, #3
 80004c6:	2500      	movs	r5, #0
 80004c8:	469b      	mov	fp, r3
 80004ca:	e7b9      	b.n	8000440 <__aeabi_fmul+0x30>
 80004cc:	2c00      	cmp	r4, #0
 80004ce:	d163      	bne.n	8000598 <__aeabi_fmul+0x188>
 80004d0:	2308      	movs	r3, #8
 80004d2:	469a      	mov	sl, r3
 80004d4:	3b06      	subs	r3, #6
 80004d6:	25ff      	movs	r5, #255	; 0xff
 80004d8:	469b      	mov	fp, r3
 80004da:	e7b1      	b.n	8000440 <__aeabi_fmul+0x30>
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d150      	bne.n	8000582 <__aeabi_fmul+0x172>
 80004e0:	4652      	mov	r2, sl
 80004e2:	3301      	adds	r3, #1
 80004e4:	431a      	orrs	r2, r3
 80004e6:	4692      	mov	sl, r2
 80004e8:	2001      	movs	r0, #1
 80004ea:	e7bc      	b.n	8000466 <__aeabi_fmul+0x56>
 80004ec:	20ff      	movs	r0, #255	; 0xff
 80004ee:	2400      	movs	r4, #0
 80004f0:	e7da      	b.n	80004a8 <__aeabi_fmul+0x98>
 80004f2:	4648      	mov	r0, r9
 80004f4:	0c26      	lsrs	r6, r4, #16
 80004f6:	0424      	lsls	r4, r4, #16
 80004f8:	0c22      	lsrs	r2, r4, #16
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	464b      	mov	r3, r9
 8000500:	0020      	movs	r0, r4
 8000502:	0c1b      	lsrs	r3, r3, #16
 8000504:	4350      	muls	r0, r2
 8000506:	4374      	muls	r4, r6
 8000508:	435a      	muls	r2, r3
 800050a:	435e      	muls	r6, r3
 800050c:	1912      	adds	r2, r2, r4
 800050e:	0c03      	lsrs	r3, r0, #16
 8000510:	189b      	adds	r3, r3, r2
 8000512:	429c      	cmp	r4, r3
 8000514:	d903      	bls.n	800051e <__aeabi_fmul+0x10e>
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	0252      	lsls	r2, r2, #9
 800051a:	4694      	mov	ip, r2
 800051c:	4466      	add	r6, ip
 800051e:	0400      	lsls	r0, r0, #16
 8000520:	041a      	lsls	r2, r3, #16
 8000522:	0c00      	lsrs	r0, r0, #16
 8000524:	1812      	adds	r2, r2, r0
 8000526:	0194      	lsls	r4, r2, #6
 8000528:	1e60      	subs	r0, r4, #1
 800052a:	4184      	sbcs	r4, r0
 800052c:	0c1b      	lsrs	r3, r3, #16
 800052e:	0e92      	lsrs	r2, r2, #26
 8000530:	199b      	adds	r3, r3, r6
 8000532:	4314      	orrs	r4, r2
 8000534:	019b      	lsls	r3, r3, #6
 8000536:	431c      	orrs	r4, r3
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	d572      	bpl.n	8000622 <__aeabi_fmul+0x212>
 800053c:	2001      	movs	r0, #1
 800053e:	0863      	lsrs	r3, r4, #1
 8000540:	4004      	ands	r4, r0
 8000542:	431c      	orrs	r4, r3
 8000544:	0008      	movs	r0, r1
 8000546:	307f      	adds	r0, #127	; 0x7f
 8000548:	2800      	cmp	r0, #0
 800054a:	dd3c      	ble.n	80005c6 <__aeabi_fmul+0x1b6>
 800054c:	0763      	lsls	r3, r4, #29
 800054e:	d004      	beq.n	800055a <__aeabi_fmul+0x14a>
 8000550:	230f      	movs	r3, #15
 8000552:	4023      	ands	r3, r4
 8000554:	2b04      	cmp	r3, #4
 8000556:	d000      	beq.n	800055a <__aeabi_fmul+0x14a>
 8000558:	3404      	adds	r4, #4
 800055a:	0123      	lsls	r3, r4, #4
 800055c:	d503      	bpl.n	8000566 <__aeabi_fmul+0x156>
 800055e:	3180      	adds	r1, #128	; 0x80
 8000560:	0008      	movs	r0, r1
 8000562:	4b37      	ldr	r3, [pc, #220]	; (8000640 <__aeabi_fmul+0x230>)
 8000564:	401c      	ands	r4, r3
 8000566:	28fe      	cmp	r0, #254	; 0xfe
 8000568:	dcc0      	bgt.n	80004ec <__aeabi_fmul+0xdc>
 800056a:	01a4      	lsls	r4, r4, #6
 800056c:	0a64      	lsrs	r4, r4, #9
 800056e:	b2c0      	uxtb	r0, r0
 8000570:	e79a      	b.n	80004a8 <__aeabi_fmul+0x98>
 8000572:	0037      	movs	r7, r6
 8000574:	e78e      	b.n	8000494 <__aeabi_fmul+0x84>
 8000576:	4652      	mov	r2, sl
 8000578:	2303      	movs	r3, #3
 800057a:	431a      	orrs	r2, r3
 800057c:	4692      	mov	sl, r2
 800057e:	2003      	movs	r0, #3
 8000580:	e771      	b.n	8000466 <__aeabi_fmul+0x56>
 8000582:	4648      	mov	r0, r9
 8000584:	f001 fd86 	bl	8002094 <__clzsi2>
 8000588:	464a      	mov	r2, r9
 800058a:	1f43      	subs	r3, r0, #5
 800058c:	409a      	lsls	r2, r3
 800058e:	1a2d      	subs	r5, r5, r0
 8000590:	4691      	mov	r9, r2
 8000592:	2000      	movs	r0, #0
 8000594:	3d76      	subs	r5, #118	; 0x76
 8000596:	e766      	b.n	8000466 <__aeabi_fmul+0x56>
 8000598:	230c      	movs	r3, #12
 800059a:	469a      	mov	sl, r3
 800059c:	3b09      	subs	r3, #9
 800059e:	25ff      	movs	r5, #255	; 0xff
 80005a0:	469b      	mov	fp, r3
 80005a2:	e74d      	b.n	8000440 <__aeabi_fmul+0x30>
 80005a4:	0020      	movs	r0, r4
 80005a6:	f001 fd75 	bl	8002094 <__clzsi2>
 80005aa:	2576      	movs	r5, #118	; 0x76
 80005ac:	1f43      	subs	r3, r0, #5
 80005ae:	409c      	lsls	r4, r3
 80005b0:	2300      	movs	r3, #0
 80005b2:	426d      	negs	r5, r5
 80005b4:	469a      	mov	sl, r3
 80005b6:	469b      	mov	fp, r3
 80005b8:	1a2d      	subs	r5, r5, r0
 80005ba:	e741      	b.n	8000440 <__aeabi_fmul+0x30>
 80005bc:	2480      	movs	r4, #128	; 0x80
 80005be:	2700      	movs	r7, #0
 80005c0:	20ff      	movs	r0, #255	; 0xff
 80005c2:	03e4      	lsls	r4, r4, #15
 80005c4:	e770      	b.n	80004a8 <__aeabi_fmul+0x98>
 80005c6:	2301      	movs	r3, #1
 80005c8:	1a1b      	subs	r3, r3, r0
 80005ca:	2b1b      	cmp	r3, #27
 80005cc:	dd00      	ble.n	80005d0 <__aeabi_fmul+0x1c0>
 80005ce:	e769      	b.n	80004a4 <__aeabi_fmul+0x94>
 80005d0:	319e      	adds	r1, #158	; 0x9e
 80005d2:	0020      	movs	r0, r4
 80005d4:	408c      	lsls	r4, r1
 80005d6:	40d8      	lsrs	r0, r3
 80005d8:	1e63      	subs	r3, r4, #1
 80005da:	419c      	sbcs	r4, r3
 80005dc:	4304      	orrs	r4, r0
 80005de:	0763      	lsls	r3, r4, #29
 80005e0:	d004      	beq.n	80005ec <__aeabi_fmul+0x1dc>
 80005e2:	230f      	movs	r3, #15
 80005e4:	4023      	ands	r3, r4
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d000      	beq.n	80005ec <__aeabi_fmul+0x1dc>
 80005ea:	3404      	adds	r4, #4
 80005ec:	0163      	lsls	r3, r4, #5
 80005ee:	d51a      	bpl.n	8000626 <__aeabi_fmul+0x216>
 80005f0:	2001      	movs	r0, #1
 80005f2:	2400      	movs	r4, #0
 80005f4:	e758      	b.n	80004a8 <__aeabi_fmul+0x98>
 80005f6:	2080      	movs	r0, #128	; 0x80
 80005f8:	03c0      	lsls	r0, r0, #15
 80005fa:	4204      	tst	r4, r0
 80005fc:	d009      	beq.n	8000612 <__aeabi_fmul+0x202>
 80005fe:	464b      	mov	r3, r9
 8000600:	4203      	tst	r3, r0
 8000602:	d106      	bne.n	8000612 <__aeabi_fmul+0x202>
 8000604:	464c      	mov	r4, r9
 8000606:	4304      	orrs	r4, r0
 8000608:	0264      	lsls	r4, r4, #9
 800060a:	4647      	mov	r7, r8
 800060c:	20ff      	movs	r0, #255	; 0xff
 800060e:	0a64      	lsrs	r4, r4, #9
 8000610:	e74a      	b.n	80004a8 <__aeabi_fmul+0x98>
 8000612:	2080      	movs	r0, #128	; 0x80
 8000614:	03c0      	lsls	r0, r0, #15
 8000616:	4304      	orrs	r4, r0
 8000618:	0264      	lsls	r4, r4, #9
 800061a:	0037      	movs	r7, r6
 800061c:	20ff      	movs	r0, #255	; 0xff
 800061e:	0a64      	lsrs	r4, r4, #9
 8000620:	e742      	b.n	80004a8 <__aeabi_fmul+0x98>
 8000622:	0029      	movs	r1, r5
 8000624:	e78e      	b.n	8000544 <__aeabi_fmul+0x134>
 8000626:	01a4      	lsls	r4, r4, #6
 8000628:	2000      	movs	r0, #0
 800062a:	0a64      	lsrs	r4, r4, #9
 800062c:	e73c      	b.n	80004a8 <__aeabi_fmul+0x98>
 800062e:	2080      	movs	r0, #128	; 0x80
 8000630:	03c0      	lsls	r0, r0, #15
 8000632:	4304      	orrs	r4, r0
 8000634:	0264      	lsls	r4, r4, #9
 8000636:	20ff      	movs	r0, #255	; 0xff
 8000638:	0a64      	lsrs	r4, r4, #9
 800063a:	e735      	b.n	80004a8 <__aeabi_fmul+0x98>
 800063c:	08006de8 	.word	0x08006de8
 8000640:	f7ffffff 	.word	0xf7ffffff

08000644 <__aeabi_f2iz>:
 8000644:	0241      	lsls	r1, r0, #9
 8000646:	0042      	lsls	r2, r0, #1
 8000648:	0fc3      	lsrs	r3, r0, #31
 800064a:	0a49      	lsrs	r1, r1, #9
 800064c:	2000      	movs	r0, #0
 800064e:	0e12      	lsrs	r2, r2, #24
 8000650:	2a7e      	cmp	r2, #126	; 0x7e
 8000652:	d903      	bls.n	800065c <__aeabi_f2iz+0x18>
 8000654:	2a9d      	cmp	r2, #157	; 0x9d
 8000656:	d902      	bls.n	800065e <__aeabi_f2iz+0x1a>
 8000658:	4a09      	ldr	r2, [pc, #36]	; (8000680 <__aeabi_f2iz+0x3c>)
 800065a:	1898      	adds	r0, r3, r2
 800065c:	4770      	bx	lr
 800065e:	2080      	movs	r0, #128	; 0x80
 8000660:	0400      	lsls	r0, r0, #16
 8000662:	4301      	orrs	r1, r0
 8000664:	2a95      	cmp	r2, #149	; 0x95
 8000666:	dc07      	bgt.n	8000678 <__aeabi_f2iz+0x34>
 8000668:	2096      	movs	r0, #150	; 0x96
 800066a:	1a82      	subs	r2, r0, r2
 800066c:	40d1      	lsrs	r1, r2
 800066e:	4248      	negs	r0, r1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f3      	bne.n	800065c <__aeabi_f2iz+0x18>
 8000674:	0008      	movs	r0, r1
 8000676:	e7f1      	b.n	800065c <__aeabi_f2iz+0x18>
 8000678:	3a96      	subs	r2, #150	; 0x96
 800067a:	4091      	lsls	r1, r2
 800067c:	e7f7      	b.n	800066e <__aeabi_f2iz+0x2a>
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	7fffffff 	.word	0x7fffffff

08000684 <__aeabi_dadd>:
 8000684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000686:	464f      	mov	r7, r9
 8000688:	46d6      	mov	lr, sl
 800068a:	4646      	mov	r6, r8
 800068c:	000d      	movs	r5, r1
 800068e:	0001      	movs	r1, r0
 8000690:	0018      	movs	r0, r3
 8000692:	b5c0      	push	{r6, r7, lr}
 8000694:	0017      	movs	r7, r2
 8000696:	032b      	lsls	r3, r5, #12
 8000698:	0a5a      	lsrs	r2, r3, #9
 800069a:	0f4b      	lsrs	r3, r1, #29
 800069c:	4313      	orrs	r3, r2
 800069e:	00ca      	lsls	r2, r1, #3
 80006a0:	4691      	mov	r9, r2
 80006a2:	0302      	lsls	r2, r0, #12
 80006a4:	006e      	lsls	r6, r5, #1
 80006a6:	0041      	lsls	r1, r0, #1
 80006a8:	0a52      	lsrs	r2, r2, #9
 80006aa:	0fec      	lsrs	r4, r5, #31
 80006ac:	0f7d      	lsrs	r5, r7, #29
 80006ae:	4315      	orrs	r5, r2
 80006b0:	0d76      	lsrs	r6, r6, #21
 80006b2:	0d49      	lsrs	r1, r1, #21
 80006b4:	0fc0      	lsrs	r0, r0, #31
 80006b6:	4682      	mov	sl, r0
 80006b8:	46ac      	mov	ip, r5
 80006ba:	00ff      	lsls	r7, r7, #3
 80006bc:	1a72      	subs	r2, r6, r1
 80006be:	4284      	cmp	r4, r0
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x40>
 80006c2:	e098      	b.n	80007f6 <__aeabi_dadd+0x172>
 80006c4:	2a00      	cmp	r2, #0
 80006c6:	dc00      	bgt.n	80006ca <__aeabi_dadd+0x46>
 80006c8:	e081      	b.n	80007ce <__aeabi_dadd+0x14a>
 80006ca:	2900      	cmp	r1, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x4c>
 80006ce:	e0b6      	b.n	800083e <__aeabi_dadd+0x1ba>
 80006d0:	49c9      	ldr	r1, [pc, #804]	; (80009f8 <__aeabi_dadd+0x374>)
 80006d2:	428e      	cmp	r6, r1
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x54>
 80006d6:	e172      	b.n	80009be <__aeabi_dadd+0x33a>
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	0028      	movs	r0, r5
 80006dc:	0409      	lsls	r1, r1, #16
 80006de:	4308      	orrs	r0, r1
 80006e0:	4684      	mov	ip, r0
 80006e2:	2a38      	cmp	r2, #56	; 0x38
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_dadd+0x64>
 80006e6:	e15e      	b.n	80009a6 <__aeabi_dadd+0x322>
 80006e8:	2a1f      	cmp	r2, #31
 80006ea:	dd00      	ble.n	80006ee <__aeabi_dadd+0x6a>
 80006ec:	e1ee      	b.n	8000acc <__aeabi_dadd+0x448>
 80006ee:	2020      	movs	r0, #32
 80006f0:	0039      	movs	r1, r7
 80006f2:	4665      	mov	r5, ip
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4087      	lsls	r7, r0
 80006f8:	40d1      	lsrs	r1, r2
 80006fa:	4085      	lsls	r5, r0
 80006fc:	430d      	orrs	r5, r1
 80006fe:	0039      	movs	r1, r7
 8000700:	1e4f      	subs	r7, r1, #1
 8000702:	41b9      	sbcs	r1, r7
 8000704:	4667      	mov	r7, ip
 8000706:	40d7      	lsrs	r7, r2
 8000708:	4329      	orrs	r1, r5
 800070a:	1bdb      	subs	r3, r3, r7
 800070c:	464a      	mov	r2, r9
 800070e:	1a55      	subs	r5, r2, r1
 8000710:	45a9      	cmp	r9, r5
 8000712:	4189      	sbcs	r1, r1
 8000714:	4249      	negs	r1, r1
 8000716:	1a5b      	subs	r3, r3, r1
 8000718:	4698      	mov	r8, r3
 800071a:	4643      	mov	r3, r8
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	d400      	bmi.n	8000722 <__aeabi_dadd+0x9e>
 8000720:	e0cc      	b.n	80008bc <__aeabi_dadd+0x238>
 8000722:	4643      	mov	r3, r8
 8000724:	025b      	lsls	r3, r3, #9
 8000726:	0a5b      	lsrs	r3, r3, #9
 8000728:	4698      	mov	r8, r3
 800072a:	4643      	mov	r3, r8
 800072c:	2b00      	cmp	r3, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0xae>
 8000730:	e12c      	b.n	800098c <__aeabi_dadd+0x308>
 8000732:	4640      	mov	r0, r8
 8000734:	f001 fcae 	bl	8002094 <__clzsi2>
 8000738:	0001      	movs	r1, r0
 800073a:	3908      	subs	r1, #8
 800073c:	2220      	movs	r2, #32
 800073e:	0028      	movs	r0, r5
 8000740:	4643      	mov	r3, r8
 8000742:	1a52      	subs	r2, r2, r1
 8000744:	408b      	lsls	r3, r1
 8000746:	40d0      	lsrs	r0, r2
 8000748:	408d      	lsls	r5, r1
 800074a:	4303      	orrs	r3, r0
 800074c:	428e      	cmp	r6, r1
 800074e:	dd00      	ble.n	8000752 <__aeabi_dadd+0xce>
 8000750:	e117      	b.n	8000982 <__aeabi_dadd+0x2fe>
 8000752:	1b8e      	subs	r6, r1, r6
 8000754:	1c72      	adds	r2, r6, #1
 8000756:	2a1f      	cmp	r2, #31
 8000758:	dd00      	ble.n	800075c <__aeabi_dadd+0xd8>
 800075a:	e1a7      	b.n	8000aac <__aeabi_dadd+0x428>
 800075c:	2120      	movs	r1, #32
 800075e:	0018      	movs	r0, r3
 8000760:	002e      	movs	r6, r5
 8000762:	1a89      	subs	r1, r1, r2
 8000764:	408d      	lsls	r5, r1
 8000766:	4088      	lsls	r0, r1
 8000768:	40d6      	lsrs	r6, r2
 800076a:	40d3      	lsrs	r3, r2
 800076c:	1e69      	subs	r1, r5, #1
 800076e:	418d      	sbcs	r5, r1
 8000770:	4330      	orrs	r0, r6
 8000772:	4698      	mov	r8, r3
 8000774:	2600      	movs	r6, #0
 8000776:	4305      	orrs	r5, r0
 8000778:	076b      	lsls	r3, r5, #29
 800077a:	d009      	beq.n	8000790 <__aeabi_dadd+0x10c>
 800077c:	230f      	movs	r3, #15
 800077e:	402b      	ands	r3, r5
 8000780:	2b04      	cmp	r3, #4
 8000782:	d005      	beq.n	8000790 <__aeabi_dadd+0x10c>
 8000784:	1d2b      	adds	r3, r5, #4
 8000786:	42ab      	cmp	r3, r5
 8000788:	41ad      	sbcs	r5, r5
 800078a:	426d      	negs	r5, r5
 800078c:	44a8      	add	r8, r5
 800078e:	001d      	movs	r5, r3
 8000790:	4643      	mov	r3, r8
 8000792:	021b      	lsls	r3, r3, #8
 8000794:	d400      	bmi.n	8000798 <__aeabi_dadd+0x114>
 8000796:	e094      	b.n	80008c2 <__aeabi_dadd+0x23e>
 8000798:	4b97      	ldr	r3, [pc, #604]	; (80009f8 <__aeabi_dadd+0x374>)
 800079a:	1c72      	adds	r2, r6, #1
 800079c:	429a      	cmp	r2, r3
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0x11e>
 80007a0:	e09d      	b.n	80008de <__aeabi_dadd+0x25a>
 80007a2:	4641      	mov	r1, r8
 80007a4:	4b95      	ldr	r3, [pc, #596]	; (80009fc <__aeabi_dadd+0x378>)
 80007a6:	08ed      	lsrs	r5, r5, #3
 80007a8:	4019      	ands	r1, r3
 80007aa:	000b      	movs	r3, r1
 80007ac:	0552      	lsls	r2, r2, #21
 80007ae:	0749      	lsls	r1, r1, #29
 80007b0:	025b      	lsls	r3, r3, #9
 80007b2:	4329      	orrs	r1, r5
 80007b4:	0b1b      	lsrs	r3, r3, #12
 80007b6:	0d52      	lsrs	r2, r2, #21
 80007b8:	0512      	lsls	r2, r2, #20
 80007ba:	4313      	orrs	r3, r2
 80007bc:	07e4      	lsls	r4, r4, #31
 80007be:	4323      	orrs	r3, r4
 80007c0:	0008      	movs	r0, r1
 80007c2:	0019      	movs	r1, r3
 80007c4:	bce0      	pop	{r5, r6, r7}
 80007c6:	46ba      	mov	sl, r7
 80007c8:	46b1      	mov	r9, r6
 80007ca:	46a8      	mov	r8, r5
 80007cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ce:	2a00      	cmp	r2, #0
 80007d0:	d043      	beq.n	800085a <__aeabi_dadd+0x1d6>
 80007d2:	1b8a      	subs	r2, r1, r6
 80007d4:	2e00      	cmp	r6, #0
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x156>
 80007d8:	e12a      	b.n	8000a30 <__aeabi_dadd+0x3ac>
 80007da:	464c      	mov	r4, r9
 80007dc:	431c      	orrs	r4, r3
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x15e>
 80007e0:	e1d1      	b.n	8000b86 <__aeabi_dadd+0x502>
 80007e2:	1e54      	subs	r4, r2, #1
 80007e4:	2a01      	cmp	r2, #1
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x166>
 80007e8:	e21f      	b.n	8000c2a <__aeabi_dadd+0x5a6>
 80007ea:	4d83      	ldr	r5, [pc, #524]	; (80009f8 <__aeabi_dadd+0x374>)
 80007ec:	42aa      	cmp	r2, r5
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x16e>
 80007f0:	e272      	b.n	8000cd8 <__aeabi_dadd+0x654>
 80007f2:	0022      	movs	r2, r4
 80007f4:	e123      	b.n	8000a3e <__aeabi_dadd+0x3ba>
 80007f6:	2a00      	cmp	r2, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x178>
 80007fa:	e098      	b.n	800092e <__aeabi_dadd+0x2aa>
 80007fc:	2900      	cmp	r1, #0
 80007fe:	d042      	beq.n	8000886 <__aeabi_dadd+0x202>
 8000800:	497d      	ldr	r1, [pc, #500]	; (80009f8 <__aeabi_dadd+0x374>)
 8000802:	428e      	cmp	r6, r1
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x184>
 8000806:	e0da      	b.n	80009be <__aeabi_dadd+0x33a>
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	0028      	movs	r0, r5
 800080c:	0409      	lsls	r1, r1, #16
 800080e:	4308      	orrs	r0, r1
 8000810:	4684      	mov	ip, r0
 8000812:	2a38      	cmp	r2, #56	; 0x38
 8000814:	dd00      	ble.n	8000818 <__aeabi_dadd+0x194>
 8000816:	e129      	b.n	8000a6c <__aeabi_dadd+0x3e8>
 8000818:	2a1f      	cmp	r2, #31
 800081a:	dc00      	bgt.n	800081e <__aeabi_dadd+0x19a>
 800081c:	e187      	b.n	8000b2e <__aeabi_dadd+0x4aa>
 800081e:	0011      	movs	r1, r2
 8000820:	4665      	mov	r5, ip
 8000822:	3920      	subs	r1, #32
 8000824:	40cd      	lsrs	r5, r1
 8000826:	2a20      	cmp	r2, #32
 8000828:	d004      	beq.n	8000834 <__aeabi_dadd+0x1b0>
 800082a:	2040      	movs	r0, #64	; 0x40
 800082c:	4661      	mov	r1, ip
 800082e:	1a82      	subs	r2, r0, r2
 8000830:	4091      	lsls	r1, r2
 8000832:	430f      	orrs	r7, r1
 8000834:	0039      	movs	r1, r7
 8000836:	1e4f      	subs	r7, r1, #1
 8000838:	41b9      	sbcs	r1, r7
 800083a:	430d      	orrs	r5, r1
 800083c:	e11b      	b.n	8000a76 <__aeabi_dadd+0x3f2>
 800083e:	0029      	movs	r1, r5
 8000840:	4339      	orrs	r1, r7
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x1c2>
 8000844:	e0b5      	b.n	80009b2 <__aeabi_dadd+0x32e>
 8000846:	1e51      	subs	r1, r2, #1
 8000848:	2a01      	cmp	r2, #1
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x1ca>
 800084c:	e1ab      	b.n	8000ba6 <__aeabi_dadd+0x522>
 800084e:	486a      	ldr	r0, [pc, #424]	; (80009f8 <__aeabi_dadd+0x374>)
 8000850:	4282      	cmp	r2, r0
 8000852:	d100      	bne.n	8000856 <__aeabi_dadd+0x1d2>
 8000854:	e1b2      	b.n	8000bbc <__aeabi_dadd+0x538>
 8000856:	000a      	movs	r2, r1
 8000858:	e743      	b.n	80006e2 <__aeabi_dadd+0x5e>
 800085a:	4969      	ldr	r1, [pc, #420]	; (8000a00 <__aeabi_dadd+0x37c>)
 800085c:	1c75      	adds	r5, r6, #1
 800085e:	420d      	tst	r5, r1
 8000860:	d000      	beq.n	8000864 <__aeabi_dadd+0x1e0>
 8000862:	e0cf      	b.n	8000a04 <__aeabi_dadd+0x380>
 8000864:	2e00      	cmp	r6, #0
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x1e6>
 8000868:	e193      	b.n	8000b92 <__aeabi_dadd+0x50e>
 800086a:	4649      	mov	r1, r9
 800086c:	4319      	orrs	r1, r3
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x1ee>
 8000870:	e1d1      	b.n	8000c16 <__aeabi_dadd+0x592>
 8000872:	4661      	mov	r1, ip
 8000874:	4339      	orrs	r1, r7
 8000876:	d000      	beq.n	800087a <__aeabi_dadd+0x1f6>
 8000878:	e1e3      	b.n	8000c42 <__aeabi_dadd+0x5be>
 800087a:	4649      	mov	r1, r9
 800087c:	0758      	lsls	r0, r3, #29
 800087e:	08c9      	lsrs	r1, r1, #3
 8000880:	4301      	orrs	r1, r0
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	e026      	b.n	80008d4 <__aeabi_dadd+0x250>
 8000886:	0029      	movs	r1, r5
 8000888:	4339      	orrs	r1, r7
 800088a:	d100      	bne.n	800088e <__aeabi_dadd+0x20a>
 800088c:	e091      	b.n	80009b2 <__aeabi_dadd+0x32e>
 800088e:	1e51      	subs	r1, r2, #1
 8000890:	2a01      	cmp	r2, #1
 8000892:	d005      	beq.n	80008a0 <__aeabi_dadd+0x21c>
 8000894:	4858      	ldr	r0, [pc, #352]	; (80009f8 <__aeabi_dadd+0x374>)
 8000896:	4282      	cmp	r2, r0
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x218>
 800089a:	e18f      	b.n	8000bbc <__aeabi_dadd+0x538>
 800089c:	000a      	movs	r2, r1
 800089e:	e7b8      	b.n	8000812 <__aeabi_dadd+0x18e>
 80008a0:	003d      	movs	r5, r7
 80008a2:	444d      	add	r5, r9
 80008a4:	454d      	cmp	r5, r9
 80008a6:	4189      	sbcs	r1, r1
 80008a8:	4463      	add	r3, ip
 80008aa:	4698      	mov	r8, r3
 80008ac:	4249      	negs	r1, r1
 80008ae:	4488      	add	r8, r1
 80008b0:	4643      	mov	r3, r8
 80008b2:	2602      	movs	r6, #2
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	d500      	bpl.n	80008ba <__aeabi_dadd+0x236>
 80008b8:	e0eb      	b.n	8000a92 <__aeabi_dadd+0x40e>
 80008ba:	3e01      	subs	r6, #1
 80008bc:	076b      	lsls	r3, r5, #29
 80008be:	d000      	beq.n	80008c2 <__aeabi_dadd+0x23e>
 80008c0:	e75c      	b.n	800077c <__aeabi_dadd+0xf8>
 80008c2:	4643      	mov	r3, r8
 80008c4:	08e9      	lsrs	r1, r5, #3
 80008c6:	075a      	lsls	r2, r3, #29
 80008c8:	4311      	orrs	r1, r2
 80008ca:	0032      	movs	r2, r6
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	484a      	ldr	r0, [pc, #296]	; (80009f8 <__aeabi_dadd+0x374>)
 80008d0:	4282      	cmp	r2, r0
 80008d2:	d021      	beq.n	8000918 <__aeabi_dadd+0x294>
 80008d4:	031b      	lsls	r3, r3, #12
 80008d6:	0552      	lsls	r2, r2, #21
 80008d8:	0b1b      	lsrs	r3, r3, #12
 80008da:	0d52      	lsrs	r2, r2, #21
 80008dc:	e76c      	b.n	80007b8 <__aeabi_dadd+0x134>
 80008de:	2300      	movs	r3, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	e769      	b.n	80007b8 <__aeabi_dadd+0x134>
 80008e4:	002a      	movs	r2, r5
 80008e6:	433a      	orrs	r2, r7
 80008e8:	d069      	beq.n	80009be <__aeabi_dadd+0x33a>
 80008ea:	464a      	mov	r2, r9
 80008ec:	0758      	lsls	r0, r3, #29
 80008ee:	08d1      	lsrs	r1, r2, #3
 80008f0:	08da      	lsrs	r2, r3, #3
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	031b      	lsls	r3, r3, #12
 80008f6:	4308      	orrs	r0, r1
 80008f8:	421a      	tst	r2, r3
 80008fa:	d007      	beq.n	800090c <__aeabi_dadd+0x288>
 80008fc:	0029      	movs	r1, r5
 80008fe:	08ed      	lsrs	r5, r5, #3
 8000900:	421d      	tst	r5, r3
 8000902:	d103      	bne.n	800090c <__aeabi_dadd+0x288>
 8000904:	002a      	movs	r2, r5
 8000906:	08ff      	lsrs	r7, r7, #3
 8000908:	0748      	lsls	r0, r1, #29
 800090a:	4338      	orrs	r0, r7
 800090c:	0f43      	lsrs	r3, r0, #29
 800090e:	00c1      	lsls	r1, r0, #3
 8000910:	075b      	lsls	r3, r3, #29
 8000912:	08c9      	lsrs	r1, r1, #3
 8000914:	4319      	orrs	r1, r3
 8000916:	0013      	movs	r3, r2
 8000918:	000a      	movs	r2, r1
 800091a:	431a      	orrs	r2, r3
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x29c>
 800091e:	e213      	b.n	8000d48 <__aeabi_dadd+0x6c4>
 8000920:	2280      	movs	r2, #128	; 0x80
 8000922:	0312      	lsls	r2, r2, #12
 8000924:	4313      	orrs	r3, r2
 8000926:	031b      	lsls	r3, r3, #12
 8000928:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <__aeabi_dadd+0x374>)
 800092a:	0b1b      	lsrs	r3, r3, #12
 800092c:	e744      	b.n	80007b8 <__aeabi_dadd+0x134>
 800092e:	2a00      	cmp	r2, #0
 8000930:	d04b      	beq.n	80009ca <__aeabi_dadd+0x346>
 8000932:	1b8a      	subs	r2, r1, r6
 8000934:	2e00      	cmp	r6, #0
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x2b6>
 8000938:	e0e7      	b.n	8000b0a <__aeabi_dadd+0x486>
 800093a:	482f      	ldr	r0, [pc, #188]	; (80009f8 <__aeabi_dadd+0x374>)
 800093c:	4281      	cmp	r1, r0
 800093e:	d100      	bne.n	8000942 <__aeabi_dadd+0x2be>
 8000940:	e195      	b.n	8000c6e <__aeabi_dadd+0x5ea>
 8000942:	2080      	movs	r0, #128	; 0x80
 8000944:	0400      	lsls	r0, r0, #16
 8000946:	4303      	orrs	r3, r0
 8000948:	2a38      	cmp	r2, #56	; 0x38
 800094a:	dd00      	ble.n	800094e <__aeabi_dadd+0x2ca>
 800094c:	e143      	b.n	8000bd6 <__aeabi_dadd+0x552>
 800094e:	2a1f      	cmp	r2, #31
 8000950:	dd00      	ble.n	8000954 <__aeabi_dadd+0x2d0>
 8000952:	e1db      	b.n	8000d0c <__aeabi_dadd+0x688>
 8000954:	2020      	movs	r0, #32
 8000956:	001d      	movs	r5, r3
 8000958:	464e      	mov	r6, r9
 800095a:	1a80      	subs	r0, r0, r2
 800095c:	4085      	lsls	r5, r0
 800095e:	40d6      	lsrs	r6, r2
 8000960:	4335      	orrs	r5, r6
 8000962:	464e      	mov	r6, r9
 8000964:	4086      	lsls	r6, r0
 8000966:	0030      	movs	r0, r6
 8000968:	40d3      	lsrs	r3, r2
 800096a:	1e46      	subs	r6, r0, #1
 800096c:	41b0      	sbcs	r0, r6
 800096e:	449c      	add	ip, r3
 8000970:	4305      	orrs	r5, r0
 8000972:	19ed      	adds	r5, r5, r7
 8000974:	42bd      	cmp	r5, r7
 8000976:	419b      	sbcs	r3, r3
 8000978:	425b      	negs	r3, r3
 800097a:	4463      	add	r3, ip
 800097c:	4698      	mov	r8, r3
 800097e:	000e      	movs	r6, r1
 8000980:	e07f      	b.n	8000a82 <__aeabi_dadd+0x3fe>
 8000982:	4a1e      	ldr	r2, [pc, #120]	; (80009fc <__aeabi_dadd+0x378>)
 8000984:	1a76      	subs	r6, r6, r1
 8000986:	4013      	ands	r3, r2
 8000988:	4698      	mov	r8, r3
 800098a:	e6f5      	b.n	8000778 <__aeabi_dadd+0xf4>
 800098c:	0028      	movs	r0, r5
 800098e:	f001 fb81 	bl	8002094 <__clzsi2>
 8000992:	0001      	movs	r1, r0
 8000994:	3118      	adds	r1, #24
 8000996:	291f      	cmp	r1, #31
 8000998:	dc00      	bgt.n	800099c <__aeabi_dadd+0x318>
 800099a:	e6cf      	b.n	800073c <__aeabi_dadd+0xb8>
 800099c:	002b      	movs	r3, r5
 800099e:	3808      	subs	r0, #8
 80009a0:	4083      	lsls	r3, r0
 80009a2:	2500      	movs	r5, #0
 80009a4:	e6d2      	b.n	800074c <__aeabi_dadd+0xc8>
 80009a6:	4662      	mov	r2, ip
 80009a8:	433a      	orrs	r2, r7
 80009aa:	0011      	movs	r1, r2
 80009ac:	1e4f      	subs	r7, r1, #1
 80009ae:	41b9      	sbcs	r1, r7
 80009b0:	e6ac      	b.n	800070c <__aeabi_dadd+0x88>
 80009b2:	4649      	mov	r1, r9
 80009b4:	0758      	lsls	r0, r3, #29
 80009b6:	08c9      	lsrs	r1, r1, #3
 80009b8:	4301      	orrs	r1, r0
 80009ba:	08db      	lsrs	r3, r3, #3
 80009bc:	e787      	b.n	80008ce <__aeabi_dadd+0x24a>
 80009be:	4649      	mov	r1, r9
 80009c0:	075a      	lsls	r2, r3, #29
 80009c2:	08c9      	lsrs	r1, r1, #3
 80009c4:	4311      	orrs	r1, r2
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	e7a6      	b.n	8000918 <__aeabi_dadd+0x294>
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <__aeabi_dadd+0x37c>)
 80009cc:	1c70      	adds	r0, r6, #1
 80009ce:	4208      	tst	r0, r1
 80009d0:	d000      	beq.n	80009d4 <__aeabi_dadd+0x350>
 80009d2:	e0bb      	b.n	8000b4c <__aeabi_dadd+0x4c8>
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	d000      	beq.n	80009da <__aeabi_dadd+0x356>
 80009d8:	e114      	b.n	8000c04 <__aeabi_dadd+0x580>
 80009da:	4649      	mov	r1, r9
 80009dc:	4319      	orrs	r1, r3
 80009de:	d100      	bne.n	80009e2 <__aeabi_dadd+0x35e>
 80009e0:	e175      	b.n	8000cce <__aeabi_dadd+0x64a>
 80009e2:	0029      	movs	r1, r5
 80009e4:	4339      	orrs	r1, r7
 80009e6:	d000      	beq.n	80009ea <__aeabi_dadd+0x366>
 80009e8:	e17e      	b.n	8000ce8 <__aeabi_dadd+0x664>
 80009ea:	4649      	mov	r1, r9
 80009ec:	0758      	lsls	r0, r3, #29
 80009ee:	08c9      	lsrs	r1, r1, #3
 80009f0:	4301      	orrs	r1, r0
 80009f2:	08db      	lsrs	r3, r3, #3
 80009f4:	e76e      	b.n	80008d4 <__aeabi_dadd+0x250>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	000007ff 	.word	0x000007ff
 80009fc:	ff7fffff 	.word	0xff7fffff
 8000a00:	000007fe 	.word	0x000007fe
 8000a04:	4649      	mov	r1, r9
 8000a06:	1bcd      	subs	r5, r1, r7
 8000a08:	4661      	mov	r1, ip
 8000a0a:	1a58      	subs	r0, r3, r1
 8000a0c:	45a9      	cmp	r9, r5
 8000a0e:	4189      	sbcs	r1, r1
 8000a10:	4249      	negs	r1, r1
 8000a12:	4688      	mov	r8, r1
 8000a14:	0001      	movs	r1, r0
 8000a16:	4640      	mov	r0, r8
 8000a18:	1a09      	subs	r1, r1, r0
 8000a1a:	4688      	mov	r8, r1
 8000a1c:	0209      	lsls	r1, r1, #8
 8000a1e:	d500      	bpl.n	8000a22 <__aeabi_dadd+0x39e>
 8000a20:	e0a6      	b.n	8000b70 <__aeabi_dadd+0x4ec>
 8000a22:	4641      	mov	r1, r8
 8000a24:	4329      	orrs	r1, r5
 8000a26:	d000      	beq.n	8000a2a <__aeabi_dadd+0x3a6>
 8000a28:	e67f      	b.n	800072a <__aeabi_dadd+0xa6>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	e751      	b.n	80008d4 <__aeabi_dadd+0x250>
 8000a30:	4cc7      	ldr	r4, [pc, #796]	; (8000d50 <__aeabi_dadd+0x6cc>)
 8000a32:	42a1      	cmp	r1, r4
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dadd+0x3b4>
 8000a36:	e0c7      	b.n	8000bc8 <__aeabi_dadd+0x544>
 8000a38:	2480      	movs	r4, #128	; 0x80
 8000a3a:	0424      	lsls	r4, r4, #16
 8000a3c:	4323      	orrs	r3, r4
 8000a3e:	2a38      	cmp	r2, #56	; 0x38
 8000a40:	dc54      	bgt.n	8000aec <__aeabi_dadd+0x468>
 8000a42:	2a1f      	cmp	r2, #31
 8000a44:	dd00      	ble.n	8000a48 <__aeabi_dadd+0x3c4>
 8000a46:	e0cc      	b.n	8000be2 <__aeabi_dadd+0x55e>
 8000a48:	2420      	movs	r4, #32
 8000a4a:	4648      	mov	r0, r9
 8000a4c:	1aa4      	subs	r4, r4, r2
 8000a4e:	001d      	movs	r5, r3
 8000a50:	464e      	mov	r6, r9
 8000a52:	40a0      	lsls	r0, r4
 8000a54:	40d6      	lsrs	r6, r2
 8000a56:	40a5      	lsls	r5, r4
 8000a58:	0004      	movs	r4, r0
 8000a5a:	40d3      	lsrs	r3, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	4335      	orrs	r5, r6
 8000a60:	1e66      	subs	r6, r4, #1
 8000a62:	41b4      	sbcs	r4, r6
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	469c      	mov	ip, r3
 8000a68:	4325      	orrs	r5, r4
 8000a6a:	e044      	b.n	8000af6 <__aeabi_dadd+0x472>
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	433a      	orrs	r2, r7
 8000a70:	0015      	movs	r5, r2
 8000a72:	1e6f      	subs	r7, r5, #1
 8000a74:	41bd      	sbcs	r5, r7
 8000a76:	444d      	add	r5, r9
 8000a78:	454d      	cmp	r5, r9
 8000a7a:	4189      	sbcs	r1, r1
 8000a7c:	4249      	negs	r1, r1
 8000a7e:	4688      	mov	r8, r1
 8000a80:	4498      	add	r8, r3
 8000a82:	4643      	mov	r3, r8
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	d400      	bmi.n	8000a8a <__aeabi_dadd+0x406>
 8000a88:	e718      	b.n	80008bc <__aeabi_dadd+0x238>
 8000a8a:	4bb1      	ldr	r3, [pc, #708]	; (8000d50 <__aeabi_dadd+0x6cc>)
 8000a8c:	3601      	adds	r6, #1
 8000a8e:	429e      	cmp	r6, r3
 8000a90:	d049      	beq.n	8000b26 <__aeabi_dadd+0x4a2>
 8000a92:	4642      	mov	r2, r8
 8000a94:	4baf      	ldr	r3, [pc, #700]	; (8000d54 <__aeabi_dadd+0x6d0>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	401a      	ands	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	086a      	lsrs	r2, r5, #1
 8000a9e:	400d      	ands	r5, r1
 8000aa0:	4315      	orrs	r5, r2
 8000aa2:	07d9      	lsls	r1, r3, #31
 8000aa4:	085b      	lsrs	r3, r3, #1
 8000aa6:	4698      	mov	r8, r3
 8000aa8:	430d      	orrs	r5, r1
 8000aaa:	e665      	b.n	8000778 <__aeabi_dadd+0xf4>
 8000aac:	0018      	movs	r0, r3
 8000aae:	3e1f      	subs	r6, #31
 8000ab0:	40f0      	lsrs	r0, r6
 8000ab2:	2a20      	cmp	r2, #32
 8000ab4:	d003      	beq.n	8000abe <__aeabi_dadd+0x43a>
 8000ab6:	2140      	movs	r1, #64	; 0x40
 8000ab8:	1a8a      	subs	r2, r1, r2
 8000aba:	4093      	lsls	r3, r2
 8000abc:	431d      	orrs	r5, r3
 8000abe:	1e69      	subs	r1, r5, #1
 8000ac0:	418d      	sbcs	r5, r1
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	4698      	mov	r8, r3
 8000ac8:	4305      	orrs	r5, r0
 8000aca:	e6f7      	b.n	80008bc <__aeabi_dadd+0x238>
 8000acc:	0011      	movs	r1, r2
 8000ace:	4665      	mov	r5, ip
 8000ad0:	3920      	subs	r1, #32
 8000ad2:	40cd      	lsrs	r5, r1
 8000ad4:	2a20      	cmp	r2, #32
 8000ad6:	d004      	beq.n	8000ae2 <__aeabi_dadd+0x45e>
 8000ad8:	2040      	movs	r0, #64	; 0x40
 8000ada:	4661      	mov	r1, ip
 8000adc:	1a82      	subs	r2, r0, r2
 8000ade:	4091      	lsls	r1, r2
 8000ae0:	430f      	orrs	r7, r1
 8000ae2:	0039      	movs	r1, r7
 8000ae4:	1e4f      	subs	r7, r1, #1
 8000ae6:	41b9      	sbcs	r1, r7
 8000ae8:	4329      	orrs	r1, r5
 8000aea:	e60f      	b.n	800070c <__aeabi_dadd+0x88>
 8000aec:	464a      	mov	r2, r9
 8000aee:	4313      	orrs	r3, r2
 8000af0:	001d      	movs	r5, r3
 8000af2:	1e6b      	subs	r3, r5, #1
 8000af4:	419d      	sbcs	r5, r3
 8000af6:	1b7d      	subs	r5, r7, r5
 8000af8:	42af      	cmp	r7, r5
 8000afa:	419b      	sbcs	r3, r3
 8000afc:	4662      	mov	r2, ip
 8000afe:	425b      	negs	r3, r3
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	4698      	mov	r8, r3
 8000b04:	4654      	mov	r4, sl
 8000b06:	000e      	movs	r6, r1
 8000b08:	e607      	b.n	800071a <__aeabi_dadd+0x96>
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	4318      	orrs	r0, r3
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x48e>
 8000b10:	e0b3      	b.n	8000c7a <__aeabi_dadd+0x5f6>
 8000b12:	1e50      	subs	r0, r2, #1
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x496>
 8000b18:	e10d      	b.n	8000d36 <__aeabi_dadd+0x6b2>
 8000b1a:	4d8d      	ldr	r5, [pc, #564]	; (8000d50 <__aeabi_dadd+0x6cc>)
 8000b1c:	42aa      	cmp	r2, r5
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x49e>
 8000b20:	e0a5      	b.n	8000c6e <__aeabi_dadd+0x5ea>
 8000b22:	0002      	movs	r2, r0
 8000b24:	e710      	b.n	8000948 <__aeabi_dadd+0x2c4>
 8000b26:	0032      	movs	r2, r6
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	e644      	b.n	80007b8 <__aeabi_dadd+0x134>
 8000b2e:	2120      	movs	r1, #32
 8000b30:	0038      	movs	r0, r7
 8000b32:	1a89      	subs	r1, r1, r2
 8000b34:	4665      	mov	r5, ip
 8000b36:	408f      	lsls	r7, r1
 8000b38:	408d      	lsls	r5, r1
 8000b3a:	40d0      	lsrs	r0, r2
 8000b3c:	1e79      	subs	r1, r7, #1
 8000b3e:	418f      	sbcs	r7, r1
 8000b40:	4305      	orrs	r5, r0
 8000b42:	433d      	orrs	r5, r7
 8000b44:	4667      	mov	r7, ip
 8000b46:	40d7      	lsrs	r7, r2
 8000b48:	19db      	adds	r3, r3, r7
 8000b4a:	e794      	b.n	8000a76 <__aeabi_dadd+0x3f2>
 8000b4c:	4a80      	ldr	r2, [pc, #512]	; (8000d50 <__aeabi_dadd+0x6cc>)
 8000b4e:	4290      	cmp	r0, r2
 8000b50:	d100      	bne.n	8000b54 <__aeabi_dadd+0x4d0>
 8000b52:	e0ec      	b.n	8000d2e <__aeabi_dadd+0x6aa>
 8000b54:	0039      	movs	r1, r7
 8000b56:	4449      	add	r1, r9
 8000b58:	4549      	cmp	r1, r9
 8000b5a:	4192      	sbcs	r2, r2
 8000b5c:	4463      	add	r3, ip
 8000b5e:	4252      	negs	r2, r2
 8000b60:	189b      	adds	r3, r3, r2
 8000b62:	07dd      	lsls	r5, r3, #31
 8000b64:	0849      	lsrs	r1, r1, #1
 8000b66:	085b      	lsrs	r3, r3, #1
 8000b68:	4698      	mov	r8, r3
 8000b6a:	0006      	movs	r6, r0
 8000b6c:	430d      	orrs	r5, r1
 8000b6e:	e6a5      	b.n	80008bc <__aeabi_dadd+0x238>
 8000b70:	464a      	mov	r2, r9
 8000b72:	1abd      	subs	r5, r7, r2
 8000b74:	42af      	cmp	r7, r5
 8000b76:	4189      	sbcs	r1, r1
 8000b78:	4662      	mov	r2, ip
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	1a5b      	subs	r3, r3, r1
 8000b80:	4698      	mov	r8, r3
 8000b82:	4654      	mov	r4, sl
 8000b84:	e5d1      	b.n	800072a <__aeabi_dadd+0xa6>
 8000b86:	076c      	lsls	r4, r5, #29
 8000b88:	08f9      	lsrs	r1, r7, #3
 8000b8a:	4321      	orrs	r1, r4
 8000b8c:	08eb      	lsrs	r3, r5, #3
 8000b8e:	0004      	movs	r4, r0
 8000b90:	e69d      	b.n	80008ce <__aeabi_dadd+0x24a>
 8000b92:	464a      	mov	r2, r9
 8000b94:	431a      	orrs	r2, r3
 8000b96:	d175      	bne.n	8000c84 <__aeabi_dadd+0x600>
 8000b98:	4661      	mov	r1, ip
 8000b9a:	4339      	orrs	r1, r7
 8000b9c:	d114      	bne.n	8000bc8 <__aeabi_dadd+0x544>
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	2400      	movs	r4, #0
 8000ba2:	031b      	lsls	r3, r3, #12
 8000ba4:	e6bc      	b.n	8000920 <__aeabi_dadd+0x29c>
 8000ba6:	464a      	mov	r2, r9
 8000ba8:	1bd5      	subs	r5, r2, r7
 8000baa:	45a9      	cmp	r9, r5
 8000bac:	4189      	sbcs	r1, r1
 8000bae:	4662      	mov	r2, ip
 8000bb0:	4249      	negs	r1, r1
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	1a5b      	subs	r3, r3, r1
 8000bb6:	4698      	mov	r8, r3
 8000bb8:	2601      	movs	r6, #1
 8000bba:	e5ae      	b.n	800071a <__aeabi_dadd+0x96>
 8000bbc:	464a      	mov	r2, r9
 8000bbe:	08d1      	lsrs	r1, r2, #3
 8000bc0:	075a      	lsls	r2, r3, #29
 8000bc2:	4311      	orrs	r1, r2
 8000bc4:	08db      	lsrs	r3, r3, #3
 8000bc6:	e6a7      	b.n	8000918 <__aeabi_dadd+0x294>
 8000bc8:	4663      	mov	r3, ip
 8000bca:	08f9      	lsrs	r1, r7, #3
 8000bcc:	075a      	lsls	r2, r3, #29
 8000bce:	4654      	mov	r4, sl
 8000bd0:	4311      	orrs	r1, r2
 8000bd2:	08db      	lsrs	r3, r3, #3
 8000bd4:	e6a0      	b.n	8000918 <__aeabi_dadd+0x294>
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	001d      	movs	r5, r3
 8000bdc:	1e6b      	subs	r3, r5, #1
 8000bde:	419d      	sbcs	r5, r3
 8000be0:	e6c7      	b.n	8000972 <__aeabi_dadd+0x2ee>
 8000be2:	0014      	movs	r4, r2
 8000be4:	001e      	movs	r6, r3
 8000be6:	3c20      	subs	r4, #32
 8000be8:	40e6      	lsrs	r6, r4
 8000bea:	2a20      	cmp	r2, #32
 8000bec:	d005      	beq.n	8000bfa <__aeabi_dadd+0x576>
 8000bee:	2440      	movs	r4, #64	; 0x40
 8000bf0:	1aa2      	subs	r2, r4, r2
 8000bf2:	4093      	lsls	r3, r2
 8000bf4:	464a      	mov	r2, r9
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	4691      	mov	r9, r2
 8000bfa:	464d      	mov	r5, r9
 8000bfc:	1e6b      	subs	r3, r5, #1
 8000bfe:	419d      	sbcs	r5, r3
 8000c00:	4335      	orrs	r5, r6
 8000c02:	e778      	b.n	8000af6 <__aeabi_dadd+0x472>
 8000c04:	464a      	mov	r2, r9
 8000c06:	431a      	orrs	r2, r3
 8000c08:	d000      	beq.n	8000c0c <__aeabi_dadd+0x588>
 8000c0a:	e66b      	b.n	80008e4 <__aeabi_dadd+0x260>
 8000c0c:	076b      	lsls	r3, r5, #29
 8000c0e:	08f9      	lsrs	r1, r7, #3
 8000c10:	4319      	orrs	r1, r3
 8000c12:	08eb      	lsrs	r3, r5, #3
 8000c14:	e680      	b.n	8000918 <__aeabi_dadd+0x294>
 8000c16:	4661      	mov	r1, ip
 8000c18:	4339      	orrs	r1, r7
 8000c1a:	d054      	beq.n	8000cc6 <__aeabi_dadd+0x642>
 8000c1c:	4663      	mov	r3, ip
 8000c1e:	08f9      	lsrs	r1, r7, #3
 8000c20:	075c      	lsls	r4, r3, #29
 8000c22:	4321      	orrs	r1, r4
 8000c24:	08db      	lsrs	r3, r3, #3
 8000c26:	0004      	movs	r4, r0
 8000c28:	e654      	b.n	80008d4 <__aeabi_dadd+0x250>
 8000c2a:	464a      	mov	r2, r9
 8000c2c:	1abd      	subs	r5, r7, r2
 8000c2e:	42af      	cmp	r7, r5
 8000c30:	4189      	sbcs	r1, r1
 8000c32:	4662      	mov	r2, ip
 8000c34:	4249      	negs	r1, r1
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	0004      	movs	r4, r0
 8000c3e:	2601      	movs	r6, #1
 8000c40:	e56b      	b.n	800071a <__aeabi_dadd+0x96>
 8000c42:	464a      	mov	r2, r9
 8000c44:	1bd5      	subs	r5, r2, r7
 8000c46:	45a9      	cmp	r9, r5
 8000c48:	4189      	sbcs	r1, r1
 8000c4a:	4662      	mov	r2, ip
 8000c4c:	4249      	negs	r1, r1
 8000c4e:	1a9a      	subs	r2, r3, r2
 8000c50:	1a52      	subs	r2, r2, r1
 8000c52:	4690      	mov	r8, r2
 8000c54:	0212      	lsls	r2, r2, #8
 8000c56:	d532      	bpl.n	8000cbe <__aeabi_dadd+0x63a>
 8000c58:	464a      	mov	r2, r9
 8000c5a:	1abd      	subs	r5, r7, r2
 8000c5c:	42af      	cmp	r7, r5
 8000c5e:	4189      	sbcs	r1, r1
 8000c60:	4662      	mov	r2, ip
 8000c62:	4249      	negs	r1, r1
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	1a5b      	subs	r3, r3, r1
 8000c68:	4698      	mov	r8, r3
 8000c6a:	0004      	movs	r4, r0
 8000c6c:	e584      	b.n	8000778 <__aeabi_dadd+0xf4>
 8000c6e:	4663      	mov	r3, ip
 8000c70:	08f9      	lsrs	r1, r7, #3
 8000c72:	075a      	lsls	r2, r3, #29
 8000c74:	4311      	orrs	r1, r2
 8000c76:	08db      	lsrs	r3, r3, #3
 8000c78:	e64e      	b.n	8000918 <__aeabi_dadd+0x294>
 8000c7a:	08f9      	lsrs	r1, r7, #3
 8000c7c:	0768      	lsls	r0, r5, #29
 8000c7e:	4301      	orrs	r1, r0
 8000c80:	08eb      	lsrs	r3, r5, #3
 8000c82:	e624      	b.n	80008ce <__aeabi_dadd+0x24a>
 8000c84:	4662      	mov	r2, ip
 8000c86:	433a      	orrs	r2, r7
 8000c88:	d100      	bne.n	8000c8c <__aeabi_dadd+0x608>
 8000c8a:	e698      	b.n	80009be <__aeabi_dadd+0x33a>
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08d1      	lsrs	r1, r2, #3
 8000c90:	075a      	lsls	r2, r3, #29
 8000c92:	4311      	orrs	r1, r2
 8000c94:	08da      	lsrs	r2, r3, #3
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	031b      	lsls	r3, r3, #12
 8000c9a:	421a      	tst	r2, r3
 8000c9c:	d008      	beq.n	8000cb0 <__aeabi_dadd+0x62c>
 8000c9e:	4660      	mov	r0, ip
 8000ca0:	08c5      	lsrs	r5, r0, #3
 8000ca2:	421d      	tst	r5, r3
 8000ca4:	d104      	bne.n	8000cb0 <__aeabi_dadd+0x62c>
 8000ca6:	4654      	mov	r4, sl
 8000ca8:	002a      	movs	r2, r5
 8000caa:	08f9      	lsrs	r1, r7, #3
 8000cac:	0743      	lsls	r3, r0, #29
 8000cae:	4319      	orrs	r1, r3
 8000cb0:	0f4b      	lsrs	r3, r1, #29
 8000cb2:	00c9      	lsls	r1, r1, #3
 8000cb4:	075b      	lsls	r3, r3, #29
 8000cb6:	08c9      	lsrs	r1, r1, #3
 8000cb8:	4319      	orrs	r1, r3
 8000cba:	0013      	movs	r3, r2
 8000cbc:	e62c      	b.n	8000918 <__aeabi_dadd+0x294>
 8000cbe:	4641      	mov	r1, r8
 8000cc0:	4329      	orrs	r1, r5
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_dadd+0x642>
 8000cc4:	e5fa      	b.n	80008bc <__aeabi_dadd+0x238>
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	000a      	movs	r2, r1
 8000cca:	2400      	movs	r4, #0
 8000ccc:	e602      	b.n	80008d4 <__aeabi_dadd+0x250>
 8000cce:	076b      	lsls	r3, r5, #29
 8000cd0:	08f9      	lsrs	r1, r7, #3
 8000cd2:	4319      	orrs	r1, r3
 8000cd4:	08eb      	lsrs	r3, r5, #3
 8000cd6:	e5fd      	b.n	80008d4 <__aeabi_dadd+0x250>
 8000cd8:	4663      	mov	r3, ip
 8000cda:	08f9      	lsrs	r1, r7, #3
 8000cdc:	075b      	lsls	r3, r3, #29
 8000cde:	4319      	orrs	r1, r3
 8000ce0:	4663      	mov	r3, ip
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	08db      	lsrs	r3, r3, #3
 8000ce6:	e617      	b.n	8000918 <__aeabi_dadd+0x294>
 8000ce8:	003d      	movs	r5, r7
 8000cea:	444d      	add	r5, r9
 8000cec:	4463      	add	r3, ip
 8000cee:	454d      	cmp	r5, r9
 8000cf0:	4189      	sbcs	r1, r1
 8000cf2:	4698      	mov	r8, r3
 8000cf4:	4249      	negs	r1, r1
 8000cf6:	4488      	add	r8, r1
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	d400      	bmi.n	8000d00 <__aeabi_dadd+0x67c>
 8000cfe:	e5dd      	b.n	80008bc <__aeabi_dadd+0x238>
 8000d00:	4642      	mov	r2, r8
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <__aeabi_dadd+0x6d0>)
 8000d04:	2601      	movs	r6, #1
 8000d06:	401a      	ands	r2, r3
 8000d08:	4690      	mov	r8, r2
 8000d0a:	e5d7      	b.n	80008bc <__aeabi_dadd+0x238>
 8000d0c:	0010      	movs	r0, r2
 8000d0e:	001e      	movs	r6, r3
 8000d10:	3820      	subs	r0, #32
 8000d12:	40c6      	lsrs	r6, r0
 8000d14:	2a20      	cmp	r2, #32
 8000d16:	d005      	beq.n	8000d24 <__aeabi_dadd+0x6a0>
 8000d18:	2040      	movs	r0, #64	; 0x40
 8000d1a:	1a82      	subs	r2, r0, r2
 8000d1c:	4093      	lsls	r3, r2
 8000d1e:	464a      	mov	r2, r9
 8000d20:	431a      	orrs	r2, r3
 8000d22:	4691      	mov	r9, r2
 8000d24:	464d      	mov	r5, r9
 8000d26:	1e6b      	subs	r3, r5, #1
 8000d28:	419d      	sbcs	r5, r3
 8000d2a:	4335      	orrs	r5, r6
 8000d2c:	e621      	b.n	8000972 <__aeabi_dadd+0x2ee>
 8000d2e:	0002      	movs	r2, r0
 8000d30:	2300      	movs	r3, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	e540      	b.n	80007b8 <__aeabi_dadd+0x134>
 8000d36:	464a      	mov	r2, r9
 8000d38:	19d5      	adds	r5, r2, r7
 8000d3a:	42bd      	cmp	r5, r7
 8000d3c:	4189      	sbcs	r1, r1
 8000d3e:	4463      	add	r3, ip
 8000d40:	4698      	mov	r8, r3
 8000d42:	4249      	negs	r1, r1
 8000d44:	4488      	add	r8, r1
 8000d46:	e5b3      	b.n	80008b0 <__aeabi_dadd+0x22c>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4a01      	ldr	r2, [pc, #4]	; (8000d50 <__aeabi_dadd+0x6cc>)
 8000d4c:	000b      	movs	r3, r1
 8000d4e:	e533      	b.n	80007b8 <__aeabi_dadd+0x134>
 8000d50:	000007ff 	.word	0x000007ff
 8000d54:	ff7fffff 	.word	0xff7fffff

08000d58 <__aeabi_ddiv>:
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	4657      	mov	r7, sl
 8000d5c:	464e      	mov	r6, r9
 8000d5e:	4645      	mov	r5, r8
 8000d60:	46de      	mov	lr, fp
 8000d62:	b5e0      	push	{r5, r6, r7, lr}
 8000d64:	4681      	mov	r9, r0
 8000d66:	0005      	movs	r5, r0
 8000d68:	030c      	lsls	r4, r1, #12
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	4692      	mov	sl, r2
 8000d6e:	001f      	movs	r7, r3
 8000d70:	b085      	sub	sp, #20
 8000d72:	0b24      	lsrs	r4, r4, #12
 8000d74:	0d40      	lsrs	r0, r0, #21
 8000d76:	0fce      	lsrs	r6, r1, #31
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	d059      	beq.n	8000e30 <__aeabi_ddiv+0xd8>
 8000d7c:	4b87      	ldr	r3, [pc, #540]	; (8000f9c <__aeabi_ddiv+0x244>)
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d100      	bne.n	8000d84 <__aeabi_ddiv+0x2c>
 8000d82:	e098      	b.n	8000eb6 <__aeabi_ddiv+0x15e>
 8000d84:	0f6b      	lsrs	r3, r5, #29
 8000d86:	00e4      	lsls	r4, r4, #3
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	041b      	lsls	r3, r3, #16
 8000d8e:	4323      	orrs	r3, r4
 8000d90:	4698      	mov	r8, r3
 8000d92:	4b83      	ldr	r3, [pc, #524]	; (8000fa0 <__aeabi_ddiv+0x248>)
 8000d94:	00ed      	lsls	r5, r5, #3
 8000d96:	469b      	mov	fp, r3
 8000d98:	2300      	movs	r3, #0
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	4483      	add	fp, r0
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	033c      	lsls	r4, r7, #12
 8000da2:	007b      	lsls	r3, r7, #1
 8000da4:	4650      	mov	r0, sl
 8000da6:	0b24      	lsrs	r4, r4, #12
 8000da8:	0d5b      	lsrs	r3, r3, #21
 8000daa:	0fff      	lsrs	r7, r7, #31
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d067      	beq.n	8000e80 <__aeabi_ddiv+0x128>
 8000db0:	4a7a      	ldr	r2, [pc, #488]	; (8000f9c <__aeabi_ddiv+0x244>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d018      	beq.n	8000de8 <__aeabi_ddiv+0x90>
 8000db6:	497a      	ldr	r1, [pc, #488]	; (8000fa0 <__aeabi_ddiv+0x248>)
 8000db8:	0f42      	lsrs	r2, r0, #29
 8000dba:	468c      	mov	ip, r1
 8000dbc:	00e4      	lsls	r4, r4, #3
 8000dbe:	4659      	mov	r1, fp
 8000dc0:	4314      	orrs	r4, r2
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	4463      	add	r3, ip
 8000dc6:	0412      	lsls	r2, r2, #16
 8000dc8:	1acb      	subs	r3, r1, r3
 8000dca:	4314      	orrs	r4, r2
 8000dcc:	469b      	mov	fp, r3
 8000dce:	00c2      	lsls	r2, r0, #3
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	0033      	movs	r3, r6
 8000dd4:	407b      	eors	r3, r7
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	464b      	mov	r3, r9
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d900      	bls.n	8000de0 <__aeabi_ddiv+0x88>
 8000dde:	e0ef      	b.n	8000fc0 <__aeabi_ddiv+0x268>
 8000de0:	4970      	ldr	r1, [pc, #448]	; (8000fa4 <__aeabi_ddiv+0x24c>)
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	58cb      	ldr	r3, [r1, r3]
 8000de6:	469f      	mov	pc, r3
 8000de8:	4b6f      	ldr	r3, [pc, #444]	; (8000fa8 <__aeabi_ddiv+0x250>)
 8000dea:	4652      	mov	r2, sl
 8000dec:	469c      	mov	ip, r3
 8000dee:	4322      	orrs	r2, r4
 8000df0:	44e3      	add	fp, ip
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d000      	beq.n	8000df8 <__aeabi_ddiv+0xa0>
 8000df6:	e095      	b.n	8000f24 <__aeabi_ddiv+0x1cc>
 8000df8:	4649      	mov	r1, r9
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	4319      	orrs	r1, r3
 8000dfe:	4689      	mov	r9, r1
 8000e00:	2400      	movs	r4, #0
 8000e02:	2002      	movs	r0, #2
 8000e04:	e7e5      	b.n	8000dd2 <__aeabi_ddiv+0x7a>
 8000e06:	2300      	movs	r3, #0
 8000e08:	2400      	movs	r4, #0
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	4652      	mov	r2, sl
 8000e0e:	051b      	lsls	r3, r3, #20
 8000e10:	4323      	orrs	r3, r4
 8000e12:	07d2      	lsls	r2, r2, #31
 8000e14:	4313      	orrs	r3, r2
 8000e16:	0028      	movs	r0, r5
 8000e18:	0019      	movs	r1, r3
 8000e1a:	b005      	add	sp, #20
 8000e1c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e1e:	46bb      	mov	fp, r7
 8000e20:	46b2      	mov	sl, r6
 8000e22:	46a9      	mov	r9, r5
 8000e24:	46a0      	mov	r8, r4
 8000e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e28:	2400      	movs	r4, #0
 8000e2a:	2500      	movs	r5, #0
 8000e2c:	4b5b      	ldr	r3, [pc, #364]	; (8000f9c <__aeabi_ddiv+0x244>)
 8000e2e:	e7ed      	b.n	8000e0c <__aeabi_ddiv+0xb4>
 8000e30:	464b      	mov	r3, r9
 8000e32:	4323      	orrs	r3, r4
 8000e34:	4698      	mov	r8, r3
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0xe2>
 8000e38:	e089      	b.n	8000f4e <__aeabi_ddiv+0x1f6>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_ddiv+0xe8>
 8000e3e:	e1e0      	b.n	8001202 <__aeabi_ddiv+0x4aa>
 8000e40:	0020      	movs	r0, r4
 8000e42:	f001 f927 	bl	8002094 <__clzsi2>
 8000e46:	0001      	movs	r1, r0
 8000e48:	0002      	movs	r2, r0
 8000e4a:	390b      	subs	r1, #11
 8000e4c:	231d      	movs	r3, #29
 8000e4e:	1a5b      	subs	r3, r3, r1
 8000e50:	4649      	mov	r1, r9
 8000e52:	0010      	movs	r0, r2
 8000e54:	40d9      	lsrs	r1, r3
 8000e56:	3808      	subs	r0, #8
 8000e58:	4084      	lsls	r4, r0
 8000e5a:	000b      	movs	r3, r1
 8000e5c:	464d      	mov	r5, r9
 8000e5e:	4323      	orrs	r3, r4
 8000e60:	4698      	mov	r8, r3
 8000e62:	4085      	lsls	r5, r0
 8000e64:	4851      	ldr	r0, [pc, #324]	; (8000fac <__aeabi_ddiv+0x254>)
 8000e66:	033c      	lsls	r4, r7, #12
 8000e68:	1a83      	subs	r3, r0, r2
 8000e6a:	469b      	mov	fp, r3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4699      	mov	r9, r3
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	007b      	lsls	r3, r7, #1
 8000e74:	4650      	mov	r0, sl
 8000e76:	0b24      	lsrs	r4, r4, #12
 8000e78:	0d5b      	lsrs	r3, r3, #21
 8000e7a:	0fff      	lsrs	r7, r7, #31
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d197      	bne.n	8000db0 <__aeabi_ddiv+0x58>
 8000e80:	4652      	mov	r2, sl
 8000e82:	4322      	orrs	r2, r4
 8000e84:	d055      	beq.n	8000f32 <__aeabi_ddiv+0x1da>
 8000e86:	2c00      	cmp	r4, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_ddiv+0x134>
 8000e8a:	e1ca      	b.n	8001222 <__aeabi_ddiv+0x4ca>
 8000e8c:	0020      	movs	r0, r4
 8000e8e:	f001 f901 	bl	8002094 <__clzsi2>
 8000e92:	0002      	movs	r2, r0
 8000e94:	3a0b      	subs	r2, #11
 8000e96:	231d      	movs	r3, #29
 8000e98:	0001      	movs	r1, r0
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	4652      	mov	r2, sl
 8000e9e:	3908      	subs	r1, #8
 8000ea0:	40da      	lsrs	r2, r3
 8000ea2:	408c      	lsls	r4, r1
 8000ea4:	4314      	orrs	r4, r2
 8000ea6:	4652      	mov	r2, sl
 8000ea8:	408a      	lsls	r2, r1
 8000eaa:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <__aeabi_ddiv+0x258>)
 8000eac:	4458      	add	r0, fp
 8000eae:	469b      	mov	fp, r3
 8000eb0:	4483      	add	fp, r0
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	e78d      	b.n	8000dd2 <__aeabi_ddiv+0x7a>
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	4698      	mov	r8, r3
 8000ebc:	d140      	bne.n	8000f40 <__aeabi_ddiv+0x1e8>
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	4699      	mov	r9, r3
 8000ec2:	3b06      	subs	r3, #6
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	4683      	mov	fp, r0
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	e769      	b.n	8000da0 <__aeabi_ddiv+0x48>
 8000ecc:	46b2      	mov	sl, r6
 8000ece:	9b00      	ldr	r3, [sp, #0]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d0a9      	beq.n	8000e28 <__aeabi_ddiv+0xd0>
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d100      	bne.n	8000eda <__aeabi_ddiv+0x182>
 8000ed8:	e211      	b.n	80012fe <__aeabi_ddiv+0x5a6>
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d093      	beq.n	8000e06 <__aeabi_ddiv+0xae>
 8000ede:	4a35      	ldr	r2, [pc, #212]	; (8000fb4 <__aeabi_ddiv+0x25c>)
 8000ee0:	445a      	add	r2, fp
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	dc00      	bgt.n	8000ee8 <__aeabi_ddiv+0x190>
 8000ee6:	e13c      	b.n	8001162 <__aeabi_ddiv+0x40a>
 8000ee8:	076b      	lsls	r3, r5, #29
 8000eea:	d000      	beq.n	8000eee <__aeabi_ddiv+0x196>
 8000eec:	e1a7      	b.n	800123e <__aeabi_ddiv+0x4e6>
 8000eee:	08ed      	lsrs	r5, r5, #3
 8000ef0:	4643      	mov	r3, r8
 8000ef2:	01db      	lsls	r3, r3, #7
 8000ef4:	d506      	bpl.n	8000f04 <__aeabi_ddiv+0x1ac>
 8000ef6:	4642      	mov	r2, r8
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <__aeabi_ddiv+0x260>)
 8000efa:	401a      	ands	r2, r3
 8000efc:	4690      	mov	r8, r2
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	00d2      	lsls	r2, r2, #3
 8000f02:	445a      	add	r2, fp
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <__aeabi_ddiv+0x264>)
 8000f06:	429a      	cmp	r2, r3
 8000f08:	dc8e      	bgt.n	8000e28 <__aeabi_ddiv+0xd0>
 8000f0a:	4643      	mov	r3, r8
 8000f0c:	0552      	lsls	r2, r2, #21
 8000f0e:	0758      	lsls	r0, r3, #29
 8000f10:	025c      	lsls	r4, r3, #9
 8000f12:	4305      	orrs	r5, r0
 8000f14:	0b24      	lsrs	r4, r4, #12
 8000f16:	0d53      	lsrs	r3, r2, #21
 8000f18:	e778      	b.n	8000e0c <__aeabi_ddiv+0xb4>
 8000f1a:	46ba      	mov	sl, r7
 8000f1c:	46a0      	mov	r8, r4
 8000f1e:	0015      	movs	r5, r2
 8000f20:	9000      	str	r0, [sp, #0]
 8000f22:	e7d4      	b.n	8000ece <__aeabi_ddiv+0x176>
 8000f24:	464a      	mov	r2, r9
 8000f26:	2303      	movs	r3, #3
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	4652      	mov	r2, sl
 8000f30:	e74f      	b.n	8000dd2 <__aeabi_ddiv+0x7a>
 8000f32:	4649      	mov	r1, r9
 8000f34:	2301      	movs	r3, #1
 8000f36:	4319      	orrs	r1, r3
 8000f38:	4689      	mov	r9, r1
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	e748      	b.n	8000dd2 <__aeabi_ddiv+0x7a>
 8000f40:	230c      	movs	r3, #12
 8000f42:	4699      	mov	r9, r3
 8000f44:	3b09      	subs	r3, #9
 8000f46:	46a0      	mov	r8, r4
 8000f48:	4683      	mov	fp, r0
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	e728      	b.n	8000da0 <__aeabi_ddiv+0x48>
 8000f4e:	2304      	movs	r3, #4
 8000f50:	4699      	mov	r9, r3
 8000f52:	2300      	movs	r3, #0
 8000f54:	469b      	mov	fp, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	2500      	movs	r5, #0
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	e720      	b.n	8000da0 <__aeabi_ddiv+0x48>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2480      	movs	r4, #128	; 0x80
 8000f62:	469a      	mov	sl, r3
 8000f64:	2500      	movs	r5, #0
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <__aeabi_ddiv+0x244>)
 8000f68:	0324      	lsls	r4, r4, #12
 8000f6a:	e74f      	b.n	8000e0c <__aeabi_ddiv+0xb4>
 8000f6c:	2380      	movs	r3, #128	; 0x80
 8000f6e:	4641      	mov	r1, r8
 8000f70:	031b      	lsls	r3, r3, #12
 8000f72:	4219      	tst	r1, r3
 8000f74:	d008      	beq.n	8000f88 <__aeabi_ddiv+0x230>
 8000f76:	421c      	tst	r4, r3
 8000f78:	d106      	bne.n	8000f88 <__aeabi_ddiv+0x230>
 8000f7a:	431c      	orrs	r4, r3
 8000f7c:	0324      	lsls	r4, r4, #12
 8000f7e:	46ba      	mov	sl, r7
 8000f80:	0015      	movs	r5, r2
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <__aeabi_ddiv+0x244>)
 8000f84:	0b24      	lsrs	r4, r4, #12
 8000f86:	e741      	b.n	8000e0c <__aeabi_ddiv+0xb4>
 8000f88:	2480      	movs	r4, #128	; 0x80
 8000f8a:	4643      	mov	r3, r8
 8000f8c:	0324      	lsls	r4, r4, #12
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	0324      	lsls	r4, r4, #12
 8000f92:	46b2      	mov	sl, r6
 8000f94:	4b01      	ldr	r3, [pc, #4]	; (8000f9c <__aeabi_ddiv+0x244>)
 8000f96:	0b24      	lsrs	r4, r4, #12
 8000f98:	e738      	b.n	8000e0c <__aeabi_ddiv+0xb4>
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	000007ff 	.word	0x000007ff
 8000fa0:	fffffc01 	.word	0xfffffc01
 8000fa4:	08006e28 	.word	0x08006e28
 8000fa8:	fffff801 	.word	0xfffff801
 8000fac:	fffffc0d 	.word	0xfffffc0d
 8000fb0:	000003f3 	.word	0x000003f3
 8000fb4:	000003ff 	.word	0x000003ff
 8000fb8:	feffffff 	.word	0xfeffffff
 8000fbc:	000007fe 	.word	0x000007fe
 8000fc0:	4544      	cmp	r4, r8
 8000fc2:	d200      	bcs.n	8000fc6 <__aeabi_ddiv+0x26e>
 8000fc4:	e116      	b.n	80011f4 <__aeabi_ddiv+0x49c>
 8000fc6:	d100      	bne.n	8000fca <__aeabi_ddiv+0x272>
 8000fc8:	e111      	b.n	80011ee <__aeabi_ddiv+0x496>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	425b      	negs	r3, r3
 8000fce:	469c      	mov	ip, r3
 8000fd0:	002e      	movs	r6, r5
 8000fd2:	4640      	mov	r0, r8
 8000fd4:	2500      	movs	r5, #0
 8000fd6:	44e3      	add	fp, ip
 8000fd8:	0223      	lsls	r3, r4, #8
 8000fda:	0e14      	lsrs	r4, r2, #24
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	0c1b      	lsrs	r3, r3, #16
 8000fe0:	4699      	mov	r9, r3
 8000fe2:	0423      	lsls	r3, r4, #16
 8000fe4:	0c1f      	lsrs	r7, r3, #16
 8000fe6:	0212      	lsls	r2, r2, #8
 8000fe8:	4649      	mov	r1, r9
 8000fea:	9200      	str	r2, [sp, #0]
 8000fec:	9701      	str	r7, [sp, #4]
 8000fee:	f7ff f91f 	bl	8000230 <__aeabi_uidivmod>
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	437a      	muls	r2, r7
 8000ff6:	040b      	lsls	r3, r1, #16
 8000ff8:	0c31      	lsrs	r1, r6, #16
 8000ffa:	4680      	mov	r8, r0
 8000ffc:	4319      	orrs	r1, r3
 8000ffe:	428a      	cmp	r2, r1
 8001000:	d90b      	bls.n	800101a <__aeabi_ddiv+0x2c2>
 8001002:	2301      	movs	r3, #1
 8001004:	425b      	negs	r3, r3
 8001006:	469c      	mov	ip, r3
 8001008:	1909      	adds	r1, r1, r4
 800100a:	44e0      	add	r8, ip
 800100c:	428c      	cmp	r4, r1
 800100e:	d804      	bhi.n	800101a <__aeabi_ddiv+0x2c2>
 8001010:	428a      	cmp	r2, r1
 8001012:	d902      	bls.n	800101a <__aeabi_ddiv+0x2c2>
 8001014:	1e83      	subs	r3, r0, #2
 8001016:	4698      	mov	r8, r3
 8001018:	1909      	adds	r1, r1, r4
 800101a:	1a88      	subs	r0, r1, r2
 800101c:	4649      	mov	r1, r9
 800101e:	f7ff f907 	bl	8000230 <__aeabi_uidivmod>
 8001022:	0409      	lsls	r1, r1, #16
 8001024:	468c      	mov	ip, r1
 8001026:	0431      	lsls	r1, r6, #16
 8001028:	4666      	mov	r6, ip
 800102a:	9a01      	ldr	r2, [sp, #4]
 800102c:	0c09      	lsrs	r1, r1, #16
 800102e:	4342      	muls	r2, r0
 8001030:	0003      	movs	r3, r0
 8001032:	4331      	orrs	r1, r6
 8001034:	428a      	cmp	r2, r1
 8001036:	d904      	bls.n	8001042 <__aeabi_ddiv+0x2ea>
 8001038:	1909      	adds	r1, r1, r4
 800103a:	3b01      	subs	r3, #1
 800103c:	428c      	cmp	r4, r1
 800103e:	d800      	bhi.n	8001042 <__aeabi_ddiv+0x2ea>
 8001040:	e111      	b.n	8001266 <__aeabi_ddiv+0x50e>
 8001042:	1a89      	subs	r1, r1, r2
 8001044:	4642      	mov	r2, r8
 8001046:	9e00      	ldr	r6, [sp, #0]
 8001048:	0412      	lsls	r2, r2, #16
 800104a:	431a      	orrs	r2, r3
 800104c:	0c33      	lsrs	r3, r6, #16
 800104e:	001f      	movs	r7, r3
 8001050:	0c10      	lsrs	r0, r2, #16
 8001052:	4690      	mov	r8, r2
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	0413      	lsls	r3, r2, #16
 8001058:	0432      	lsls	r2, r6, #16
 800105a:	0c16      	lsrs	r6, r2, #16
 800105c:	0032      	movs	r2, r6
 800105e:	0c1b      	lsrs	r3, r3, #16
 8001060:	435a      	muls	r2, r3
 8001062:	9603      	str	r6, [sp, #12]
 8001064:	437b      	muls	r3, r7
 8001066:	4346      	muls	r6, r0
 8001068:	4378      	muls	r0, r7
 800106a:	0c17      	lsrs	r7, r2, #16
 800106c:	46bc      	mov	ip, r7
 800106e:	199b      	adds	r3, r3, r6
 8001070:	4463      	add	r3, ip
 8001072:	429e      	cmp	r6, r3
 8001074:	d903      	bls.n	800107e <__aeabi_ddiv+0x326>
 8001076:	2680      	movs	r6, #128	; 0x80
 8001078:	0276      	lsls	r6, r6, #9
 800107a:	46b4      	mov	ip, r6
 800107c:	4460      	add	r0, ip
 800107e:	0c1e      	lsrs	r6, r3, #16
 8001080:	1830      	adds	r0, r6, r0
 8001082:	0416      	lsls	r6, r2, #16
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	0c36      	lsrs	r6, r6, #16
 8001088:	199e      	adds	r6, r3, r6
 800108a:	4281      	cmp	r1, r0
 800108c:	d200      	bcs.n	8001090 <__aeabi_ddiv+0x338>
 800108e:	e09c      	b.n	80011ca <__aeabi_ddiv+0x472>
 8001090:	d100      	bne.n	8001094 <__aeabi_ddiv+0x33c>
 8001092:	e097      	b.n	80011c4 <__aeabi_ddiv+0x46c>
 8001094:	1bae      	subs	r6, r5, r6
 8001096:	1a09      	subs	r1, r1, r0
 8001098:	42b5      	cmp	r5, r6
 800109a:	4180      	sbcs	r0, r0
 800109c:	4240      	negs	r0, r0
 800109e:	1a08      	subs	r0, r1, r0
 80010a0:	4284      	cmp	r4, r0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_ddiv+0x34e>
 80010a4:	e111      	b.n	80012ca <__aeabi_ddiv+0x572>
 80010a6:	4649      	mov	r1, r9
 80010a8:	f7ff f8c2 	bl	8000230 <__aeabi_uidivmod>
 80010ac:	9a01      	ldr	r2, [sp, #4]
 80010ae:	040b      	lsls	r3, r1, #16
 80010b0:	4342      	muls	r2, r0
 80010b2:	0c31      	lsrs	r1, r6, #16
 80010b4:	0005      	movs	r5, r0
 80010b6:	4319      	orrs	r1, r3
 80010b8:	428a      	cmp	r2, r1
 80010ba:	d907      	bls.n	80010cc <__aeabi_ddiv+0x374>
 80010bc:	1909      	adds	r1, r1, r4
 80010be:	3d01      	subs	r5, #1
 80010c0:	428c      	cmp	r4, r1
 80010c2:	d803      	bhi.n	80010cc <__aeabi_ddiv+0x374>
 80010c4:	428a      	cmp	r2, r1
 80010c6:	d901      	bls.n	80010cc <__aeabi_ddiv+0x374>
 80010c8:	1e85      	subs	r5, r0, #2
 80010ca:	1909      	adds	r1, r1, r4
 80010cc:	1a88      	subs	r0, r1, r2
 80010ce:	4649      	mov	r1, r9
 80010d0:	f7ff f8ae 	bl	8000230 <__aeabi_uidivmod>
 80010d4:	0409      	lsls	r1, r1, #16
 80010d6:	468c      	mov	ip, r1
 80010d8:	0431      	lsls	r1, r6, #16
 80010da:	4666      	mov	r6, ip
 80010dc:	9a01      	ldr	r2, [sp, #4]
 80010de:	0c09      	lsrs	r1, r1, #16
 80010e0:	4342      	muls	r2, r0
 80010e2:	0003      	movs	r3, r0
 80010e4:	4331      	orrs	r1, r6
 80010e6:	428a      	cmp	r2, r1
 80010e8:	d907      	bls.n	80010fa <__aeabi_ddiv+0x3a2>
 80010ea:	1909      	adds	r1, r1, r4
 80010ec:	3b01      	subs	r3, #1
 80010ee:	428c      	cmp	r4, r1
 80010f0:	d803      	bhi.n	80010fa <__aeabi_ddiv+0x3a2>
 80010f2:	428a      	cmp	r2, r1
 80010f4:	d901      	bls.n	80010fa <__aeabi_ddiv+0x3a2>
 80010f6:	1e83      	subs	r3, r0, #2
 80010f8:	1909      	adds	r1, r1, r4
 80010fa:	9e03      	ldr	r6, [sp, #12]
 80010fc:	1a89      	subs	r1, r1, r2
 80010fe:	0032      	movs	r2, r6
 8001100:	042d      	lsls	r5, r5, #16
 8001102:	431d      	orrs	r5, r3
 8001104:	9f02      	ldr	r7, [sp, #8]
 8001106:	042b      	lsls	r3, r5, #16
 8001108:	0c1b      	lsrs	r3, r3, #16
 800110a:	435a      	muls	r2, r3
 800110c:	437b      	muls	r3, r7
 800110e:	469c      	mov	ip, r3
 8001110:	0c28      	lsrs	r0, r5, #16
 8001112:	4346      	muls	r6, r0
 8001114:	0c13      	lsrs	r3, r2, #16
 8001116:	44b4      	add	ip, r6
 8001118:	4463      	add	r3, ip
 800111a:	4378      	muls	r0, r7
 800111c:	429e      	cmp	r6, r3
 800111e:	d903      	bls.n	8001128 <__aeabi_ddiv+0x3d0>
 8001120:	2680      	movs	r6, #128	; 0x80
 8001122:	0276      	lsls	r6, r6, #9
 8001124:	46b4      	mov	ip, r6
 8001126:	4460      	add	r0, ip
 8001128:	0c1e      	lsrs	r6, r3, #16
 800112a:	0412      	lsls	r2, r2, #16
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	0c12      	lsrs	r2, r2, #16
 8001130:	1830      	adds	r0, r6, r0
 8001132:	189b      	adds	r3, r3, r2
 8001134:	4281      	cmp	r1, r0
 8001136:	d306      	bcc.n	8001146 <__aeabi_ddiv+0x3ee>
 8001138:	d002      	beq.n	8001140 <__aeabi_ddiv+0x3e8>
 800113a:	2301      	movs	r3, #1
 800113c:	431d      	orrs	r5, r3
 800113e:	e6ce      	b.n	8000ede <__aeabi_ddiv+0x186>
 8001140:	2b00      	cmp	r3, #0
 8001142:	d100      	bne.n	8001146 <__aeabi_ddiv+0x3ee>
 8001144:	e6cb      	b.n	8000ede <__aeabi_ddiv+0x186>
 8001146:	1861      	adds	r1, r4, r1
 8001148:	1e6e      	subs	r6, r5, #1
 800114a:	42a1      	cmp	r1, r4
 800114c:	d200      	bcs.n	8001150 <__aeabi_ddiv+0x3f8>
 800114e:	e0a4      	b.n	800129a <__aeabi_ddiv+0x542>
 8001150:	4281      	cmp	r1, r0
 8001152:	d200      	bcs.n	8001156 <__aeabi_ddiv+0x3fe>
 8001154:	e0c9      	b.n	80012ea <__aeabi_ddiv+0x592>
 8001156:	d100      	bne.n	800115a <__aeabi_ddiv+0x402>
 8001158:	e0d9      	b.n	800130e <__aeabi_ddiv+0x5b6>
 800115a:	0035      	movs	r5, r6
 800115c:	e7ed      	b.n	800113a <__aeabi_ddiv+0x3e2>
 800115e:	2501      	movs	r5, #1
 8001160:	426d      	negs	r5, r5
 8001162:	2101      	movs	r1, #1
 8001164:	1a89      	subs	r1, r1, r2
 8001166:	2938      	cmp	r1, #56	; 0x38
 8001168:	dd00      	ble.n	800116c <__aeabi_ddiv+0x414>
 800116a:	e64c      	b.n	8000e06 <__aeabi_ddiv+0xae>
 800116c:	291f      	cmp	r1, #31
 800116e:	dc00      	bgt.n	8001172 <__aeabi_ddiv+0x41a>
 8001170:	e07f      	b.n	8001272 <__aeabi_ddiv+0x51a>
 8001172:	231f      	movs	r3, #31
 8001174:	425b      	negs	r3, r3
 8001176:	1a9a      	subs	r2, r3, r2
 8001178:	4643      	mov	r3, r8
 800117a:	40d3      	lsrs	r3, r2
 800117c:	2920      	cmp	r1, #32
 800117e:	d004      	beq.n	800118a <__aeabi_ddiv+0x432>
 8001180:	4644      	mov	r4, r8
 8001182:	4a65      	ldr	r2, [pc, #404]	; (8001318 <__aeabi_ddiv+0x5c0>)
 8001184:	445a      	add	r2, fp
 8001186:	4094      	lsls	r4, r2
 8001188:	4325      	orrs	r5, r4
 800118a:	1e6a      	subs	r2, r5, #1
 800118c:	4195      	sbcs	r5, r2
 800118e:	2207      	movs	r2, #7
 8001190:	432b      	orrs	r3, r5
 8001192:	0015      	movs	r5, r2
 8001194:	2400      	movs	r4, #0
 8001196:	401d      	ands	r5, r3
 8001198:	421a      	tst	r2, r3
 800119a:	d100      	bne.n	800119e <__aeabi_ddiv+0x446>
 800119c:	e0a1      	b.n	80012e2 <__aeabi_ddiv+0x58a>
 800119e:	220f      	movs	r2, #15
 80011a0:	2400      	movs	r4, #0
 80011a2:	401a      	ands	r2, r3
 80011a4:	2a04      	cmp	r2, #4
 80011a6:	d100      	bne.n	80011aa <__aeabi_ddiv+0x452>
 80011a8:	e098      	b.n	80012dc <__aeabi_ddiv+0x584>
 80011aa:	1d1a      	adds	r2, r3, #4
 80011ac:	429a      	cmp	r2, r3
 80011ae:	419b      	sbcs	r3, r3
 80011b0:	425b      	negs	r3, r3
 80011b2:	18e4      	adds	r4, r4, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	0222      	lsls	r2, r4, #8
 80011b8:	d400      	bmi.n	80011bc <__aeabi_ddiv+0x464>
 80011ba:	e08f      	b.n	80012dc <__aeabi_ddiv+0x584>
 80011bc:	2301      	movs	r3, #1
 80011be:	2400      	movs	r4, #0
 80011c0:	2500      	movs	r5, #0
 80011c2:	e623      	b.n	8000e0c <__aeabi_ddiv+0xb4>
 80011c4:	42b5      	cmp	r5, r6
 80011c6:	d300      	bcc.n	80011ca <__aeabi_ddiv+0x472>
 80011c8:	e764      	b.n	8001094 <__aeabi_ddiv+0x33c>
 80011ca:	4643      	mov	r3, r8
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	9b00      	ldr	r3, [sp, #0]
 80011d0:	469c      	mov	ip, r3
 80011d2:	4465      	add	r5, ip
 80011d4:	001f      	movs	r7, r3
 80011d6:	429d      	cmp	r5, r3
 80011d8:	419b      	sbcs	r3, r3
 80011da:	425b      	negs	r3, r3
 80011dc:	191b      	adds	r3, r3, r4
 80011de:	18c9      	adds	r1, r1, r3
 80011e0:	428c      	cmp	r4, r1
 80011e2:	d23a      	bcs.n	800125a <__aeabi_ddiv+0x502>
 80011e4:	4288      	cmp	r0, r1
 80011e6:	d863      	bhi.n	80012b0 <__aeabi_ddiv+0x558>
 80011e8:	d060      	beq.n	80012ac <__aeabi_ddiv+0x554>
 80011ea:	4690      	mov	r8, r2
 80011ec:	e752      	b.n	8001094 <__aeabi_ddiv+0x33c>
 80011ee:	42aa      	cmp	r2, r5
 80011f0:	d900      	bls.n	80011f4 <__aeabi_ddiv+0x49c>
 80011f2:	e6ea      	b.n	8000fca <__aeabi_ddiv+0x272>
 80011f4:	4643      	mov	r3, r8
 80011f6:	07de      	lsls	r6, r3, #31
 80011f8:	0858      	lsrs	r0, r3, #1
 80011fa:	086b      	lsrs	r3, r5, #1
 80011fc:	431e      	orrs	r6, r3
 80011fe:	07ed      	lsls	r5, r5, #31
 8001200:	e6ea      	b.n	8000fd8 <__aeabi_ddiv+0x280>
 8001202:	4648      	mov	r0, r9
 8001204:	f000 ff46 	bl	8002094 <__clzsi2>
 8001208:	0001      	movs	r1, r0
 800120a:	0002      	movs	r2, r0
 800120c:	3115      	adds	r1, #21
 800120e:	3220      	adds	r2, #32
 8001210:	291c      	cmp	r1, #28
 8001212:	dc00      	bgt.n	8001216 <__aeabi_ddiv+0x4be>
 8001214:	e61a      	b.n	8000e4c <__aeabi_ddiv+0xf4>
 8001216:	464b      	mov	r3, r9
 8001218:	3808      	subs	r0, #8
 800121a:	4083      	lsls	r3, r0
 800121c:	2500      	movs	r5, #0
 800121e:	4698      	mov	r8, r3
 8001220:	e620      	b.n	8000e64 <__aeabi_ddiv+0x10c>
 8001222:	f000 ff37 	bl	8002094 <__clzsi2>
 8001226:	0003      	movs	r3, r0
 8001228:	001a      	movs	r2, r3
 800122a:	3215      	adds	r2, #21
 800122c:	3020      	adds	r0, #32
 800122e:	2a1c      	cmp	r2, #28
 8001230:	dc00      	bgt.n	8001234 <__aeabi_ddiv+0x4dc>
 8001232:	e630      	b.n	8000e96 <__aeabi_ddiv+0x13e>
 8001234:	4654      	mov	r4, sl
 8001236:	3b08      	subs	r3, #8
 8001238:	2200      	movs	r2, #0
 800123a:	409c      	lsls	r4, r3
 800123c:	e635      	b.n	8000eaa <__aeabi_ddiv+0x152>
 800123e:	230f      	movs	r3, #15
 8001240:	402b      	ands	r3, r5
 8001242:	2b04      	cmp	r3, #4
 8001244:	d100      	bne.n	8001248 <__aeabi_ddiv+0x4f0>
 8001246:	e652      	b.n	8000eee <__aeabi_ddiv+0x196>
 8001248:	2305      	movs	r3, #5
 800124a:	425b      	negs	r3, r3
 800124c:	42ab      	cmp	r3, r5
 800124e:	419b      	sbcs	r3, r3
 8001250:	3504      	adds	r5, #4
 8001252:	425b      	negs	r3, r3
 8001254:	08ed      	lsrs	r5, r5, #3
 8001256:	4498      	add	r8, r3
 8001258:	e64a      	b.n	8000ef0 <__aeabi_ddiv+0x198>
 800125a:	428c      	cmp	r4, r1
 800125c:	d1c5      	bne.n	80011ea <__aeabi_ddiv+0x492>
 800125e:	42af      	cmp	r7, r5
 8001260:	d9c0      	bls.n	80011e4 <__aeabi_ddiv+0x48c>
 8001262:	4690      	mov	r8, r2
 8001264:	e716      	b.n	8001094 <__aeabi_ddiv+0x33c>
 8001266:	428a      	cmp	r2, r1
 8001268:	d800      	bhi.n	800126c <__aeabi_ddiv+0x514>
 800126a:	e6ea      	b.n	8001042 <__aeabi_ddiv+0x2ea>
 800126c:	1e83      	subs	r3, r0, #2
 800126e:	1909      	adds	r1, r1, r4
 8001270:	e6e7      	b.n	8001042 <__aeabi_ddiv+0x2ea>
 8001272:	4a2a      	ldr	r2, [pc, #168]	; (800131c <__aeabi_ddiv+0x5c4>)
 8001274:	0028      	movs	r0, r5
 8001276:	445a      	add	r2, fp
 8001278:	4643      	mov	r3, r8
 800127a:	4095      	lsls	r5, r2
 800127c:	4093      	lsls	r3, r2
 800127e:	40c8      	lsrs	r0, r1
 8001280:	1e6a      	subs	r2, r5, #1
 8001282:	4195      	sbcs	r5, r2
 8001284:	4644      	mov	r4, r8
 8001286:	4303      	orrs	r3, r0
 8001288:	432b      	orrs	r3, r5
 800128a:	40cc      	lsrs	r4, r1
 800128c:	075a      	lsls	r2, r3, #29
 800128e:	d092      	beq.n	80011b6 <__aeabi_ddiv+0x45e>
 8001290:	220f      	movs	r2, #15
 8001292:	401a      	ands	r2, r3
 8001294:	2a04      	cmp	r2, #4
 8001296:	d188      	bne.n	80011aa <__aeabi_ddiv+0x452>
 8001298:	e78d      	b.n	80011b6 <__aeabi_ddiv+0x45e>
 800129a:	0035      	movs	r5, r6
 800129c:	4281      	cmp	r1, r0
 800129e:	d000      	beq.n	80012a2 <__aeabi_ddiv+0x54a>
 80012a0:	e74b      	b.n	800113a <__aeabi_ddiv+0x3e2>
 80012a2:	9a00      	ldr	r2, [sp, #0]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d000      	beq.n	80012aa <__aeabi_ddiv+0x552>
 80012a8:	e747      	b.n	800113a <__aeabi_ddiv+0x3e2>
 80012aa:	e618      	b.n	8000ede <__aeabi_ddiv+0x186>
 80012ac:	42ae      	cmp	r6, r5
 80012ae:	d99c      	bls.n	80011ea <__aeabi_ddiv+0x492>
 80012b0:	2302      	movs	r3, #2
 80012b2:	425b      	negs	r3, r3
 80012b4:	469c      	mov	ip, r3
 80012b6:	9b00      	ldr	r3, [sp, #0]
 80012b8:	44e0      	add	r8, ip
 80012ba:	469c      	mov	ip, r3
 80012bc:	4465      	add	r5, ip
 80012be:	429d      	cmp	r5, r3
 80012c0:	419b      	sbcs	r3, r3
 80012c2:	425b      	negs	r3, r3
 80012c4:	191b      	adds	r3, r3, r4
 80012c6:	18c9      	adds	r1, r1, r3
 80012c8:	e6e4      	b.n	8001094 <__aeabi_ddiv+0x33c>
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <__aeabi_ddiv+0x5c8>)
 80012cc:	445a      	add	r2, fp
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	dc00      	bgt.n	80012d4 <__aeabi_ddiv+0x57c>
 80012d2:	e744      	b.n	800115e <__aeabi_ddiv+0x406>
 80012d4:	2301      	movs	r3, #1
 80012d6:	2500      	movs	r5, #0
 80012d8:	4498      	add	r8, r3
 80012da:	e609      	b.n	8000ef0 <__aeabi_ddiv+0x198>
 80012dc:	0765      	lsls	r5, r4, #29
 80012de:	0264      	lsls	r4, r4, #9
 80012e0:	0b24      	lsrs	r4, r4, #12
 80012e2:	08db      	lsrs	r3, r3, #3
 80012e4:	431d      	orrs	r5, r3
 80012e6:	2300      	movs	r3, #0
 80012e8:	e590      	b.n	8000e0c <__aeabi_ddiv+0xb4>
 80012ea:	9e00      	ldr	r6, [sp, #0]
 80012ec:	3d02      	subs	r5, #2
 80012ee:	0072      	lsls	r2, r6, #1
 80012f0:	42b2      	cmp	r2, r6
 80012f2:	41bf      	sbcs	r7, r7
 80012f4:	427f      	negs	r7, r7
 80012f6:	193c      	adds	r4, r7, r4
 80012f8:	1909      	adds	r1, r1, r4
 80012fa:	9200      	str	r2, [sp, #0]
 80012fc:	e7ce      	b.n	800129c <__aeabi_ddiv+0x544>
 80012fe:	2480      	movs	r4, #128	; 0x80
 8001300:	4643      	mov	r3, r8
 8001302:	0324      	lsls	r4, r4, #12
 8001304:	431c      	orrs	r4, r3
 8001306:	0324      	lsls	r4, r4, #12
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <__aeabi_ddiv+0x5cc>)
 800130a:	0b24      	lsrs	r4, r4, #12
 800130c:	e57e      	b.n	8000e0c <__aeabi_ddiv+0xb4>
 800130e:	9a00      	ldr	r2, [sp, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d3ea      	bcc.n	80012ea <__aeabi_ddiv+0x592>
 8001314:	0035      	movs	r5, r6
 8001316:	e7c4      	b.n	80012a2 <__aeabi_ddiv+0x54a>
 8001318:	0000043e 	.word	0x0000043e
 800131c:	0000041e 	.word	0x0000041e
 8001320:	000003ff 	.word	0x000003ff
 8001324:	000007ff 	.word	0x000007ff

08001328 <__aeabi_dmul>:
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	4657      	mov	r7, sl
 800132c:	464e      	mov	r6, r9
 800132e:	4645      	mov	r5, r8
 8001330:	46de      	mov	lr, fp
 8001332:	b5e0      	push	{r5, r6, r7, lr}
 8001334:	4698      	mov	r8, r3
 8001336:	030c      	lsls	r4, r1, #12
 8001338:	004b      	lsls	r3, r1, #1
 800133a:	0006      	movs	r6, r0
 800133c:	4692      	mov	sl, r2
 800133e:	b087      	sub	sp, #28
 8001340:	0b24      	lsrs	r4, r4, #12
 8001342:	0d5b      	lsrs	r3, r3, #21
 8001344:	0fcf      	lsrs	r7, r1, #31
 8001346:	2b00      	cmp	r3, #0
 8001348:	d06c      	beq.n	8001424 <__aeabi_dmul+0xfc>
 800134a:	4add      	ldr	r2, [pc, #884]	; (80016c0 <__aeabi_dmul+0x398>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d100      	bne.n	8001352 <__aeabi_dmul+0x2a>
 8001350:	e086      	b.n	8001460 <__aeabi_dmul+0x138>
 8001352:	0f42      	lsrs	r2, r0, #29
 8001354:	00e4      	lsls	r4, r4, #3
 8001356:	4314      	orrs	r4, r2
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	0412      	lsls	r2, r2, #16
 800135c:	4314      	orrs	r4, r2
 800135e:	4ad9      	ldr	r2, [pc, #868]	; (80016c4 <__aeabi_dmul+0x39c>)
 8001360:	00c5      	lsls	r5, r0, #3
 8001362:	4694      	mov	ip, r2
 8001364:	4463      	add	r3, ip
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2300      	movs	r3, #0
 800136a:	4699      	mov	r9, r3
 800136c:	469b      	mov	fp, r3
 800136e:	4643      	mov	r3, r8
 8001370:	4642      	mov	r2, r8
 8001372:	031e      	lsls	r6, r3, #12
 8001374:	0fd2      	lsrs	r2, r2, #31
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4650      	mov	r0, sl
 800137a:	4690      	mov	r8, r2
 800137c:	0b36      	lsrs	r6, r6, #12
 800137e:	0d5b      	lsrs	r3, r3, #21
 8001380:	d100      	bne.n	8001384 <__aeabi_dmul+0x5c>
 8001382:	e078      	b.n	8001476 <__aeabi_dmul+0x14e>
 8001384:	4ace      	ldr	r2, [pc, #824]	; (80016c0 <__aeabi_dmul+0x398>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d01d      	beq.n	80013c6 <__aeabi_dmul+0x9e>
 800138a:	49ce      	ldr	r1, [pc, #824]	; (80016c4 <__aeabi_dmul+0x39c>)
 800138c:	0f42      	lsrs	r2, r0, #29
 800138e:	468c      	mov	ip, r1
 8001390:	9900      	ldr	r1, [sp, #0]
 8001392:	4463      	add	r3, ip
 8001394:	00f6      	lsls	r6, r6, #3
 8001396:	468c      	mov	ip, r1
 8001398:	4316      	orrs	r6, r2
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	449c      	add	ip, r3
 800139e:	0412      	lsls	r2, r2, #16
 80013a0:	4663      	mov	r3, ip
 80013a2:	4316      	orrs	r6, r2
 80013a4:	00c2      	lsls	r2, r0, #3
 80013a6:	2000      	movs	r0, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9900      	ldr	r1, [sp, #0]
 80013ac:	4643      	mov	r3, r8
 80013ae:	3101      	adds	r1, #1
 80013b0:	468c      	mov	ip, r1
 80013b2:	4649      	mov	r1, r9
 80013b4:	407b      	eors	r3, r7
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	290f      	cmp	r1, #15
 80013ba:	d900      	bls.n	80013be <__aeabi_dmul+0x96>
 80013bc:	e07e      	b.n	80014bc <__aeabi_dmul+0x194>
 80013be:	4bc2      	ldr	r3, [pc, #776]	; (80016c8 <__aeabi_dmul+0x3a0>)
 80013c0:	0089      	lsls	r1, r1, #2
 80013c2:	5859      	ldr	r1, [r3, r1]
 80013c4:	468f      	mov	pc, r1
 80013c6:	4652      	mov	r2, sl
 80013c8:	9b00      	ldr	r3, [sp, #0]
 80013ca:	4332      	orrs	r2, r6
 80013cc:	d000      	beq.n	80013d0 <__aeabi_dmul+0xa8>
 80013ce:	e156      	b.n	800167e <__aeabi_dmul+0x356>
 80013d0:	49bb      	ldr	r1, [pc, #748]	; (80016c0 <__aeabi_dmul+0x398>)
 80013d2:	2600      	movs	r6, #0
 80013d4:	468c      	mov	ip, r1
 80013d6:	4463      	add	r3, ip
 80013d8:	4649      	mov	r1, r9
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2302      	movs	r3, #2
 80013de:	4319      	orrs	r1, r3
 80013e0:	4689      	mov	r9, r1
 80013e2:	2002      	movs	r0, #2
 80013e4:	e7e1      	b.n	80013aa <__aeabi_dmul+0x82>
 80013e6:	4643      	mov	r3, r8
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	0034      	movs	r4, r6
 80013ec:	0015      	movs	r5, r2
 80013ee:	4683      	mov	fp, r0
 80013f0:	465b      	mov	r3, fp
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d05e      	beq.n	80014b4 <__aeabi_dmul+0x18c>
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d100      	bne.n	80013fc <__aeabi_dmul+0xd4>
 80013fa:	e1f3      	b.n	80017e4 <__aeabi_dmul+0x4bc>
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d000      	beq.n	8001402 <__aeabi_dmul+0xda>
 8001400:	e118      	b.n	8001634 <__aeabi_dmul+0x30c>
 8001402:	2200      	movs	r2, #0
 8001404:	2400      	movs	r4, #0
 8001406:	2500      	movs	r5, #0
 8001408:	9b01      	ldr	r3, [sp, #4]
 800140a:	0512      	lsls	r2, r2, #20
 800140c:	4322      	orrs	r2, r4
 800140e:	07db      	lsls	r3, r3, #31
 8001410:	431a      	orrs	r2, r3
 8001412:	0028      	movs	r0, r5
 8001414:	0011      	movs	r1, r2
 8001416:	b007      	add	sp, #28
 8001418:	bcf0      	pop	{r4, r5, r6, r7}
 800141a:	46bb      	mov	fp, r7
 800141c:	46b2      	mov	sl, r6
 800141e:	46a9      	mov	r9, r5
 8001420:	46a0      	mov	r8, r4
 8001422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001424:	0025      	movs	r5, r4
 8001426:	4305      	orrs	r5, r0
 8001428:	d100      	bne.n	800142c <__aeabi_dmul+0x104>
 800142a:	e141      	b.n	80016b0 <__aeabi_dmul+0x388>
 800142c:	2c00      	cmp	r4, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dmul+0x10a>
 8001430:	e1ad      	b.n	800178e <__aeabi_dmul+0x466>
 8001432:	0020      	movs	r0, r4
 8001434:	f000 fe2e 	bl	8002094 <__clzsi2>
 8001438:	0001      	movs	r1, r0
 800143a:	0002      	movs	r2, r0
 800143c:	390b      	subs	r1, #11
 800143e:	231d      	movs	r3, #29
 8001440:	0010      	movs	r0, r2
 8001442:	1a5b      	subs	r3, r3, r1
 8001444:	0031      	movs	r1, r6
 8001446:	0035      	movs	r5, r6
 8001448:	3808      	subs	r0, #8
 800144a:	4084      	lsls	r4, r0
 800144c:	40d9      	lsrs	r1, r3
 800144e:	4085      	lsls	r5, r0
 8001450:	430c      	orrs	r4, r1
 8001452:	489e      	ldr	r0, [pc, #632]	; (80016cc <__aeabi_dmul+0x3a4>)
 8001454:	1a83      	subs	r3, r0, r2
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	4699      	mov	r9, r3
 800145c:	469b      	mov	fp, r3
 800145e:	e786      	b.n	800136e <__aeabi_dmul+0x46>
 8001460:	0005      	movs	r5, r0
 8001462:	4325      	orrs	r5, r4
 8001464:	d000      	beq.n	8001468 <__aeabi_dmul+0x140>
 8001466:	e11c      	b.n	80016a2 <__aeabi_dmul+0x37a>
 8001468:	2208      	movs	r2, #8
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	2302      	movs	r3, #2
 800146e:	2400      	movs	r4, #0
 8001470:	4691      	mov	r9, r2
 8001472:	469b      	mov	fp, r3
 8001474:	e77b      	b.n	800136e <__aeabi_dmul+0x46>
 8001476:	4652      	mov	r2, sl
 8001478:	4332      	orrs	r2, r6
 800147a:	d100      	bne.n	800147e <__aeabi_dmul+0x156>
 800147c:	e10a      	b.n	8001694 <__aeabi_dmul+0x36c>
 800147e:	2e00      	cmp	r6, #0
 8001480:	d100      	bne.n	8001484 <__aeabi_dmul+0x15c>
 8001482:	e176      	b.n	8001772 <__aeabi_dmul+0x44a>
 8001484:	0030      	movs	r0, r6
 8001486:	f000 fe05 	bl	8002094 <__clzsi2>
 800148a:	0002      	movs	r2, r0
 800148c:	3a0b      	subs	r2, #11
 800148e:	231d      	movs	r3, #29
 8001490:	0001      	movs	r1, r0
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	4652      	mov	r2, sl
 8001496:	3908      	subs	r1, #8
 8001498:	40da      	lsrs	r2, r3
 800149a:	408e      	lsls	r6, r1
 800149c:	4316      	orrs	r6, r2
 800149e:	4652      	mov	r2, sl
 80014a0:	408a      	lsls	r2, r1
 80014a2:	9b00      	ldr	r3, [sp, #0]
 80014a4:	4989      	ldr	r1, [pc, #548]	; (80016cc <__aeabi_dmul+0x3a4>)
 80014a6:	1a18      	subs	r0, r3, r0
 80014a8:	0003      	movs	r3, r0
 80014aa:	468c      	mov	ip, r1
 80014ac:	4463      	add	r3, ip
 80014ae:	2000      	movs	r0, #0
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	e77a      	b.n	80013aa <__aeabi_dmul+0x82>
 80014b4:	2400      	movs	r4, #0
 80014b6:	2500      	movs	r5, #0
 80014b8:	4a81      	ldr	r2, [pc, #516]	; (80016c0 <__aeabi_dmul+0x398>)
 80014ba:	e7a5      	b.n	8001408 <__aeabi_dmul+0xe0>
 80014bc:	0c2f      	lsrs	r7, r5, #16
 80014be:	042d      	lsls	r5, r5, #16
 80014c0:	0c2d      	lsrs	r5, r5, #16
 80014c2:	002b      	movs	r3, r5
 80014c4:	0c11      	lsrs	r1, r2, #16
 80014c6:	0412      	lsls	r2, r2, #16
 80014c8:	0c12      	lsrs	r2, r2, #16
 80014ca:	4353      	muls	r3, r2
 80014cc:	4698      	mov	r8, r3
 80014ce:	0013      	movs	r3, r2
 80014d0:	0028      	movs	r0, r5
 80014d2:	437b      	muls	r3, r7
 80014d4:	4699      	mov	r9, r3
 80014d6:	4348      	muls	r0, r1
 80014d8:	4448      	add	r0, r9
 80014da:	4683      	mov	fp, r0
 80014dc:	4640      	mov	r0, r8
 80014de:	000b      	movs	r3, r1
 80014e0:	0c00      	lsrs	r0, r0, #16
 80014e2:	4682      	mov	sl, r0
 80014e4:	4658      	mov	r0, fp
 80014e6:	437b      	muls	r3, r7
 80014e8:	4450      	add	r0, sl
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	4581      	cmp	r9, r0
 80014ee:	d906      	bls.n	80014fe <__aeabi_dmul+0x1d6>
 80014f0:	469a      	mov	sl, r3
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	4699      	mov	r9, r3
 80014f8:	44ca      	add	sl, r9
 80014fa:	4653      	mov	r3, sl
 80014fc:	9302      	str	r3, [sp, #8]
 80014fe:	0c03      	lsrs	r3, r0, #16
 8001500:	469b      	mov	fp, r3
 8001502:	4643      	mov	r3, r8
 8001504:	041b      	lsls	r3, r3, #16
 8001506:	0400      	lsls	r0, r0, #16
 8001508:	0c1b      	lsrs	r3, r3, #16
 800150a:	4698      	mov	r8, r3
 800150c:	0003      	movs	r3, r0
 800150e:	4443      	add	r3, r8
 8001510:	9304      	str	r3, [sp, #16]
 8001512:	0c33      	lsrs	r3, r6, #16
 8001514:	4699      	mov	r9, r3
 8001516:	002b      	movs	r3, r5
 8001518:	0436      	lsls	r6, r6, #16
 800151a:	0c36      	lsrs	r6, r6, #16
 800151c:	4373      	muls	r3, r6
 800151e:	4698      	mov	r8, r3
 8001520:	0033      	movs	r3, r6
 8001522:	437b      	muls	r3, r7
 8001524:	469a      	mov	sl, r3
 8001526:	464b      	mov	r3, r9
 8001528:	435d      	muls	r5, r3
 800152a:	435f      	muls	r7, r3
 800152c:	4643      	mov	r3, r8
 800152e:	4455      	add	r5, sl
 8001530:	0c18      	lsrs	r0, r3, #16
 8001532:	1940      	adds	r0, r0, r5
 8001534:	4582      	cmp	sl, r0
 8001536:	d903      	bls.n	8001540 <__aeabi_dmul+0x218>
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	025b      	lsls	r3, r3, #9
 800153c:	469a      	mov	sl, r3
 800153e:	4457      	add	r7, sl
 8001540:	0c05      	lsrs	r5, r0, #16
 8001542:	19eb      	adds	r3, r5, r7
 8001544:	9305      	str	r3, [sp, #20]
 8001546:	4643      	mov	r3, r8
 8001548:	041d      	lsls	r5, r3, #16
 800154a:	0c2d      	lsrs	r5, r5, #16
 800154c:	0400      	lsls	r0, r0, #16
 800154e:	1940      	adds	r0, r0, r5
 8001550:	0c25      	lsrs	r5, r4, #16
 8001552:	0424      	lsls	r4, r4, #16
 8001554:	0c24      	lsrs	r4, r4, #16
 8001556:	0027      	movs	r7, r4
 8001558:	4357      	muls	r7, r2
 800155a:	436a      	muls	r2, r5
 800155c:	4690      	mov	r8, r2
 800155e:	002a      	movs	r2, r5
 8001560:	0c3b      	lsrs	r3, r7, #16
 8001562:	469a      	mov	sl, r3
 8001564:	434a      	muls	r2, r1
 8001566:	4361      	muls	r1, r4
 8001568:	4441      	add	r1, r8
 800156a:	4451      	add	r1, sl
 800156c:	4483      	add	fp, r0
 800156e:	4588      	cmp	r8, r1
 8001570:	d903      	bls.n	800157a <__aeabi_dmul+0x252>
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	4698      	mov	r8, r3
 8001578:	4442      	add	r2, r8
 800157a:	043f      	lsls	r7, r7, #16
 800157c:	0c0b      	lsrs	r3, r1, #16
 800157e:	0c3f      	lsrs	r7, r7, #16
 8001580:	0409      	lsls	r1, r1, #16
 8001582:	19c9      	adds	r1, r1, r7
 8001584:	0027      	movs	r7, r4
 8001586:	4698      	mov	r8, r3
 8001588:	464b      	mov	r3, r9
 800158a:	4377      	muls	r7, r6
 800158c:	435c      	muls	r4, r3
 800158e:	436e      	muls	r6, r5
 8001590:	435d      	muls	r5, r3
 8001592:	0c3b      	lsrs	r3, r7, #16
 8001594:	4699      	mov	r9, r3
 8001596:	19a4      	adds	r4, r4, r6
 8001598:	444c      	add	r4, r9
 800159a:	4442      	add	r2, r8
 800159c:	9503      	str	r5, [sp, #12]
 800159e:	42a6      	cmp	r6, r4
 80015a0:	d904      	bls.n	80015ac <__aeabi_dmul+0x284>
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	025b      	lsls	r3, r3, #9
 80015a6:	4698      	mov	r8, r3
 80015a8:	4445      	add	r5, r8
 80015aa:	9503      	str	r5, [sp, #12]
 80015ac:	9b02      	ldr	r3, [sp, #8]
 80015ae:	043f      	lsls	r7, r7, #16
 80015b0:	445b      	add	r3, fp
 80015b2:	001e      	movs	r6, r3
 80015b4:	4283      	cmp	r3, r0
 80015b6:	4180      	sbcs	r0, r0
 80015b8:	0423      	lsls	r3, r4, #16
 80015ba:	4698      	mov	r8, r3
 80015bc:	9b05      	ldr	r3, [sp, #20]
 80015be:	0c3f      	lsrs	r7, r7, #16
 80015c0:	4447      	add	r7, r8
 80015c2:	4698      	mov	r8, r3
 80015c4:	1876      	adds	r6, r6, r1
 80015c6:	428e      	cmp	r6, r1
 80015c8:	4189      	sbcs	r1, r1
 80015ca:	4447      	add	r7, r8
 80015cc:	4240      	negs	r0, r0
 80015ce:	183d      	adds	r5, r7, r0
 80015d0:	46a8      	mov	r8, r5
 80015d2:	4693      	mov	fp, r2
 80015d4:	4249      	negs	r1, r1
 80015d6:	468a      	mov	sl, r1
 80015d8:	44c3      	add	fp, r8
 80015da:	429f      	cmp	r7, r3
 80015dc:	41bf      	sbcs	r7, r7
 80015de:	4580      	cmp	r8, r0
 80015e0:	4180      	sbcs	r0, r0
 80015e2:	9b03      	ldr	r3, [sp, #12]
 80015e4:	44da      	add	sl, fp
 80015e6:	4698      	mov	r8, r3
 80015e8:	4653      	mov	r3, sl
 80015ea:	4240      	negs	r0, r0
 80015ec:	427f      	negs	r7, r7
 80015ee:	4307      	orrs	r7, r0
 80015f0:	0c24      	lsrs	r4, r4, #16
 80015f2:	4593      	cmp	fp, r2
 80015f4:	4192      	sbcs	r2, r2
 80015f6:	458a      	cmp	sl, r1
 80015f8:	4189      	sbcs	r1, r1
 80015fa:	193f      	adds	r7, r7, r4
 80015fc:	0ddc      	lsrs	r4, r3, #23
 80015fe:	9b04      	ldr	r3, [sp, #16]
 8001600:	0275      	lsls	r5, r6, #9
 8001602:	431d      	orrs	r5, r3
 8001604:	1e68      	subs	r0, r5, #1
 8001606:	4185      	sbcs	r5, r0
 8001608:	4653      	mov	r3, sl
 800160a:	4252      	negs	r2, r2
 800160c:	4249      	negs	r1, r1
 800160e:	430a      	orrs	r2, r1
 8001610:	18bf      	adds	r7, r7, r2
 8001612:	4447      	add	r7, r8
 8001614:	0df6      	lsrs	r6, r6, #23
 8001616:	027f      	lsls	r7, r7, #9
 8001618:	4335      	orrs	r5, r6
 800161a:	025a      	lsls	r2, r3, #9
 800161c:	433c      	orrs	r4, r7
 800161e:	4315      	orrs	r5, r2
 8001620:	01fb      	lsls	r3, r7, #7
 8001622:	d400      	bmi.n	8001626 <__aeabi_dmul+0x2fe>
 8001624:	e0c1      	b.n	80017aa <__aeabi_dmul+0x482>
 8001626:	2101      	movs	r1, #1
 8001628:	086a      	lsrs	r2, r5, #1
 800162a:	400d      	ands	r5, r1
 800162c:	4315      	orrs	r5, r2
 800162e:	07e2      	lsls	r2, r4, #31
 8001630:	4315      	orrs	r5, r2
 8001632:	0864      	lsrs	r4, r4, #1
 8001634:	4926      	ldr	r1, [pc, #152]	; (80016d0 <__aeabi_dmul+0x3a8>)
 8001636:	4461      	add	r1, ip
 8001638:	2900      	cmp	r1, #0
 800163a:	dd56      	ble.n	80016ea <__aeabi_dmul+0x3c2>
 800163c:	076b      	lsls	r3, r5, #29
 800163e:	d009      	beq.n	8001654 <__aeabi_dmul+0x32c>
 8001640:	220f      	movs	r2, #15
 8001642:	402a      	ands	r2, r5
 8001644:	2a04      	cmp	r2, #4
 8001646:	d005      	beq.n	8001654 <__aeabi_dmul+0x32c>
 8001648:	1d2a      	adds	r2, r5, #4
 800164a:	42aa      	cmp	r2, r5
 800164c:	41ad      	sbcs	r5, r5
 800164e:	426d      	negs	r5, r5
 8001650:	1964      	adds	r4, r4, r5
 8001652:	0015      	movs	r5, r2
 8001654:	01e3      	lsls	r3, r4, #7
 8001656:	d504      	bpl.n	8001662 <__aeabi_dmul+0x33a>
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	4a1e      	ldr	r2, [pc, #120]	; (80016d4 <__aeabi_dmul+0x3ac>)
 800165c:	00c9      	lsls	r1, r1, #3
 800165e:	4014      	ands	r4, r2
 8001660:	4461      	add	r1, ip
 8001662:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <__aeabi_dmul+0x3b0>)
 8001664:	4291      	cmp	r1, r2
 8001666:	dd00      	ble.n	800166a <__aeabi_dmul+0x342>
 8001668:	e724      	b.n	80014b4 <__aeabi_dmul+0x18c>
 800166a:	0762      	lsls	r2, r4, #29
 800166c:	08ed      	lsrs	r5, r5, #3
 800166e:	0264      	lsls	r4, r4, #9
 8001670:	0549      	lsls	r1, r1, #21
 8001672:	4315      	orrs	r5, r2
 8001674:	0b24      	lsrs	r4, r4, #12
 8001676:	0d4a      	lsrs	r2, r1, #21
 8001678:	e6c6      	b.n	8001408 <__aeabi_dmul+0xe0>
 800167a:	9701      	str	r7, [sp, #4]
 800167c:	e6b8      	b.n	80013f0 <__aeabi_dmul+0xc8>
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <__aeabi_dmul+0x398>)
 8001680:	2003      	movs	r0, #3
 8001682:	4694      	mov	ip, r2
 8001684:	4463      	add	r3, ip
 8001686:	464a      	mov	r2, r9
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2303      	movs	r3, #3
 800168c:	431a      	orrs	r2, r3
 800168e:	4691      	mov	r9, r2
 8001690:	4652      	mov	r2, sl
 8001692:	e68a      	b.n	80013aa <__aeabi_dmul+0x82>
 8001694:	4649      	mov	r1, r9
 8001696:	2301      	movs	r3, #1
 8001698:	4319      	orrs	r1, r3
 800169a:	4689      	mov	r9, r1
 800169c:	2600      	movs	r6, #0
 800169e:	2001      	movs	r0, #1
 80016a0:	e683      	b.n	80013aa <__aeabi_dmul+0x82>
 80016a2:	220c      	movs	r2, #12
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2303      	movs	r3, #3
 80016a8:	0005      	movs	r5, r0
 80016aa:	4691      	mov	r9, r2
 80016ac:	469b      	mov	fp, r3
 80016ae:	e65e      	b.n	800136e <__aeabi_dmul+0x46>
 80016b0:	2304      	movs	r3, #4
 80016b2:	4699      	mov	r9, r3
 80016b4:	2300      	movs	r3, #0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	2400      	movs	r4, #0
 80016bc:	469b      	mov	fp, r3
 80016be:	e656      	b.n	800136e <__aeabi_dmul+0x46>
 80016c0:	000007ff 	.word	0x000007ff
 80016c4:	fffffc01 	.word	0xfffffc01
 80016c8:	08006e68 	.word	0x08006e68
 80016cc:	fffffc0d 	.word	0xfffffc0d
 80016d0:	000003ff 	.word	0x000003ff
 80016d4:	feffffff 	.word	0xfeffffff
 80016d8:	000007fe 	.word	0x000007fe
 80016dc:	2300      	movs	r3, #0
 80016de:	2480      	movs	r4, #128	; 0x80
 80016e0:	2500      	movs	r5, #0
 80016e2:	4a44      	ldr	r2, [pc, #272]	; (80017f4 <__aeabi_dmul+0x4cc>)
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	0324      	lsls	r4, r4, #12
 80016e8:	e68e      	b.n	8001408 <__aeabi_dmul+0xe0>
 80016ea:	2001      	movs	r0, #1
 80016ec:	1a40      	subs	r0, r0, r1
 80016ee:	2838      	cmp	r0, #56	; 0x38
 80016f0:	dd00      	ble.n	80016f4 <__aeabi_dmul+0x3cc>
 80016f2:	e686      	b.n	8001402 <__aeabi_dmul+0xda>
 80016f4:	281f      	cmp	r0, #31
 80016f6:	dd5b      	ble.n	80017b0 <__aeabi_dmul+0x488>
 80016f8:	221f      	movs	r2, #31
 80016fa:	0023      	movs	r3, r4
 80016fc:	4252      	negs	r2, r2
 80016fe:	1a51      	subs	r1, r2, r1
 8001700:	40cb      	lsrs	r3, r1
 8001702:	0019      	movs	r1, r3
 8001704:	2820      	cmp	r0, #32
 8001706:	d003      	beq.n	8001710 <__aeabi_dmul+0x3e8>
 8001708:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <__aeabi_dmul+0x4d0>)
 800170a:	4462      	add	r2, ip
 800170c:	4094      	lsls	r4, r2
 800170e:	4325      	orrs	r5, r4
 8001710:	1e6a      	subs	r2, r5, #1
 8001712:	4195      	sbcs	r5, r2
 8001714:	002a      	movs	r2, r5
 8001716:	430a      	orrs	r2, r1
 8001718:	2107      	movs	r1, #7
 800171a:	000d      	movs	r5, r1
 800171c:	2400      	movs	r4, #0
 800171e:	4015      	ands	r5, r2
 8001720:	4211      	tst	r1, r2
 8001722:	d05b      	beq.n	80017dc <__aeabi_dmul+0x4b4>
 8001724:	210f      	movs	r1, #15
 8001726:	2400      	movs	r4, #0
 8001728:	4011      	ands	r1, r2
 800172a:	2904      	cmp	r1, #4
 800172c:	d053      	beq.n	80017d6 <__aeabi_dmul+0x4ae>
 800172e:	1d11      	adds	r1, r2, #4
 8001730:	4291      	cmp	r1, r2
 8001732:	4192      	sbcs	r2, r2
 8001734:	4252      	negs	r2, r2
 8001736:	18a4      	adds	r4, r4, r2
 8001738:	000a      	movs	r2, r1
 800173a:	0223      	lsls	r3, r4, #8
 800173c:	d54b      	bpl.n	80017d6 <__aeabi_dmul+0x4ae>
 800173e:	2201      	movs	r2, #1
 8001740:	2400      	movs	r4, #0
 8001742:	2500      	movs	r5, #0
 8001744:	e660      	b.n	8001408 <__aeabi_dmul+0xe0>
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	031b      	lsls	r3, r3, #12
 800174a:	421c      	tst	r4, r3
 800174c:	d009      	beq.n	8001762 <__aeabi_dmul+0x43a>
 800174e:	421e      	tst	r6, r3
 8001750:	d107      	bne.n	8001762 <__aeabi_dmul+0x43a>
 8001752:	4333      	orrs	r3, r6
 8001754:	031c      	lsls	r4, r3, #12
 8001756:	4643      	mov	r3, r8
 8001758:	0015      	movs	r5, r2
 800175a:	0b24      	lsrs	r4, r4, #12
 800175c:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <__aeabi_dmul+0x4cc>)
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	e652      	b.n	8001408 <__aeabi_dmul+0xe0>
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	0312      	lsls	r2, r2, #12
 8001766:	4314      	orrs	r4, r2
 8001768:	0324      	lsls	r4, r4, #12
 800176a:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <__aeabi_dmul+0x4cc>)
 800176c:	0b24      	lsrs	r4, r4, #12
 800176e:	9701      	str	r7, [sp, #4]
 8001770:	e64a      	b.n	8001408 <__aeabi_dmul+0xe0>
 8001772:	f000 fc8f 	bl	8002094 <__clzsi2>
 8001776:	0003      	movs	r3, r0
 8001778:	001a      	movs	r2, r3
 800177a:	3215      	adds	r2, #21
 800177c:	3020      	adds	r0, #32
 800177e:	2a1c      	cmp	r2, #28
 8001780:	dc00      	bgt.n	8001784 <__aeabi_dmul+0x45c>
 8001782:	e684      	b.n	800148e <__aeabi_dmul+0x166>
 8001784:	4656      	mov	r6, sl
 8001786:	3b08      	subs	r3, #8
 8001788:	2200      	movs	r2, #0
 800178a:	409e      	lsls	r6, r3
 800178c:	e689      	b.n	80014a2 <__aeabi_dmul+0x17a>
 800178e:	f000 fc81 	bl	8002094 <__clzsi2>
 8001792:	0001      	movs	r1, r0
 8001794:	0002      	movs	r2, r0
 8001796:	3115      	adds	r1, #21
 8001798:	3220      	adds	r2, #32
 800179a:	291c      	cmp	r1, #28
 800179c:	dc00      	bgt.n	80017a0 <__aeabi_dmul+0x478>
 800179e:	e64e      	b.n	800143e <__aeabi_dmul+0x116>
 80017a0:	0034      	movs	r4, r6
 80017a2:	3808      	subs	r0, #8
 80017a4:	2500      	movs	r5, #0
 80017a6:	4084      	lsls	r4, r0
 80017a8:	e653      	b.n	8001452 <__aeabi_dmul+0x12a>
 80017aa:	9b00      	ldr	r3, [sp, #0]
 80017ac:	469c      	mov	ip, r3
 80017ae:	e741      	b.n	8001634 <__aeabi_dmul+0x30c>
 80017b0:	4912      	ldr	r1, [pc, #72]	; (80017fc <__aeabi_dmul+0x4d4>)
 80017b2:	0022      	movs	r2, r4
 80017b4:	4461      	add	r1, ip
 80017b6:	002e      	movs	r6, r5
 80017b8:	408d      	lsls	r5, r1
 80017ba:	408a      	lsls	r2, r1
 80017bc:	40c6      	lsrs	r6, r0
 80017be:	1e69      	subs	r1, r5, #1
 80017c0:	418d      	sbcs	r5, r1
 80017c2:	4332      	orrs	r2, r6
 80017c4:	432a      	orrs	r2, r5
 80017c6:	40c4      	lsrs	r4, r0
 80017c8:	0753      	lsls	r3, r2, #29
 80017ca:	d0b6      	beq.n	800173a <__aeabi_dmul+0x412>
 80017cc:	210f      	movs	r1, #15
 80017ce:	4011      	ands	r1, r2
 80017d0:	2904      	cmp	r1, #4
 80017d2:	d1ac      	bne.n	800172e <__aeabi_dmul+0x406>
 80017d4:	e7b1      	b.n	800173a <__aeabi_dmul+0x412>
 80017d6:	0765      	lsls	r5, r4, #29
 80017d8:	0264      	lsls	r4, r4, #9
 80017da:	0b24      	lsrs	r4, r4, #12
 80017dc:	08d2      	lsrs	r2, r2, #3
 80017de:	4315      	orrs	r5, r2
 80017e0:	2200      	movs	r2, #0
 80017e2:	e611      	b.n	8001408 <__aeabi_dmul+0xe0>
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	0312      	lsls	r2, r2, #12
 80017e8:	4314      	orrs	r4, r2
 80017ea:	0324      	lsls	r4, r4, #12
 80017ec:	4a01      	ldr	r2, [pc, #4]	; (80017f4 <__aeabi_dmul+0x4cc>)
 80017ee:	0b24      	lsrs	r4, r4, #12
 80017f0:	e60a      	b.n	8001408 <__aeabi_dmul+0xe0>
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	000007ff 	.word	0x000007ff
 80017f8:	0000043e 	.word	0x0000043e
 80017fc:	0000041e 	.word	0x0000041e

08001800 <__aeabi_dsub>:
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	4657      	mov	r7, sl
 8001804:	464e      	mov	r6, r9
 8001806:	4645      	mov	r5, r8
 8001808:	46de      	mov	lr, fp
 800180a:	0004      	movs	r4, r0
 800180c:	b5e0      	push	{r5, r6, r7, lr}
 800180e:	001f      	movs	r7, r3
 8001810:	0010      	movs	r0, r2
 8001812:	030b      	lsls	r3, r1, #12
 8001814:	0f62      	lsrs	r2, r4, #29
 8001816:	004e      	lsls	r6, r1, #1
 8001818:	0fcd      	lsrs	r5, r1, #31
 800181a:	0a5b      	lsrs	r3, r3, #9
 800181c:	0339      	lsls	r1, r7, #12
 800181e:	4313      	orrs	r3, r2
 8001820:	0a49      	lsrs	r1, r1, #9
 8001822:	00e2      	lsls	r2, r4, #3
 8001824:	0f44      	lsrs	r4, r0, #29
 8001826:	4321      	orrs	r1, r4
 8001828:	4cc2      	ldr	r4, [pc, #776]	; (8001b34 <__aeabi_dsub+0x334>)
 800182a:	4691      	mov	r9, r2
 800182c:	4692      	mov	sl, r2
 800182e:	00c0      	lsls	r0, r0, #3
 8001830:	007a      	lsls	r2, r7, #1
 8001832:	4680      	mov	r8, r0
 8001834:	0d76      	lsrs	r6, r6, #21
 8001836:	0d52      	lsrs	r2, r2, #21
 8001838:	0fff      	lsrs	r7, r7, #31
 800183a:	42a2      	cmp	r2, r4
 800183c:	d100      	bne.n	8001840 <__aeabi_dsub+0x40>
 800183e:	e0b4      	b.n	80019aa <__aeabi_dsub+0x1aa>
 8001840:	2401      	movs	r4, #1
 8001842:	4067      	eors	r7, r4
 8001844:	46bb      	mov	fp, r7
 8001846:	42bd      	cmp	r5, r7
 8001848:	d100      	bne.n	800184c <__aeabi_dsub+0x4c>
 800184a:	e088      	b.n	800195e <__aeabi_dsub+0x15e>
 800184c:	1ab4      	subs	r4, r6, r2
 800184e:	46a4      	mov	ip, r4
 8001850:	2c00      	cmp	r4, #0
 8001852:	dc00      	bgt.n	8001856 <__aeabi_dsub+0x56>
 8001854:	e0b2      	b.n	80019bc <__aeabi_dsub+0x1bc>
 8001856:	2a00      	cmp	r2, #0
 8001858:	d100      	bne.n	800185c <__aeabi_dsub+0x5c>
 800185a:	e0c5      	b.n	80019e8 <__aeabi_dsub+0x1e8>
 800185c:	4ab5      	ldr	r2, [pc, #724]	; (8001b34 <__aeabi_dsub+0x334>)
 800185e:	4296      	cmp	r6, r2
 8001860:	d100      	bne.n	8001864 <__aeabi_dsub+0x64>
 8001862:	e28b      	b.n	8001d7c <__aeabi_dsub+0x57c>
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	0412      	lsls	r2, r2, #16
 8001868:	4311      	orrs	r1, r2
 800186a:	4662      	mov	r2, ip
 800186c:	2a38      	cmp	r2, #56	; 0x38
 800186e:	dd00      	ble.n	8001872 <__aeabi_dsub+0x72>
 8001870:	e1a1      	b.n	8001bb6 <__aeabi_dsub+0x3b6>
 8001872:	2a1f      	cmp	r2, #31
 8001874:	dd00      	ble.n	8001878 <__aeabi_dsub+0x78>
 8001876:	e216      	b.n	8001ca6 <__aeabi_dsub+0x4a6>
 8001878:	2720      	movs	r7, #32
 800187a:	000c      	movs	r4, r1
 800187c:	1abf      	subs	r7, r7, r2
 800187e:	40bc      	lsls	r4, r7
 8001880:	0002      	movs	r2, r0
 8001882:	46a0      	mov	r8, r4
 8001884:	4664      	mov	r4, ip
 8001886:	40b8      	lsls	r0, r7
 8001888:	40e2      	lsrs	r2, r4
 800188a:	4644      	mov	r4, r8
 800188c:	4314      	orrs	r4, r2
 800188e:	0002      	movs	r2, r0
 8001890:	1e50      	subs	r0, r2, #1
 8001892:	4182      	sbcs	r2, r0
 8001894:	4660      	mov	r0, ip
 8001896:	40c1      	lsrs	r1, r0
 8001898:	4322      	orrs	r2, r4
 800189a:	1a5b      	subs	r3, r3, r1
 800189c:	4649      	mov	r1, r9
 800189e:	1a8c      	subs	r4, r1, r2
 80018a0:	45a1      	cmp	r9, r4
 80018a2:	4192      	sbcs	r2, r2
 80018a4:	4252      	negs	r2, r2
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	4698      	mov	r8, r3
 80018aa:	4643      	mov	r3, r8
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	d400      	bmi.n	80018b2 <__aeabi_dsub+0xb2>
 80018b0:	e117      	b.n	8001ae2 <__aeabi_dsub+0x2e2>
 80018b2:	4643      	mov	r3, r8
 80018b4:	025b      	lsls	r3, r3, #9
 80018b6:	0a5b      	lsrs	r3, r3, #9
 80018b8:	4698      	mov	r8, r3
 80018ba:	4643      	mov	r3, r8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d100      	bne.n	80018c2 <__aeabi_dsub+0xc2>
 80018c0:	e16c      	b.n	8001b9c <__aeabi_dsub+0x39c>
 80018c2:	4640      	mov	r0, r8
 80018c4:	f000 fbe6 	bl	8002094 <__clzsi2>
 80018c8:	0002      	movs	r2, r0
 80018ca:	3a08      	subs	r2, #8
 80018cc:	2120      	movs	r1, #32
 80018ce:	0020      	movs	r0, r4
 80018d0:	4643      	mov	r3, r8
 80018d2:	1a89      	subs	r1, r1, r2
 80018d4:	4093      	lsls	r3, r2
 80018d6:	40c8      	lsrs	r0, r1
 80018d8:	4094      	lsls	r4, r2
 80018da:	4303      	orrs	r3, r0
 80018dc:	4296      	cmp	r6, r2
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dsub+0xe2>
 80018e0:	e157      	b.n	8001b92 <__aeabi_dsub+0x392>
 80018e2:	1b96      	subs	r6, r2, r6
 80018e4:	1c71      	adds	r1, r6, #1
 80018e6:	291f      	cmp	r1, #31
 80018e8:	dd00      	ble.n	80018ec <__aeabi_dsub+0xec>
 80018ea:	e1cb      	b.n	8001c84 <__aeabi_dsub+0x484>
 80018ec:	2220      	movs	r2, #32
 80018ee:	0018      	movs	r0, r3
 80018f0:	0026      	movs	r6, r4
 80018f2:	1a52      	subs	r2, r2, r1
 80018f4:	4094      	lsls	r4, r2
 80018f6:	4090      	lsls	r0, r2
 80018f8:	40ce      	lsrs	r6, r1
 80018fa:	40cb      	lsrs	r3, r1
 80018fc:	1e62      	subs	r2, r4, #1
 80018fe:	4194      	sbcs	r4, r2
 8001900:	4330      	orrs	r0, r6
 8001902:	4698      	mov	r8, r3
 8001904:	2600      	movs	r6, #0
 8001906:	4304      	orrs	r4, r0
 8001908:	0763      	lsls	r3, r4, #29
 800190a:	d009      	beq.n	8001920 <__aeabi_dsub+0x120>
 800190c:	230f      	movs	r3, #15
 800190e:	4023      	ands	r3, r4
 8001910:	2b04      	cmp	r3, #4
 8001912:	d005      	beq.n	8001920 <__aeabi_dsub+0x120>
 8001914:	1d23      	adds	r3, r4, #4
 8001916:	42a3      	cmp	r3, r4
 8001918:	41a4      	sbcs	r4, r4
 800191a:	4264      	negs	r4, r4
 800191c:	44a0      	add	r8, r4
 800191e:	001c      	movs	r4, r3
 8001920:	4643      	mov	r3, r8
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	d400      	bmi.n	8001928 <__aeabi_dsub+0x128>
 8001926:	e0df      	b.n	8001ae8 <__aeabi_dsub+0x2e8>
 8001928:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <__aeabi_dsub+0x334>)
 800192a:	3601      	adds	r6, #1
 800192c:	429e      	cmp	r6, r3
 800192e:	d100      	bne.n	8001932 <__aeabi_dsub+0x132>
 8001930:	e0fb      	b.n	8001b2a <__aeabi_dsub+0x32a>
 8001932:	4642      	mov	r2, r8
 8001934:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <__aeabi_dsub+0x338>)
 8001936:	08e4      	lsrs	r4, r4, #3
 8001938:	401a      	ands	r2, r3
 800193a:	0013      	movs	r3, r2
 800193c:	0571      	lsls	r1, r6, #21
 800193e:	0752      	lsls	r2, r2, #29
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	4322      	orrs	r2, r4
 8001944:	0b1b      	lsrs	r3, r3, #12
 8001946:	0d49      	lsrs	r1, r1, #21
 8001948:	0509      	lsls	r1, r1, #20
 800194a:	07ed      	lsls	r5, r5, #31
 800194c:	4319      	orrs	r1, r3
 800194e:	4329      	orrs	r1, r5
 8001950:	0010      	movs	r0, r2
 8001952:	bcf0      	pop	{r4, r5, r6, r7}
 8001954:	46bb      	mov	fp, r7
 8001956:	46b2      	mov	sl, r6
 8001958:	46a9      	mov	r9, r5
 800195a:	46a0      	mov	r8, r4
 800195c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195e:	1ab4      	subs	r4, r6, r2
 8001960:	46a4      	mov	ip, r4
 8001962:	2c00      	cmp	r4, #0
 8001964:	dd58      	ble.n	8001a18 <__aeabi_dsub+0x218>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dsub+0x16c>
 800196a:	e09e      	b.n	8001aaa <__aeabi_dsub+0x2aa>
 800196c:	4a71      	ldr	r2, [pc, #452]	; (8001b34 <__aeabi_dsub+0x334>)
 800196e:	4296      	cmp	r6, r2
 8001970:	d100      	bne.n	8001974 <__aeabi_dsub+0x174>
 8001972:	e13b      	b.n	8001bec <__aeabi_dsub+0x3ec>
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	0412      	lsls	r2, r2, #16
 8001978:	4311      	orrs	r1, r2
 800197a:	4662      	mov	r2, ip
 800197c:	2a38      	cmp	r2, #56	; 0x38
 800197e:	dd00      	ble.n	8001982 <__aeabi_dsub+0x182>
 8001980:	e0c1      	b.n	8001b06 <__aeabi_dsub+0x306>
 8001982:	2a1f      	cmp	r2, #31
 8001984:	dc00      	bgt.n	8001988 <__aeabi_dsub+0x188>
 8001986:	e1bb      	b.n	8001d00 <__aeabi_dsub+0x500>
 8001988:	000c      	movs	r4, r1
 800198a:	3a20      	subs	r2, #32
 800198c:	40d4      	lsrs	r4, r2
 800198e:	0022      	movs	r2, r4
 8001990:	4664      	mov	r4, ip
 8001992:	2c20      	cmp	r4, #32
 8001994:	d004      	beq.n	80019a0 <__aeabi_dsub+0x1a0>
 8001996:	2740      	movs	r7, #64	; 0x40
 8001998:	1b3f      	subs	r7, r7, r4
 800199a:	40b9      	lsls	r1, r7
 800199c:	4308      	orrs	r0, r1
 800199e:	4680      	mov	r8, r0
 80019a0:	4644      	mov	r4, r8
 80019a2:	1e61      	subs	r1, r4, #1
 80019a4:	418c      	sbcs	r4, r1
 80019a6:	4314      	orrs	r4, r2
 80019a8:	e0b1      	b.n	8001b0e <__aeabi_dsub+0x30e>
 80019aa:	000c      	movs	r4, r1
 80019ac:	4304      	orrs	r4, r0
 80019ae:	d02a      	beq.n	8001a06 <__aeabi_dsub+0x206>
 80019b0:	46bb      	mov	fp, r7
 80019b2:	42bd      	cmp	r5, r7
 80019b4:	d02d      	beq.n	8001a12 <__aeabi_dsub+0x212>
 80019b6:	4c61      	ldr	r4, [pc, #388]	; (8001b3c <__aeabi_dsub+0x33c>)
 80019b8:	46a4      	mov	ip, r4
 80019ba:	44b4      	add	ip, r6
 80019bc:	4664      	mov	r4, ip
 80019be:	2c00      	cmp	r4, #0
 80019c0:	d05c      	beq.n	8001a7c <__aeabi_dsub+0x27c>
 80019c2:	1b94      	subs	r4, r2, r6
 80019c4:	46a4      	mov	ip, r4
 80019c6:	2e00      	cmp	r6, #0
 80019c8:	d000      	beq.n	80019cc <__aeabi_dsub+0x1cc>
 80019ca:	e115      	b.n	8001bf8 <__aeabi_dsub+0x3f8>
 80019cc:	464d      	mov	r5, r9
 80019ce:	431d      	orrs	r5, r3
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x1d4>
 80019d2:	e1c3      	b.n	8001d5c <__aeabi_dsub+0x55c>
 80019d4:	1e65      	subs	r5, r4, #1
 80019d6:	2c01      	cmp	r4, #1
 80019d8:	d100      	bne.n	80019dc <__aeabi_dsub+0x1dc>
 80019da:	e20c      	b.n	8001df6 <__aeabi_dsub+0x5f6>
 80019dc:	4e55      	ldr	r6, [pc, #340]	; (8001b34 <__aeabi_dsub+0x334>)
 80019de:	42b4      	cmp	r4, r6
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1e4>
 80019e2:	e1f8      	b.n	8001dd6 <__aeabi_dsub+0x5d6>
 80019e4:	46ac      	mov	ip, r5
 80019e6:	e10e      	b.n	8001c06 <__aeabi_dsub+0x406>
 80019e8:	000a      	movs	r2, r1
 80019ea:	4302      	orrs	r2, r0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dsub+0x1f0>
 80019ee:	e136      	b.n	8001c5e <__aeabi_dsub+0x45e>
 80019f0:	0022      	movs	r2, r4
 80019f2:	3a01      	subs	r2, #1
 80019f4:	2c01      	cmp	r4, #1
 80019f6:	d100      	bne.n	80019fa <__aeabi_dsub+0x1fa>
 80019f8:	e1c6      	b.n	8001d88 <__aeabi_dsub+0x588>
 80019fa:	4c4e      	ldr	r4, [pc, #312]	; (8001b34 <__aeabi_dsub+0x334>)
 80019fc:	45a4      	cmp	ip, r4
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0x202>
 8001a00:	e0f4      	b.n	8001bec <__aeabi_dsub+0x3ec>
 8001a02:	4694      	mov	ip, r2
 8001a04:	e731      	b.n	800186a <__aeabi_dsub+0x6a>
 8001a06:	2401      	movs	r4, #1
 8001a08:	4067      	eors	r7, r4
 8001a0a:	46bb      	mov	fp, r7
 8001a0c:	42bd      	cmp	r5, r7
 8001a0e:	d000      	beq.n	8001a12 <__aeabi_dsub+0x212>
 8001a10:	e71c      	b.n	800184c <__aeabi_dsub+0x4c>
 8001a12:	4c4a      	ldr	r4, [pc, #296]	; (8001b3c <__aeabi_dsub+0x33c>)
 8001a14:	46a4      	mov	ip, r4
 8001a16:	44b4      	add	ip, r6
 8001a18:	4664      	mov	r4, ip
 8001a1a:	2c00      	cmp	r4, #0
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x220>
 8001a1e:	e0cf      	b.n	8001bc0 <__aeabi_dsub+0x3c0>
 8001a20:	1b94      	subs	r4, r2, r6
 8001a22:	46a4      	mov	ip, r4
 8001a24:	2e00      	cmp	r6, #0
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dsub+0x22a>
 8001a28:	e15c      	b.n	8001ce4 <__aeabi_dsub+0x4e4>
 8001a2a:	4e42      	ldr	r6, [pc, #264]	; (8001b34 <__aeabi_dsub+0x334>)
 8001a2c:	42b2      	cmp	r2, r6
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_dsub+0x232>
 8001a30:	e1ec      	b.n	8001e0c <__aeabi_dsub+0x60c>
 8001a32:	2680      	movs	r6, #128	; 0x80
 8001a34:	0436      	lsls	r6, r6, #16
 8001a36:	4333      	orrs	r3, r6
 8001a38:	4664      	mov	r4, ip
 8001a3a:	2c38      	cmp	r4, #56	; 0x38
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dsub+0x240>
 8001a3e:	e1b3      	b.n	8001da8 <__aeabi_dsub+0x5a8>
 8001a40:	2c1f      	cmp	r4, #31
 8001a42:	dd00      	ble.n	8001a46 <__aeabi_dsub+0x246>
 8001a44:	e238      	b.n	8001eb8 <__aeabi_dsub+0x6b8>
 8001a46:	2620      	movs	r6, #32
 8001a48:	1b36      	subs	r6, r6, r4
 8001a4a:	001c      	movs	r4, r3
 8001a4c:	40b4      	lsls	r4, r6
 8001a4e:	464f      	mov	r7, r9
 8001a50:	46a0      	mov	r8, r4
 8001a52:	4664      	mov	r4, ip
 8001a54:	40e7      	lsrs	r7, r4
 8001a56:	4644      	mov	r4, r8
 8001a58:	433c      	orrs	r4, r7
 8001a5a:	464f      	mov	r7, r9
 8001a5c:	40b7      	lsls	r7, r6
 8001a5e:	003e      	movs	r6, r7
 8001a60:	1e77      	subs	r7, r6, #1
 8001a62:	41be      	sbcs	r6, r7
 8001a64:	4334      	orrs	r4, r6
 8001a66:	4666      	mov	r6, ip
 8001a68:	40f3      	lsrs	r3, r6
 8001a6a:	18c9      	adds	r1, r1, r3
 8001a6c:	1824      	adds	r4, r4, r0
 8001a6e:	4284      	cmp	r4, r0
 8001a70:	419b      	sbcs	r3, r3
 8001a72:	425b      	negs	r3, r3
 8001a74:	4698      	mov	r8, r3
 8001a76:	0016      	movs	r6, r2
 8001a78:	4488      	add	r8, r1
 8001a7a:	e04e      	b.n	8001b1a <__aeabi_dsub+0x31a>
 8001a7c:	4a30      	ldr	r2, [pc, #192]	; (8001b40 <__aeabi_dsub+0x340>)
 8001a7e:	1c74      	adds	r4, r6, #1
 8001a80:	4214      	tst	r4, r2
 8001a82:	d000      	beq.n	8001a86 <__aeabi_dsub+0x286>
 8001a84:	e0d6      	b.n	8001c34 <__aeabi_dsub+0x434>
 8001a86:	464a      	mov	r2, r9
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	2e00      	cmp	r6, #0
 8001a8c:	d000      	beq.n	8001a90 <__aeabi_dsub+0x290>
 8001a8e:	e15b      	b.n	8001d48 <__aeabi_dsub+0x548>
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dsub+0x296>
 8001a94:	e1a5      	b.n	8001de2 <__aeabi_dsub+0x5e2>
 8001a96:	000a      	movs	r2, r1
 8001a98:	4302      	orrs	r2, r0
 8001a9a:	d000      	beq.n	8001a9e <__aeabi_dsub+0x29e>
 8001a9c:	e1bb      	b.n	8001e16 <__aeabi_dsub+0x616>
 8001a9e:	464a      	mov	r2, r9
 8001aa0:	0759      	lsls	r1, r3, #29
 8001aa2:	08d2      	lsrs	r2, r2, #3
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	08db      	lsrs	r3, r3, #3
 8001aa8:	e027      	b.n	8001afa <__aeabi_dsub+0x2fa>
 8001aaa:	000a      	movs	r2, r1
 8001aac:	4302      	orrs	r2, r0
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dsub+0x2b2>
 8001ab0:	e174      	b.n	8001d9c <__aeabi_dsub+0x59c>
 8001ab2:	0022      	movs	r2, r4
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	2c01      	cmp	r4, #1
 8001ab8:	d005      	beq.n	8001ac6 <__aeabi_dsub+0x2c6>
 8001aba:	4c1e      	ldr	r4, [pc, #120]	; (8001b34 <__aeabi_dsub+0x334>)
 8001abc:	45a4      	cmp	ip, r4
 8001abe:	d100      	bne.n	8001ac2 <__aeabi_dsub+0x2c2>
 8001ac0:	e094      	b.n	8001bec <__aeabi_dsub+0x3ec>
 8001ac2:	4694      	mov	ip, r2
 8001ac4:	e759      	b.n	800197a <__aeabi_dsub+0x17a>
 8001ac6:	4448      	add	r0, r9
 8001ac8:	4548      	cmp	r0, r9
 8001aca:	4192      	sbcs	r2, r2
 8001acc:	185b      	adds	r3, r3, r1
 8001ace:	4698      	mov	r8, r3
 8001ad0:	0004      	movs	r4, r0
 8001ad2:	4252      	negs	r2, r2
 8001ad4:	4490      	add	r8, r2
 8001ad6:	4643      	mov	r3, r8
 8001ad8:	2602      	movs	r6, #2
 8001ada:	021b      	lsls	r3, r3, #8
 8001adc:	d500      	bpl.n	8001ae0 <__aeabi_dsub+0x2e0>
 8001ade:	e0c4      	b.n	8001c6a <__aeabi_dsub+0x46a>
 8001ae0:	3e01      	subs	r6, #1
 8001ae2:	0763      	lsls	r3, r4, #29
 8001ae4:	d000      	beq.n	8001ae8 <__aeabi_dsub+0x2e8>
 8001ae6:	e711      	b.n	800190c <__aeabi_dsub+0x10c>
 8001ae8:	4643      	mov	r3, r8
 8001aea:	46b4      	mov	ip, r6
 8001aec:	0759      	lsls	r1, r3, #29
 8001aee:	08e2      	lsrs	r2, r4, #3
 8001af0:	430a      	orrs	r2, r1
 8001af2:	08db      	lsrs	r3, r3, #3
 8001af4:	490f      	ldr	r1, [pc, #60]	; (8001b34 <__aeabi_dsub+0x334>)
 8001af6:	458c      	cmp	ip, r1
 8001af8:	d040      	beq.n	8001b7c <__aeabi_dsub+0x37c>
 8001afa:	4661      	mov	r1, ip
 8001afc:	031b      	lsls	r3, r3, #12
 8001afe:	0549      	lsls	r1, r1, #21
 8001b00:	0b1b      	lsrs	r3, r3, #12
 8001b02:	0d49      	lsrs	r1, r1, #21
 8001b04:	e720      	b.n	8001948 <__aeabi_dsub+0x148>
 8001b06:	4301      	orrs	r1, r0
 8001b08:	000c      	movs	r4, r1
 8001b0a:	1e61      	subs	r1, r4, #1
 8001b0c:	418c      	sbcs	r4, r1
 8001b0e:	444c      	add	r4, r9
 8001b10:	454c      	cmp	r4, r9
 8001b12:	4192      	sbcs	r2, r2
 8001b14:	4252      	negs	r2, r2
 8001b16:	4690      	mov	r8, r2
 8001b18:	4498      	add	r8, r3
 8001b1a:	4643      	mov	r3, r8
 8001b1c:	021b      	lsls	r3, r3, #8
 8001b1e:	d5e0      	bpl.n	8001ae2 <__aeabi_dsub+0x2e2>
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__aeabi_dsub+0x334>)
 8001b22:	3601      	adds	r6, #1
 8001b24:	429e      	cmp	r6, r3
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dsub+0x32a>
 8001b28:	e09f      	b.n	8001c6a <__aeabi_dsub+0x46a>
 8001b2a:	0031      	movs	r1, r6
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2200      	movs	r2, #0
 8001b30:	e70a      	b.n	8001948 <__aeabi_dsub+0x148>
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	000007ff 	.word	0x000007ff
 8001b38:	ff7fffff 	.word	0xff7fffff
 8001b3c:	fffff801 	.word	0xfffff801
 8001b40:	000007fe 	.word	0x000007fe
 8001b44:	2a00      	cmp	r2, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dsub+0x34a>
 8001b48:	e160      	b.n	8001e0c <__aeabi_dsub+0x60c>
 8001b4a:	000a      	movs	r2, r1
 8001b4c:	4302      	orrs	r2, r0
 8001b4e:	d04d      	beq.n	8001bec <__aeabi_dsub+0x3ec>
 8001b50:	464a      	mov	r2, r9
 8001b52:	075c      	lsls	r4, r3, #29
 8001b54:	08d2      	lsrs	r2, r2, #3
 8001b56:	4322      	orrs	r2, r4
 8001b58:	2480      	movs	r4, #128	; 0x80
 8001b5a:	08db      	lsrs	r3, r3, #3
 8001b5c:	0324      	lsls	r4, r4, #12
 8001b5e:	4223      	tst	r3, r4
 8001b60:	d007      	beq.n	8001b72 <__aeabi_dsub+0x372>
 8001b62:	08ce      	lsrs	r6, r1, #3
 8001b64:	4226      	tst	r6, r4
 8001b66:	d104      	bne.n	8001b72 <__aeabi_dsub+0x372>
 8001b68:	465d      	mov	r5, fp
 8001b6a:	0033      	movs	r3, r6
 8001b6c:	08c2      	lsrs	r2, r0, #3
 8001b6e:	0749      	lsls	r1, r1, #29
 8001b70:	430a      	orrs	r2, r1
 8001b72:	0f51      	lsrs	r1, r2, #29
 8001b74:	00d2      	lsls	r2, r2, #3
 8001b76:	08d2      	lsrs	r2, r2, #3
 8001b78:	0749      	lsls	r1, r1, #29
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	0011      	movs	r1, r2
 8001b7e:	4319      	orrs	r1, r3
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dsub+0x384>
 8001b82:	e1c8      	b.n	8001f16 <__aeabi_dsub+0x716>
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	0309      	lsls	r1, r1, #12
 8001b88:	430b      	orrs	r3, r1
 8001b8a:	031b      	lsls	r3, r3, #12
 8001b8c:	49d5      	ldr	r1, [pc, #852]	; (8001ee4 <__aeabi_dsub+0x6e4>)
 8001b8e:	0b1b      	lsrs	r3, r3, #12
 8001b90:	e6da      	b.n	8001948 <__aeabi_dsub+0x148>
 8001b92:	49d5      	ldr	r1, [pc, #852]	; (8001ee8 <__aeabi_dsub+0x6e8>)
 8001b94:	1ab6      	subs	r6, r6, r2
 8001b96:	400b      	ands	r3, r1
 8001b98:	4698      	mov	r8, r3
 8001b9a:	e6b5      	b.n	8001908 <__aeabi_dsub+0x108>
 8001b9c:	0020      	movs	r0, r4
 8001b9e:	f000 fa79 	bl	8002094 <__clzsi2>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	3218      	adds	r2, #24
 8001ba6:	2a1f      	cmp	r2, #31
 8001ba8:	dc00      	bgt.n	8001bac <__aeabi_dsub+0x3ac>
 8001baa:	e68f      	b.n	80018cc <__aeabi_dsub+0xcc>
 8001bac:	0023      	movs	r3, r4
 8001bae:	3808      	subs	r0, #8
 8001bb0:	4083      	lsls	r3, r0
 8001bb2:	2400      	movs	r4, #0
 8001bb4:	e692      	b.n	80018dc <__aeabi_dsub+0xdc>
 8001bb6:	4308      	orrs	r0, r1
 8001bb8:	0002      	movs	r2, r0
 8001bba:	1e50      	subs	r0, r2, #1
 8001bbc:	4182      	sbcs	r2, r0
 8001bbe:	e66d      	b.n	800189c <__aeabi_dsub+0x9c>
 8001bc0:	4cca      	ldr	r4, [pc, #808]	; (8001eec <__aeabi_dsub+0x6ec>)
 8001bc2:	1c72      	adds	r2, r6, #1
 8001bc4:	4222      	tst	r2, r4
 8001bc6:	d000      	beq.n	8001bca <__aeabi_dsub+0x3ca>
 8001bc8:	e0ad      	b.n	8001d26 <__aeabi_dsub+0x526>
 8001bca:	464a      	mov	r2, r9
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	2e00      	cmp	r6, #0
 8001bd0:	d1b8      	bne.n	8001b44 <__aeabi_dsub+0x344>
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x3d8>
 8001bd6:	e158      	b.n	8001e8a <__aeabi_dsub+0x68a>
 8001bd8:	000a      	movs	r2, r1
 8001bda:	4302      	orrs	r2, r0
 8001bdc:	d000      	beq.n	8001be0 <__aeabi_dsub+0x3e0>
 8001bde:	e159      	b.n	8001e94 <__aeabi_dsub+0x694>
 8001be0:	464a      	mov	r2, r9
 8001be2:	0759      	lsls	r1, r3, #29
 8001be4:	08d2      	lsrs	r2, r2, #3
 8001be6:	430a      	orrs	r2, r1
 8001be8:	08db      	lsrs	r3, r3, #3
 8001bea:	e786      	b.n	8001afa <__aeabi_dsub+0x2fa>
 8001bec:	464a      	mov	r2, r9
 8001bee:	0759      	lsls	r1, r3, #29
 8001bf0:	08d2      	lsrs	r2, r2, #3
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	e7c1      	b.n	8001b7c <__aeabi_dsub+0x37c>
 8001bf8:	4dba      	ldr	r5, [pc, #744]	; (8001ee4 <__aeabi_dsub+0x6e4>)
 8001bfa:	42aa      	cmp	r2, r5
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x400>
 8001bfe:	e11e      	b.n	8001e3e <__aeabi_dsub+0x63e>
 8001c00:	2580      	movs	r5, #128	; 0x80
 8001c02:	042d      	lsls	r5, r5, #16
 8001c04:	432b      	orrs	r3, r5
 8001c06:	4664      	mov	r4, ip
 8001c08:	2c38      	cmp	r4, #56	; 0x38
 8001c0a:	dc5d      	bgt.n	8001cc8 <__aeabi_dsub+0x4c8>
 8001c0c:	2c1f      	cmp	r4, #31
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_dsub+0x412>
 8001c10:	e0d0      	b.n	8001db4 <__aeabi_dsub+0x5b4>
 8001c12:	2520      	movs	r5, #32
 8001c14:	4667      	mov	r7, ip
 8001c16:	1b2d      	subs	r5, r5, r4
 8001c18:	464e      	mov	r6, r9
 8001c1a:	001c      	movs	r4, r3
 8001c1c:	40fe      	lsrs	r6, r7
 8001c1e:	40ac      	lsls	r4, r5
 8001c20:	4334      	orrs	r4, r6
 8001c22:	464e      	mov	r6, r9
 8001c24:	40ae      	lsls	r6, r5
 8001c26:	0035      	movs	r5, r6
 8001c28:	40fb      	lsrs	r3, r7
 8001c2a:	1e6e      	subs	r6, r5, #1
 8001c2c:	41b5      	sbcs	r5, r6
 8001c2e:	1ac9      	subs	r1, r1, r3
 8001c30:	432c      	orrs	r4, r5
 8001c32:	e04e      	b.n	8001cd2 <__aeabi_dsub+0x4d2>
 8001c34:	464a      	mov	r2, r9
 8001c36:	1a14      	subs	r4, r2, r0
 8001c38:	45a1      	cmp	r9, r4
 8001c3a:	4192      	sbcs	r2, r2
 8001c3c:	4252      	negs	r2, r2
 8001c3e:	4690      	mov	r8, r2
 8001c40:	1a5f      	subs	r7, r3, r1
 8001c42:	003a      	movs	r2, r7
 8001c44:	4647      	mov	r7, r8
 8001c46:	1bd2      	subs	r2, r2, r7
 8001c48:	4690      	mov	r8, r2
 8001c4a:	0212      	lsls	r2, r2, #8
 8001c4c:	d500      	bpl.n	8001c50 <__aeabi_dsub+0x450>
 8001c4e:	e08b      	b.n	8001d68 <__aeabi_dsub+0x568>
 8001c50:	4642      	mov	r2, r8
 8001c52:	4322      	orrs	r2, r4
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x458>
 8001c56:	e630      	b.n	80018ba <__aeabi_dsub+0xba>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2500      	movs	r5, #0
 8001c5c:	e74d      	b.n	8001afa <__aeabi_dsub+0x2fa>
 8001c5e:	464a      	mov	r2, r9
 8001c60:	0759      	lsls	r1, r3, #29
 8001c62:	08d2      	lsrs	r2, r2, #3
 8001c64:	430a      	orrs	r2, r1
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	e744      	b.n	8001af4 <__aeabi_dsub+0x2f4>
 8001c6a:	4642      	mov	r2, r8
 8001c6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ee8 <__aeabi_dsub+0x6e8>)
 8001c6e:	0861      	lsrs	r1, r4, #1
 8001c70:	401a      	ands	r2, r3
 8001c72:	0013      	movs	r3, r2
 8001c74:	2201      	movs	r2, #1
 8001c76:	4014      	ands	r4, r2
 8001c78:	430c      	orrs	r4, r1
 8001c7a:	07da      	lsls	r2, r3, #31
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	4698      	mov	r8, r3
 8001c80:	4314      	orrs	r4, r2
 8001c82:	e641      	b.n	8001908 <__aeabi_dsub+0x108>
 8001c84:	001a      	movs	r2, r3
 8001c86:	3e1f      	subs	r6, #31
 8001c88:	40f2      	lsrs	r2, r6
 8001c8a:	0016      	movs	r6, r2
 8001c8c:	2920      	cmp	r1, #32
 8001c8e:	d003      	beq.n	8001c98 <__aeabi_dsub+0x498>
 8001c90:	2240      	movs	r2, #64	; 0x40
 8001c92:	1a51      	subs	r1, r2, r1
 8001c94:	408b      	lsls	r3, r1
 8001c96:	431c      	orrs	r4, r3
 8001c98:	1e62      	subs	r2, r4, #1
 8001c9a:	4194      	sbcs	r4, r2
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	4334      	orrs	r4, r6
 8001ca0:	4698      	mov	r8, r3
 8001ca2:	2600      	movs	r6, #0
 8001ca4:	e71d      	b.n	8001ae2 <__aeabi_dsub+0x2e2>
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	3a20      	subs	r2, #32
 8001caa:	40d4      	lsrs	r4, r2
 8001cac:	0022      	movs	r2, r4
 8001cae:	4664      	mov	r4, ip
 8001cb0:	2c20      	cmp	r4, #32
 8001cb2:	d004      	beq.n	8001cbe <__aeabi_dsub+0x4be>
 8001cb4:	2740      	movs	r7, #64	; 0x40
 8001cb6:	1b3f      	subs	r7, r7, r4
 8001cb8:	40b9      	lsls	r1, r7
 8001cba:	4308      	orrs	r0, r1
 8001cbc:	4680      	mov	r8, r0
 8001cbe:	4644      	mov	r4, r8
 8001cc0:	1e61      	subs	r1, r4, #1
 8001cc2:	418c      	sbcs	r4, r1
 8001cc4:	4322      	orrs	r2, r4
 8001cc6:	e5e9      	b.n	800189c <__aeabi_dsub+0x9c>
 8001cc8:	464c      	mov	r4, r9
 8001cca:	4323      	orrs	r3, r4
 8001ccc:	001c      	movs	r4, r3
 8001cce:	1e63      	subs	r3, r4, #1
 8001cd0:	419c      	sbcs	r4, r3
 8001cd2:	1b04      	subs	r4, r0, r4
 8001cd4:	42a0      	cmp	r0, r4
 8001cd6:	419b      	sbcs	r3, r3
 8001cd8:	425b      	negs	r3, r3
 8001cda:	1acb      	subs	r3, r1, r3
 8001cdc:	4698      	mov	r8, r3
 8001cde:	465d      	mov	r5, fp
 8001ce0:	0016      	movs	r6, r2
 8001ce2:	e5e2      	b.n	80018aa <__aeabi_dsub+0xaa>
 8001ce4:	464e      	mov	r6, r9
 8001ce6:	431e      	orrs	r6, r3
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x4ec>
 8001cea:	e0ae      	b.n	8001e4a <__aeabi_dsub+0x64a>
 8001cec:	1e66      	subs	r6, r4, #1
 8001cee:	2c01      	cmp	r4, #1
 8001cf0:	d100      	bne.n	8001cf4 <__aeabi_dsub+0x4f4>
 8001cf2:	e0fd      	b.n	8001ef0 <__aeabi_dsub+0x6f0>
 8001cf4:	4f7b      	ldr	r7, [pc, #492]	; (8001ee4 <__aeabi_dsub+0x6e4>)
 8001cf6:	42bc      	cmp	r4, r7
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x4fc>
 8001cfa:	e107      	b.n	8001f0c <__aeabi_dsub+0x70c>
 8001cfc:	46b4      	mov	ip, r6
 8001cfe:	e69b      	b.n	8001a38 <__aeabi_dsub+0x238>
 8001d00:	4664      	mov	r4, ip
 8001d02:	2220      	movs	r2, #32
 8001d04:	1b12      	subs	r2, r2, r4
 8001d06:	000c      	movs	r4, r1
 8001d08:	4094      	lsls	r4, r2
 8001d0a:	0007      	movs	r7, r0
 8001d0c:	4090      	lsls	r0, r2
 8001d0e:	46a0      	mov	r8, r4
 8001d10:	4664      	mov	r4, ip
 8001d12:	1e42      	subs	r2, r0, #1
 8001d14:	4190      	sbcs	r0, r2
 8001d16:	4662      	mov	r2, ip
 8001d18:	40e7      	lsrs	r7, r4
 8001d1a:	4644      	mov	r4, r8
 8001d1c:	40d1      	lsrs	r1, r2
 8001d1e:	433c      	orrs	r4, r7
 8001d20:	4304      	orrs	r4, r0
 8001d22:	185b      	adds	r3, r3, r1
 8001d24:	e6f3      	b.n	8001b0e <__aeabi_dsub+0x30e>
 8001d26:	4c6f      	ldr	r4, [pc, #444]	; (8001ee4 <__aeabi_dsub+0x6e4>)
 8001d28:	42a2      	cmp	r2, r4
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x52e>
 8001d2c:	e0d5      	b.n	8001eda <__aeabi_dsub+0x6da>
 8001d2e:	4448      	add	r0, r9
 8001d30:	185b      	adds	r3, r3, r1
 8001d32:	4548      	cmp	r0, r9
 8001d34:	4189      	sbcs	r1, r1
 8001d36:	4249      	negs	r1, r1
 8001d38:	185b      	adds	r3, r3, r1
 8001d3a:	07dc      	lsls	r4, r3, #31
 8001d3c:	0840      	lsrs	r0, r0, #1
 8001d3e:	085b      	lsrs	r3, r3, #1
 8001d40:	4698      	mov	r8, r3
 8001d42:	0016      	movs	r6, r2
 8001d44:	4304      	orrs	r4, r0
 8001d46:	e6cc      	b.n	8001ae2 <__aeabi_dsub+0x2e2>
 8001d48:	2a00      	cmp	r2, #0
 8001d4a:	d000      	beq.n	8001d4e <__aeabi_dsub+0x54e>
 8001d4c:	e082      	b.n	8001e54 <__aeabi_dsub+0x654>
 8001d4e:	000a      	movs	r2, r1
 8001d50:	4302      	orrs	r2, r0
 8001d52:	d140      	bne.n	8001dd6 <__aeabi_dsub+0x5d6>
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	2500      	movs	r5, #0
 8001d58:	031b      	lsls	r3, r3, #12
 8001d5a:	e713      	b.n	8001b84 <__aeabi_dsub+0x384>
 8001d5c:	074b      	lsls	r3, r1, #29
 8001d5e:	08c2      	lsrs	r2, r0, #3
 8001d60:	431a      	orrs	r2, r3
 8001d62:	465d      	mov	r5, fp
 8001d64:	08cb      	lsrs	r3, r1, #3
 8001d66:	e6c5      	b.n	8001af4 <__aeabi_dsub+0x2f4>
 8001d68:	464a      	mov	r2, r9
 8001d6a:	1a84      	subs	r4, r0, r2
 8001d6c:	42a0      	cmp	r0, r4
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	1acb      	subs	r3, r1, r3
 8001d72:	4252      	negs	r2, r2
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	4698      	mov	r8, r3
 8001d78:	465d      	mov	r5, fp
 8001d7a:	e59e      	b.n	80018ba <__aeabi_dsub+0xba>
 8001d7c:	464a      	mov	r2, r9
 8001d7e:	0759      	lsls	r1, r3, #29
 8001d80:	08d2      	lsrs	r2, r2, #3
 8001d82:	430a      	orrs	r2, r1
 8001d84:	08db      	lsrs	r3, r3, #3
 8001d86:	e6f9      	b.n	8001b7c <__aeabi_dsub+0x37c>
 8001d88:	464a      	mov	r2, r9
 8001d8a:	1a14      	subs	r4, r2, r0
 8001d8c:	45a1      	cmp	r9, r4
 8001d8e:	4192      	sbcs	r2, r2
 8001d90:	1a5b      	subs	r3, r3, r1
 8001d92:	4252      	negs	r2, r2
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	4698      	mov	r8, r3
 8001d98:	2601      	movs	r6, #1
 8001d9a:	e586      	b.n	80018aa <__aeabi_dsub+0xaa>
 8001d9c:	464a      	mov	r2, r9
 8001d9e:	0759      	lsls	r1, r3, #29
 8001da0:	08d2      	lsrs	r2, r2, #3
 8001da2:	430a      	orrs	r2, r1
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	e6a5      	b.n	8001af4 <__aeabi_dsub+0x2f4>
 8001da8:	464c      	mov	r4, r9
 8001daa:	4323      	orrs	r3, r4
 8001dac:	001c      	movs	r4, r3
 8001dae:	1e63      	subs	r3, r4, #1
 8001db0:	419c      	sbcs	r4, r3
 8001db2:	e65b      	b.n	8001a6c <__aeabi_dsub+0x26c>
 8001db4:	4665      	mov	r5, ip
 8001db6:	001e      	movs	r6, r3
 8001db8:	3d20      	subs	r5, #32
 8001dba:	40ee      	lsrs	r6, r5
 8001dbc:	2c20      	cmp	r4, #32
 8001dbe:	d005      	beq.n	8001dcc <__aeabi_dsub+0x5cc>
 8001dc0:	2540      	movs	r5, #64	; 0x40
 8001dc2:	1b2d      	subs	r5, r5, r4
 8001dc4:	40ab      	lsls	r3, r5
 8001dc6:	464c      	mov	r4, r9
 8001dc8:	431c      	orrs	r4, r3
 8001dca:	46a2      	mov	sl, r4
 8001dcc:	4654      	mov	r4, sl
 8001dce:	1e63      	subs	r3, r4, #1
 8001dd0:	419c      	sbcs	r4, r3
 8001dd2:	4334      	orrs	r4, r6
 8001dd4:	e77d      	b.n	8001cd2 <__aeabi_dsub+0x4d2>
 8001dd6:	074b      	lsls	r3, r1, #29
 8001dd8:	08c2      	lsrs	r2, r0, #3
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	465d      	mov	r5, fp
 8001dde:	08cb      	lsrs	r3, r1, #3
 8001de0:	e6cc      	b.n	8001b7c <__aeabi_dsub+0x37c>
 8001de2:	000a      	movs	r2, r1
 8001de4:	4302      	orrs	r2, r0
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x5ea>
 8001de8:	e736      	b.n	8001c58 <__aeabi_dsub+0x458>
 8001dea:	074b      	lsls	r3, r1, #29
 8001dec:	08c2      	lsrs	r2, r0, #3
 8001dee:	431a      	orrs	r2, r3
 8001df0:	465d      	mov	r5, fp
 8001df2:	08cb      	lsrs	r3, r1, #3
 8001df4:	e681      	b.n	8001afa <__aeabi_dsub+0x2fa>
 8001df6:	464a      	mov	r2, r9
 8001df8:	1a84      	subs	r4, r0, r2
 8001dfa:	42a0      	cmp	r0, r4
 8001dfc:	4192      	sbcs	r2, r2
 8001dfe:	1acb      	subs	r3, r1, r3
 8001e00:	4252      	negs	r2, r2
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	4698      	mov	r8, r3
 8001e06:	465d      	mov	r5, fp
 8001e08:	2601      	movs	r6, #1
 8001e0a:	e54e      	b.n	80018aa <__aeabi_dsub+0xaa>
 8001e0c:	074b      	lsls	r3, r1, #29
 8001e0e:	08c2      	lsrs	r2, r0, #3
 8001e10:	431a      	orrs	r2, r3
 8001e12:	08cb      	lsrs	r3, r1, #3
 8001e14:	e6b2      	b.n	8001b7c <__aeabi_dsub+0x37c>
 8001e16:	464a      	mov	r2, r9
 8001e18:	1a14      	subs	r4, r2, r0
 8001e1a:	45a1      	cmp	r9, r4
 8001e1c:	4192      	sbcs	r2, r2
 8001e1e:	1a5f      	subs	r7, r3, r1
 8001e20:	4252      	negs	r2, r2
 8001e22:	1aba      	subs	r2, r7, r2
 8001e24:	4690      	mov	r8, r2
 8001e26:	0212      	lsls	r2, r2, #8
 8001e28:	d56b      	bpl.n	8001f02 <__aeabi_dsub+0x702>
 8001e2a:	464a      	mov	r2, r9
 8001e2c:	1a84      	subs	r4, r0, r2
 8001e2e:	42a0      	cmp	r0, r4
 8001e30:	4192      	sbcs	r2, r2
 8001e32:	1acb      	subs	r3, r1, r3
 8001e34:	4252      	negs	r2, r2
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	4698      	mov	r8, r3
 8001e3a:	465d      	mov	r5, fp
 8001e3c:	e564      	b.n	8001908 <__aeabi_dsub+0x108>
 8001e3e:	074b      	lsls	r3, r1, #29
 8001e40:	08c2      	lsrs	r2, r0, #3
 8001e42:	431a      	orrs	r2, r3
 8001e44:	465d      	mov	r5, fp
 8001e46:	08cb      	lsrs	r3, r1, #3
 8001e48:	e698      	b.n	8001b7c <__aeabi_dsub+0x37c>
 8001e4a:	074b      	lsls	r3, r1, #29
 8001e4c:	08c2      	lsrs	r2, r0, #3
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	08cb      	lsrs	r3, r1, #3
 8001e52:	e64f      	b.n	8001af4 <__aeabi_dsub+0x2f4>
 8001e54:	000a      	movs	r2, r1
 8001e56:	4302      	orrs	r2, r0
 8001e58:	d090      	beq.n	8001d7c <__aeabi_dsub+0x57c>
 8001e5a:	464a      	mov	r2, r9
 8001e5c:	075c      	lsls	r4, r3, #29
 8001e5e:	08d2      	lsrs	r2, r2, #3
 8001e60:	4314      	orrs	r4, r2
 8001e62:	2280      	movs	r2, #128	; 0x80
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	0312      	lsls	r2, r2, #12
 8001e68:	4213      	tst	r3, r2
 8001e6a:	d008      	beq.n	8001e7e <__aeabi_dsub+0x67e>
 8001e6c:	08ce      	lsrs	r6, r1, #3
 8001e6e:	4216      	tst	r6, r2
 8001e70:	d105      	bne.n	8001e7e <__aeabi_dsub+0x67e>
 8001e72:	08c0      	lsrs	r0, r0, #3
 8001e74:	0749      	lsls	r1, r1, #29
 8001e76:	4308      	orrs	r0, r1
 8001e78:	0004      	movs	r4, r0
 8001e7a:	465d      	mov	r5, fp
 8001e7c:	0033      	movs	r3, r6
 8001e7e:	0f61      	lsrs	r1, r4, #29
 8001e80:	00e2      	lsls	r2, r4, #3
 8001e82:	0749      	lsls	r1, r1, #29
 8001e84:	08d2      	lsrs	r2, r2, #3
 8001e86:	430a      	orrs	r2, r1
 8001e88:	e678      	b.n	8001b7c <__aeabi_dsub+0x37c>
 8001e8a:	074b      	lsls	r3, r1, #29
 8001e8c:	08c2      	lsrs	r2, r0, #3
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	08cb      	lsrs	r3, r1, #3
 8001e92:	e632      	b.n	8001afa <__aeabi_dsub+0x2fa>
 8001e94:	4448      	add	r0, r9
 8001e96:	185b      	adds	r3, r3, r1
 8001e98:	4548      	cmp	r0, r9
 8001e9a:	4192      	sbcs	r2, r2
 8001e9c:	4698      	mov	r8, r3
 8001e9e:	4252      	negs	r2, r2
 8001ea0:	4490      	add	r8, r2
 8001ea2:	4643      	mov	r3, r8
 8001ea4:	0004      	movs	r4, r0
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	d400      	bmi.n	8001eac <__aeabi_dsub+0x6ac>
 8001eaa:	e61a      	b.n	8001ae2 <__aeabi_dsub+0x2e2>
 8001eac:	4642      	mov	r2, r8
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <__aeabi_dsub+0x6e8>)
 8001eb0:	2601      	movs	r6, #1
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	4690      	mov	r8, r2
 8001eb6:	e614      	b.n	8001ae2 <__aeabi_dsub+0x2e2>
 8001eb8:	4666      	mov	r6, ip
 8001eba:	001f      	movs	r7, r3
 8001ebc:	3e20      	subs	r6, #32
 8001ebe:	40f7      	lsrs	r7, r6
 8001ec0:	2c20      	cmp	r4, #32
 8001ec2:	d005      	beq.n	8001ed0 <__aeabi_dsub+0x6d0>
 8001ec4:	2640      	movs	r6, #64	; 0x40
 8001ec6:	1b36      	subs	r6, r6, r4
 8001ec8:	40b3      	lsls	r3, r6
 8001eca:	464c      	mov	r4, r9
 8001ecc:	431c      	orrs	r4, r3
 8001ece:	46a2      	mov	sl, r4
 8001ed0:	4654      	mov	r4, sl
 8001ed2:	1e63      	subs	r3, r4, #1
 8001ed4:	419c      	sbcs	r4, r3
 8001ed6:	433c      	orrs	r4, r7
 8001ed8:	e5c8      	b.n	8001a6c <__aeabi_dsub+0x26c>
 8001eda:	0011      	movs	r1, r2
 8001edc:	2300      	movs	r3, #0
 8001ede:	2200      	movs	r2, #0
 8001ee0:	e532      	b.n	8001948 <__aeabi_dsub+0x148>
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	000007ff 	.word	0x000007ff
 8001ee8:	ff7fffff 	.word	0xff7fffff
 8001eec:	000007fe 	.word	0x000007fe
 8001ef0:	464a      	mov	r2, r9
 8001ef2:	1814      	adds	r4, r2, r0
 8001ef4:	4284      	cmp	r4, r0
 8001ef6:	4192      	sbcs	r2, r2
 8001ef8:	185b      	adds	r3, r3, r1
 8001efa:	4698      	mov	r8, r3
 8001efc:	4252      	negs	r2, r2
 8001efe:	4490      	add	r8, r2
 8001f00:	e5e9      	b.n	8001ad6 <__aeabi_dsub+0x2d6>
 8001f02:	4642      	mov	r2, r8
 8001f04:	4322      	orrs	r2, r4
 8001f06:	d100      	bne.n	8001f0a <__aeabi_dsub+0x70a>
 8001f08:	e6a6      	b.n	8001c58 <__aeabi_dsub+0x458>
 8001f0a:	e5ea      	b.n	8001ae2 <__aeabi_dsub+0x2e2>
 8001f0c:	074b      	lsls	r3, r1, #29
 8001f0e:	08c2      	lsrs	r2, r0, #3
 8001f10:	431a      	orrs	r2, r3
 8001f12:	08cb      	lsrs	r3, r1, #3
 8001f14:	e632      	b.n	8001b7c <__aeabi_dsub+0x37c>
 8001f16:	2200      	movs	r2, #0
 8001f18:	4901      	ldr	r1, [pc, #4]	; (8001f20 <__aeabi_dsub+0x720>)
 8001f1a:	0013      	movs	r3, r2
 8001f1c:	e514      	b.n	8001948 <__aeabi_dsub+0x148>
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	000007ff 	.word	0x000007ff

08001f24 <__aeabi_i2d>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	2800      	cmp	r0, #0
 8001f28:	d016      	beq.n	8001f58 <__aeabi_i2d+0x34>
 8001f2a:	17c3      	asrs	r3, r0, #31
 8001f2c:	18c5      	adds	r5, r0, r3
 8001f2e:	405d      	eors	r5, r3
 8001f30:	0fc4      	lsrs	r4, r0, #31
 8001f32:	0028      	movs	r0, r5
 8001f34:	f000 f8ae 	bl	8002094 <__clzsi2>
 8001f38:	4a11      	ldr	r2, [pc, #68]	; (8001f80 <__aeabi_i2d+0x5c>)
 8001f3a:	1a12      	subs	r2, r2, r0
 8001f3c:	280a      	cmp	r0, #10
 8001f3e:	dc16      	bgt.n	8001f6e <__aeabi_i2d+0x4a>
 8001f40:	0003      	movs	r3, r0
 8001f42:	002e      	movs	r6, r5
 8001f44:	3315      	adds	r3, #21
 8001f46:	409e      	lsls	r6, r3
 8001f48:	230b      	movs	r3, #11
 8001f4a:	1a18      	subs	r0, r3, r0
 8001f4c:	40c5      	lsrs	r5, r0
 8001f4e:	0553      	lsls	r3, r2, #21
 8001f50:	032d      	lsls	r5, r5, #12
 8001f52:	0b2d      	lsrs	r5, r5, #12
 8001f54:	0d5b      	lsrs	r3, r3, #21
 8001f56:	e003      	b.n	8001f60 <__aeabi_i2d+0x3c>
 8001f58:	2400      	movs	r4, #0
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2500      	movs	r5, #0
 8001f5e:	2600      	movs	r6, #0
 8001f60:	051b      	lsls	r3, r3, #20
 8001f62:	432b      	orrs	r3, r5
 8001f64:	07e4      	lsls	r4, r4, #31
 8001f66:	4323      	orrs	r3, r4
 8001f68:	0030      	movs	r0, r6
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	bd70      	pop	{r4, r5, r6, pc}
 8001f6e:	380b      	subs	r0, #11
 8001f70:	4085      	lsls	r5, r0
 8001f72:	0553      	lsls	r3, r2, #21
 8001f74:	032d      	lsls	r5, r5, #12
 8001f76:	2600      	movs	r6, #0
 8001f78:	0b2d      	lsrs	r5, r5, #12
 8001f7a:	0d5b      	lsrs	r3, r3, #21
 8001f7c:	e7f0      	b.n	8001f60 <__aeabi_i2d+0x3c>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	0000041e 	.word	0x0000041e

08001f84 <__aeabi_d2f>:
 8001f84:	0002      	movs	r2, r0
 8001f86:	004b      	lsls	r3, r1, #1
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	0308      	lsls	r0, r1, #12
 8001f8c:	0d5b      	lsrs	r3, r3, #21
 8001f8e:	4e3d      	ldr	r6, [pc, #244]	; (8002084 <__aeabi_d2f+0x100>)
 8001f90:	0fcc      	lsrs	r4, r1, #31
 8001f92:	0a40      	lsrs	r0, r0, #9
 8001f94:	0f51      	lsrs	r1, r2, #29
 8001f96:	1c5f      	adds	r7, r3, #1
 8001f98:	4308      	orrs	r0, r1
 8001f9a:	00d5      	lsls	r5, r2, #3
 8001f9c:	4237      	tst	r7, r6
 8001f9e:	d00a      	beq.n	8001fb6 <__aeabi_d2f+0x32>
 8001fa0:	4939      	ldr	r1, [pc, #228]	; (8002088 <__aeabi_d2f+0x104>)
 8001fa2:	185e      	adds	r6, r3, r1
 8001fa4:	2efe      	cmp	r6, #254	; 0xfe
 8001fa6:	dd16      	ble.n	8001fd6 <__aeabi_d2f+0x52>
 8001fa8:	23ff      	movs	r3, #255	; 0xff
 8001faa:	2100      	movs	r1, #0
 8001fac:	05db      	lsls	r3, r3, #23
 8001fae:	430b      	orrs	r3, r1
 8001fb0:	07e0      	lsls	r0, r4, #31
 8001fb2:	4318      	orrs	r0, r3
 8001fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <__aeabi_d2f+0x44>
 8001fba:	4328      	orrs	r0, r5
 8001fbc:	d027      	beq.n	800200e <__aeabi_d2f+0x8a>
 8001fbe:	2105      	movs	r1, #5
 8001fc0:	0189      	lsls	r1, r1, #6
 8001fc2:	0a49      	lsrs	r1, r1, #9
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	e7f1      	b.n	8001fac <__aeabi_d2f+0x28>
 8001fc8:	4305      	orrs	r5, r0
 8001fca:	d0ed      	beq.n	8001fa8 <__aeabi_d2f+0x24>
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	03c9      	lsls	r1, r1, #15
 8001fd0:	23ff      	movs	r3, #255	; 0xff
 8001fd2:	4301      	orrs	r1, r0
 8001fd4:	e7ea      	b.n	8001fac <__aeabi_d2f+0x28>
 8001fd6:	2e00      	cmp	r6, #0
 8001fd8:	dd1c      	ble.n	8002014 <__aeabi_d2f+0x90>
 8001fda:	0192      	lsls	r2, r2, #6
 8001fdc:	0011      	movs	r1, r2
 8001fde:	1e4a      	subs	r2, r1, #1
 8001fe0:	4191      	sbcs	r1, r2
 8001fe2:	00c0      	lsls	r0, r0, #3
 8001fe4:	0f6d      	lsrs	r5, r5, #29
 8001fe6:	4301      	orrs	r1, r0
 8001fe8:	4329      	orrs	r1, r5
 8001fea:	074b      	lsls	r3, r1, #29
 8001fec:	d048      	beq.n	8002080 <__aeabi_d2f+0xfc>
 8001fee:	230f      	movs	r3, #15
 8001ff0:	400b      	ands	r3, r1
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d000      	beq.n	8001ff8 <__aeabi_d2f+0x74>
 8001ff6:	3104      	adds	r1, #4
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	04db      	lsls	r3, r3, #19
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	d03f      	beq.n	8002080 <__aeabi_d2f+0xfc>
 8002000:	1c72      	adds	r2, r6, #1
 8002002:	2efe      	cmp	r6, #254	; 0xfe
 8002004:	d0d0      	beq.n	8001fa8 <__aeabi_d2f+0x24>
 8002006:	0189      	lsls	r1, r1, #6
 8002008:	0a49      	lsrs	r1, r1, #9
 800200a:	b2d3      	uxtb	r3, r2
 800200c:	e7ce      	b.n	8001fac <__aeabi_d2f+0x28>
 800200e:	2300      	movs	r3, #0
 8002010:	2100      	movs	r1, #0
 8002012:	e7cb      	b.n	8001fac <__aeabi_d2f+0x28>
 8002014:	0032      	movs	r2, r6
 8002016:	3217      	adds	r2, #23
 8002018:	db22      	blt.n	8002060 <__aeabi_d2f+0xdc>
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	221e      	movs	r2, #30
 800201e:	0409      	lsls	r1, r1, #16
 8002020:	4308      	orrs	r0, r1
 8002022:	1b92      	subs	r2, r2, r6
 8002024:	2a1f      	cmp	r2, #31
 8002026:	dd1d      	ble.n	8002064 <__aeabi_d2f+0xe0>
 8002028:	2102      	movs	r1, #2
 800202a:	4249      	negs	r1, r1
 800202c:	1b8e      	subs	r6, r1, r6
 800202e:	0001      	movs	r1, r0
 8002030:	40f1      	lsrs	r1, r6
 8002032:	000e      	movs	r6, r1
 8002034:	2a20      	cmp	r2, #32
 8002036:	d004      	beq.n	8002042 <__aeabi_d2f+0xbe>
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <__aeabi_d2f+0x108>)
 800203a:	4694      	mov	ip, r2
 800203c:	4463      	add	r3, ip
 800203e:	4098      	lsls	r0, r3
 8002040:	4305      	orrs	r5, r0
 8002042:	0029      	movs	r1, r5
 8002044:	1e4d      	subs	r5, r1, #1
 8002046:	41a9      	sbcs	r1, r5
 8002048:	4331      	orrs	r1, r6
 800204a:	2600      	movs	r6, #0
 800204c:	074b      	lsls	r3, r1, #29
 800204e:	d1ce      	bne.n	8001fee <__aeabi_d2f+0x6a>
 8002050:	2080      	movs	r0, #128	; 0x80
 8002052:	000b      	movs	r3, r1
 8002054:	04c0      	lsls	r0, r0, #19
 8002056:	2201      	movs	r2, #1
 8002058:	4003      	ands	r3, r0
 800205a:	4201      	tst	r1, r0
 800205c:	d1d3      	bne.n	8002006 <__aeabi_d2f+0x82>
 800205e:	e7af      	b.n	8001fc0 <__aeabi_d2f+0x3c>
 8002060:	2300      	movs	r3, #0
 8002062:	e7ac      	b.n	8001fbe <__aeabi_d2f+0x3a>
 8002064:	490a      	ldr	r1, [pc, #40]	; (8002090 <__aeabi_d2f+0x10c>)
 8002066:	468c      	mov	ip, r1
 8002068:	0029      	movs	r1, r5
 800206a:	4463      	add	r3, ip
 800206c:	40d1      	lsrs	r1, r2
 800206e:	409d      	lsls	r5, r3
 8002070:	000a      	movs	r2, r1
 8002072:	0029      	movs	r1, r5
 8002074:	4098      	lsls	r0, r3
 8002076:	1e4d      	subs	r5, r1, #1
 8002078:	41a9      	sbcs	r1, r5
 800207a:	4301      	orrs	r1, r0
 800207c:	4311      	orrs	r1, r2
 800207e:	e7e4      	b.n	800204a <__aeabi_d2f+0xc6>
 8002080:	0033      	movs	r3, r6
 8002082:	e79d      	b.n	8001fc0 <__aeabi_d2f+0x3c>
 8002084:	000007fe 	.word	0x000007fe
 8002088:	fffffc80 	.word	0xfffffc80
 800208c:	fffffca2 	.word	0xfffffca2
 8002090:	fffffc82 	.word	0xfffffc82

08002094 <__clzsi2>:
 8002094:	211c      	movs	r1, #28
 8002096:	2301      	movs	r3, #1
 8002098:	041b      	lsls	r3, r3, #16
 800209a:	4298      	cmp	r0, r3
 800209c:	d301      	bcc.n	80020a2 <__clzsi2+0xe>
 800209e:	0c00      	lsrs	r0, r0, #16
 80020a0:	3910      	subs	r1, #16
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	4298      	cmp	r0, r3
 80020a6:	d301      	bcc.n	80020ac <__clzsi2+0x18>
 80020a8:	0a00      	lsrs	r0, r0, #8
 80020aa:	3908      	subs	r1, #8
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	4298      	cmp	r0, r3
 80020b0:	d301      	bcc.n	80020b6 <__clzsi2+0x22>
 80020b2:	0900      	lsrs	r0, r0, #4
 80020b4:	3904      	subs	r1, #4
 80020b6:	a202      	add	r2, pc, #8	; (adr r2, 80020c0 <__clzsi2+0x2c>)
 80020b8:	5c10      	ldrb	r0, [r2, r0]
 80020ba:	1840      	adds	r0, r0, r1
 80020bc:	4770      	bx	lr
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	02020304 	.word	0x02020304
 80020c4:	01010101 	.word	0x01010101
	...

080020d0 <debugPrint>:
// Sensor readings
float temperature=0;
float humidity=0;

// Sends data to the UART, which is connected to USB. It is set up for 115200bps in this program.
void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7fe f80f 	bl	8000100 <strlen>
 80020e2:	0003      	movs	r3, r0
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	230a      	movs	r3, #10
 80020ec:	f003 fcba 	bl	8005a64 <HAL_UART_Transmit>
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <debugPrintln>:

// As above, but also sends a CRLF after the text
void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
 HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	0018      	movs	r0, r3
 8002106:	f7fd fffb 	bl	8000100 <strlen>
 800210a:	0003      	movs	r3, r0
 800210c:	b29a      	uxth	r2, r3
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	230a      	movs	r3, #10
 8002114:	f003 fca6 	bl	8005a64 <HAL_UART_Transmit>
 char newline[2] = "\r\n";
 8002118:	210c      	movs	r1, #12
 800211a:	187b      	adds	r3, r7, r1
 800211c:	4a05      	ldr	r2, [pc, #20]	; (8002134 <debugPrintln+0x3c>)
 800211e:	801a      	strh	r2, [r3, #0]
 HAL_UART_Transmit(huart, (uint8_t *) newline, 2, 10);
 8002120:	1879      	adds	r1, r7, r1
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	230a      	movs	r3, #10
 8002126:	2202      	movs	r2, #2
 8002128:	f003 fc9c 	bl	8005a64 <HAL_UART_Transmit>
}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	b004      	add	sp, #16
 8002132:	bd80      	pop	{r7, pc}
 8002134:	00000a0d 	.word	0x00000a0d

08002138 <HAL_TIM_PeriodElapsedCallback>:


// Interrupt called at 10Khz, mostlu used for PWM, and also increments I_tocks at ~100hz
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	if(++I_ticker==101){
 8002140:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	3301      	adds	r3, #1
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4a54      	ldr	r2, [pc, #336]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800214c:	1c19      	adds	r1, r3, #0
 800214e:	7011      	strb	r1, [r2, #0]
 8002150:	2b65      	cmp	r3, #101	; 0x65
 8002152:	d109      	bne.n	8002168 <HAL_TIM_PeriodElapsedCallback+0x30>
		I_ticker=0;
 8002154:	4b51      	ldr	r3, [pc, #324]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
		++I_tocks;
 800215a:	4b51      	ldr	r3, [pc, #324]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b4e      	ldr	r3, [pc, #312]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002166:	701a      	strb	r2, [r3, #0]
	}
	volatile uint8_t x=0;
 8002168:	210f      	movs	r1, #15
 800216a:	187b      	adds	r3, r7, r1
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
	if(ledLevel[0]>I_ticker) x=1;
 8002170:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b25b      	sxtb	r3, r3
 8002176:	001a      	movs	r2, r3
 8002178:	4b48      	ldr	r3, [pc, #288]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	429a      	cmp	r2, r3
 8002180:	dd02      	ble.n	8002188 <HAL_TIM_PeriodElapsedCallback+0x50>
 8002182:	187b      	adds	r3, r7, r1
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
	if(ledLevel[1]>I_ticker) x|=(1<<1);
 8002188:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	b25b      	sxtb	r3, r3
 800218e:	001a      	movs	r2, r3
 8002190:	4b42      	ldr	r3, [pc, #264]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	429a      	cmp	r2, r3
 8002198:	dd08      	ble.n	80021ac <HAL_TIM_PeriodElapsedCallback+0x74>
 800219a:	210f      	movs	r1, #15
 800219c:	187b      	adds	r3, r7, r1
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2202      	movs	r2, #2
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	701a      	strb	r2, [r3, #0]
	if(ledLevel[2]>I_ticker) x|=(1<<2);
 80021ac:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80021ae:	789b      	ldrb	r3, [r3, #2]
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	001a      	movs	r2, r3
 80021b4:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	429a      	cmp	r2, r3
 80021bc:	dd08      	ble.n	80021d0 <HAL_TIM_PeriodElapsedCallback+0x98>
 80021be:	210f      	movs	r1, #15
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2204      	movs	r2, #4
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	701a      	strb	r2, [r3, #0]
	if(ledLevel[3]>I_ticker) x|=(1<<3);
 80021d0:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80021d2:	78db      	ldrb	r3, [r3, #3]
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	001a      	movs	r2, r3
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	429a      	cmp	r2, r3
 80021e0:	dd08      	ble.n	80021f4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 80021e2:	210f      	movs	r1, #15
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2208      	movs	r2, #8
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	701a      	strb	r2, [r3, #0]
	if(ledLevel[4]>I_ticker) x|=(1<<4);
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80021f6:	791b      	ldrb	r3, [r3, #4]
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	001a      	movs	r2, r3
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	429a      	cmp	r2, r3
 8002204:	dd08      	ble.n	8002218 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8002206:	210f      	movs	r1, #15
 8002208:	187b      	adds	r3, r7, r1
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2210      	movs	r2, #16
 8002210:	4313      	orrs	r3, r2
 8002212:	b2da      	uxtb	r2, r3
 8002214:	187b      	adds	r3, r7, r1
 8002216:	701a      	strb	r2, [r3, #0]
	if(ledLevel[5]>I_ticker) x|=(1<<5);
 8002218:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800221a:	795b      	ldrb	r3, [r3, #5]
 800221c:	b25b      	sxtb	r3, r3
 800221e:	001a      	movs	r2, r3
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	429a      	cmp	r2, r3
 8002228:	dd08      	ble.n	800223c <HAL_TIM_PeriodElapsedCallback+0x104>
 800222a:	210f      	movs	r1, #15
 800222c:	187b      	adds	r3, r7, r1
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2220      	movs	r2, #32
 8002234:	4313      	orrs	r3, r2
 8002236:	b2da      	uxtb	r2, r3
 8002238:	187b      	adds	r3, r7, r1
 800223a:	701a      	strb	r2, [r3, #0]
	if(ledLevel[6]>I_ticker) x|=(1<<6);
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800223e:	799b      	ldrb	r3, [r3, #6]
 8002240:	b25b      	sxtb	r3, r3
 8002242:	001a      	movs	r2, r3
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	429a      	cmp	r2, r3
 800224c:	dd08      	ble.n	8002260 <HAL_TIM_PeriodElapsedCallback+0x128>
 800224e:	210f      	movs	r1, #15
 8002250:	187b      	adds	r3, r7, r1
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2240      	movs	r2, #64	; 0x40
 8002258:	4313      	orrs	r3, r2
 800225a:	b2da      	uxtb	r2, r3
 800225c:	187b      	adds	r3, r7, r1
 800225e:	701a      	strb	r2, [r3, #0]
	if(ledLevel[7]>I_ticker) x|=(1<<7);
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002262:	79db      	ldrb	r3, [r3, #7]
 8002264:	b25b      	sxtb	r3, r3
 8002266:	001a      	movs	r2, r3
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	429a      	cmp	r2, r3
 8002270:	dd09      	ble.n	8002286 <HAL_TIM_PeriodElapsedCallback+0x14e>
 8002272:	210f      	movs	r1, #15
 8002274:	187b      	adds	r3, r7, r1
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	4252      	negs	r2, r2
 800227e:	4313      	orrs	r3, r2
 8002280:	b2da      	uxtb	r2, r3
 8002282:	187b      	adds	r3, r7, r1
 8002284:	701a      	strb	r2, [r3, #0]
	GPIOA->ODR=x;
 8002286:	230f      	movs	r3, #15
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	23a0      	movs	r3, #160	; 0xa0
 8002290:	05db      	lsls	r3, r3, #23
 8002292:	615a      	str	r2, [r3, #20]
}
 8002294:	46c0      	nop			; (mov r8, r8)
 8002296:	46bd      	mov	sp, r7
 8002298:	b004      	add	sp, #16
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200000a0 	.word	0x200000a0
 80022a0:	200000a1 	.word	0x200000a1
 80022a4:	20000000 	.word	0x20000000

080022a8 <doLoop>:

void doLoop(){
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022aa:	46ce      	mov	lr, r9
 80022ac:	4647      	mov	r7, r8
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b08f      	sub	sp, #60	; 0x3c
 80022b2:	af06      	add	r7, sp, #24
	if(I_tocks){
 80022b4:	4b89      	ldr	r3, [pc, #548]	; (80024dc <doLoop+0x234>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d100      	bne.n	80022c0 <doLoop+0x18>
 80022be:	e106      	b.n	80024ce <doLoop+0x226>
		I_tocks=0;
 80022c0:	4b86      	ldr	r3, [pc, #536]	; (80024dc <doLoop+0x234>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
		// Update the LED brightnesses at 100hz
		for(uint8_t n=0;n<8;n++){
 80022c6:	231f      	movs	r3, #31
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
 80022ce:	e02f      	b.n	8002330 <doLoop+0x88>
			ledLevel[n]+=ledDir[n];
 80022d0:	201f      	movs	r0, #31
 80022d2:	183b      	adds	r3, r7, r0
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4a82      	ldr	r2, [pc, #520]	; (80024e0 <doLoop+0x238>)
 80022d8:	56d3      	ldrsb	r3, [r2, r3]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	183b      	adds	r3, r7, r0
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4980      	ldr	r1, [pc, #512]	; (80024e4 <doLoop+0x23c>)
 80022e2:	56cb      	ldrsb	r3, [r1, r3]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	18d3      	adds	r3, r2, r3
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	183b      	adds	r3, r7, r0
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b251      	sxtb	r1, r2
 80022f0:	4a7b      	ldr	r2, [pc, #492]	; (80024e0 <doLoop+0x238>)
 80022f2:	54d1      	strb	r1, [r2, r3]
			if(ledLevel[n]==100){
 80022f4:	183b      	adds	r3, r7, r0
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4a79      	ldr	r2, [pc, #484]	; (80024e0 <doLoop+0x238>)
 80022fa:	56d3      	ldrsb	r3, [r2, r3]
 80022fc:	2b64      	cmp	r3, #100	; 0x64
 80022fe:	d105      	bne.n	800230c <doLoop+0x64>
				ledDir[n]=-1;
 8002300:	183b      	adds	r3, r7, r0
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4a77      	ldr	r2, [pc, #476]	; (80024e4 <doLoop+0x23c>)
 8002306:	21ff      	movs	r1, #255	; 0xff
 8002308:	54d1      	strb	r1, [r2, r3]
 800230a:	e00b      	b.n	8002324 <doLoop+0x7c>
			}else if(ledLevel[n]==0){
 800230c:	211f      	movs	r1, #31
 800230e:	187b      	adds	r3, r7, r1
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4a73      	ldr	r2, [pc, #460]	; (80024e0 <doLoop+0x238>)
 8002314:	56d3      	ldrsb	r3, [r2, r3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d104      	bne.n	8002324 <doLoop+0x7c>
				ledDir[n]=1;
 800231a:	187b      	adds	r3, r7, r1
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	4a71      	ldr	r2, [pc, #452]	; (80024e4 <doLoop+0x23c>)
 8002320:	2101      	movs	r1, #1
 8002322:	54d1      	strb	r1, [r2, r3]
		for(uint8_t n=0;n<8;n++){
 8002324:	211f      	movs	r1, #31
 8002326:	187b      	adds	r3, r7, r1
 8002328:	781a      	ldrb	r2, [r3, #0]
 800232a:	187b      	adds	r3, r7, r1
 800232c:	3201      	adds	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	231f      	movs	r3, #31
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b07      	cmp	r3, #7
 8002338:	d9ca      	bls.n	80022d0 <doLoop+0x28>
			}
		}

		// Show the date/time and button states around every second
		if(++pTmr==100){
 800233a:	4b6b      	ldr	r3, [pc, #428]	; (80024e8 <doLoop+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	4b69      	ldr	r3, [pc, #420]	; (80024e8 <doLoop+0x240>)
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	4b68      	ldr	r3, [pc, #416]	; (80024e8 <doLoop+0x240>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b64      	cmp	r3, #100	; 0x64
 800234a:	d000      	beq.n	800234e <doLoop+0xa6>
 800234c:	e0bf      	b.n	80024ce <doLoop+0x226>
			uint32_t buts = GPIOC->IDR;
 800234e:	4b67      	ldr	r3, [pc, #412]	; (80024ec <doLoop+0x244>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	61bb      	str	r3, [r7, #24]
			HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);//Get time
 8002354:	4966      	ldr	r1, [pc, #408]	; (80024f0 <doLoop+0x248>)
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <doLoop+0x24c>)
 8002358:	2200      	movs	r2, #0
 800235a:	0018      	movs	r0, r3
 800235c:	f002 fe80 	bl	8005060 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);//get date
 8002360:	4965      	ldr	r1, [pc, #404]	; (80024f8 <doLoop+0x250>)
 8002362:	4b64      	ldr	r3, [pc, #400]	; (80024f4 <doLoop+0x24c>)
 8002364:	2200      	movs	r2, #0
 8002366:	0018      	movs	r0, r3
 8002368:	f002 ff68 	bl	800523c <HAL_RTC_GetDate>
			sprintf(
				s,
				"%02d/%02d/20%02d %02d:%02d:%02d : %s %s : ",
				rtcDate.Date,rtcDate.Month,rtcDate.Year,
 800236c:	4b62      	ldr	r3, [pc, #392]	; (80024f8 <doLoop+0x250>)
 800236e:	789b      	ldrb	r3, [r3, #2]
			sprintf(
 8002370:	4698      	mov	r8, r3
				rtcDate.Date,rtcDate.Month,rtcDate.Year,
 8002372:	4b61      	ldr	r3, [pc, #388]	; (80024f8 <doLoop+0x250>)
 8002374:	785b      	ldrb	r3, [r3, #1]
			sprintf(
 8002376:	4699      	mov	r9, r3
				rtcDate.Date,rtcDate.Month,rtcDate.Year,
 8002378:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <doLoop+0x250>)
 800237a:	78db      	ldrb	r3, [r3, #3]
			sprintf(
 800237c:	001c      	movs	r4, r3
				rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds,
 800237e:	4b5c      	ldr	r3, [pc, #368]	; (80024f0 <doLoop+0x248>)
 8002380:	781b      	ldrb	r3, [r3, #0]
			sprintf(
 8002382:	001d      	movs	r5, r3
				rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds,
 8002384:	4b5a      	ldr	r3, [pc, #360]	; (80024f0 <doLoop+0x248>)
 8002386:	785b      	ldrb	r3, [r3, #1]
			sprintf(
 8002388:	001e      	movs	r6, r3
				rtcTime.Hours, rtcTime.Minutes, rtcTime.Seconds,
 800238a:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <doLoop+0x248>)
 800238c:	789b      	ldrb	r3, [r3, #2]
			sprintf(
 800238e:	469c      	mov	ip, r3
				(buts&(1<<15)?"----":"BUT1"),
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	4013      	ands	r3, r2
			sprintf(
 8002398:	d001      	beq.n	800239e <doLoop+0xf6>
 800239a:	4b58      	ldr	r3, [pc, #352]	; (80024fc <doLoop+0x254>)
 800239c:	e000      	b.n	80023a0 <doLoop+0xf8>
 800239e:	4b58      	ldr	r3, [pc, #352]	; (8002500 <doLoop+0x258>)
				(buts&(1<<14)?"----":"BUT2")
 80023a0:	69b9      	ldr	r1, [r7, #24]
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	01d2      	lsls	r2, r2, #7
 80023a6:	400a      	ands	r2, r1
			sprintf(
 80023a8:	d001      	beq.n	80023ae <doLoop+0x106>
 80023aa:	4a54      	ldr	r2, [pc, #336]	; (80024fc <doLoop+0x254>)
 80023ac:	e000      	b.n	80023b0 <doLoop+0x108>
 80023ae:	4a55      	ldr	r2, [pc, #340]	; (8002504 <doLoop+0x25c>)
 80023b0:	4955      	ldr	r1, [pc, #340]	; (8002508 <doLoop+0x260>)
 80023b2:	4856      	ldr	r0, [pc, #344]	; (800250c <doLoop+0x264>)
 80023b4:	9205      	str	r2, [sp, #20]
 80023b6:	9304      	str	r3, [sp, #16]
 80023b8:	4663      	mov	r3, ip
 80023ba:	9303      	str	r3, [sp, #12]
 80023bc:	9602      	str	r6, [sp, #8]
 80023be:	9501      	str	r5, [sp, #4]
 80023c0:	9400      	str	r4, [sp, #0]
 80023c2:	464b      	mov	r3, r9
 80023c4:	4642      	mov	r2, r8
 80023c6:	f004 f875 	bl	80064b4 <siprintf>
			);
			debugPrint(&huart1, s);
 80023ca:	4a50      	ldr	r2, [pc, #320]	; (800250c <doLoop+0x264>)
 80023cc:	4b50      	ldr	r3, [pc, #320]	; (8002510 <doLoop+0x268>)
 80023ce:	0011      	movs	r1, r2
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7ff fe7d 	bl	80020d0 <debugPrint>
			pTmr=0;
 80023d6:	4b44      	ldr	r3, [pc, #272]	; (80024e8 <doLoop+0x240>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
			uint8_t ret=getHumidityTemp();
 80023dc:	2517      	movs	r5, #23
 80023de:	197c      	adds	r4, r7, r5
 80023e0:	f000 f8a2 	bl	8002528 <getHumidityTemp>
 80023e4:	0003      	movs	r3, r0
 80023e6:	7023      	strb	r3, [r4, #0]
			if(ret){
 80023e8:	002a      	movs	r2, r5
 80023ea:	18bb      	adds	r3, r7, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <doLoop+0x15a>
				sprintf(s,"i2C returned: %d\r\n",ret);
 80023f2:	18bb      	adds	r3, r7, r2
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	4947      	ldr	r1, [pc, #284]	; (8002514 <doLoop+0x26c>)
 80023f8:	4b44      	ldr	r3, [pc, #272]	; (800250c <doLoop+0x264>)
 80023fa:	0018      	movs	r0, r3
 80023fc:	f004 f85a 	bl	80064b4 <siprintf>
 8002400:	e05f      	b.n	80024c2 <doLoop+0x21a>
			}else{
				// The default compiler settings disable conversion of floating point
				// to text, and enabling it took too much flash memory!
				int32_t t=(temperature*100);
 8002402:	4b45      	ldr	r3, [pc, #276]	; (8002518 <doLoop+0x270>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4945      	ldr	r1, [pc, #276]	; (800251c <doLoop+0x274>)
 8002408:	1c18      	adds	r0, r3, #0
 800240a:	f7fe f801 	bl	8000410 <__aeabi_fmul>
 800240e:	1c03      	adds	r3, r0, #0
 8002410:	1c18      	adds	r0, r3, #0
 8002412:	f7fe f917 	bl	8000644 <__aeabi_f2iz>
 8002416:	0003      	movs	r3, r0
 8002418:	613b      	str	r3, [r7, #16]
				int32_t h=(humidity*100);
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <doLoop+0x278>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	493f      	ldr	r1, [pc, #252]	; (800251c <doLoop+0x274>)
 8002420:	1c18      	adds	r0, r3, #0
 8002422:	f7fd fff5 	bl	8000410 <__aeabi_fmul>
 8002426:	1c03      	adds	r3, r0, #0
 8002428:	1c18      	adds	r0, r3, #0
 800242a:	f7fe f90b 	bl	8000644 <__aeabi_f2iz>
 800242e:	0003      	movs	r3, r0
 8002430:	60fb      	str	r3, [r7, #12]
				uint8_t tm=t%100;
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2164      	movs	r1, #100	; 0x64
 8002436:	0018      	movs	r0, r3
 8002438:	f7fd ffe4 	bl	8000404 <__aeabi_idivmod>
 800243c:	000b      	movs	r3, r1
 800243e:	001a      	movs	r2, r3
 8002440:	250b      	movs	r5, #11
 8002442:	197b      	adds	r3, r7, r5
 8002444:	701a      	strb	r2, [r3, #0]
				uint8_t hm=h%100;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2164      	movs	r1, #100	; 0x64
 800244a:	0018      	movs	r0, r3
 800244c:	f7fd ffda 	bl	8000404 <__aeabi_idivmod>
 8002450:	000b      	movs	r3, r1
 8002452:	001a      	movs	r2, r3
 8002454:	260a      	movs	r6, #10
 8002456:	19bb      	adds	r3, r7, r6
 8002458:	701a      	strb	r2, [r3, #0]
				int16_t td=(int16_t)t/100;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	b21b      	sxth	r3, r3
 800245e:	2208      	movs	r2, #8
 8002460:	18bc      	adds	r4, r7, r2
 8002462:	2164      	movs	r1, #100	; 0x64
 8002464:	0018      	movs	r0, r3
 8002466:	f7fd fee7 	bl	8000238 <__divsi3>
 800246a:	0003      	movs	r3, r0
 800246c:	8023      	strh	r3, [r4, #0]
				int16_t hd=(int16_t)h/100;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	b21b      	sxth	r3, r3
 8002472:	1dbc      	adds	r4, r7, #6
 8002474:	2164      	movs	r1, #100	; 0x64
 8002476:	0018      	movs	r0, r3
 8002478:	f7fd fede 	bl	8000238 <__divsi3>
 800247c:	0003      	movs	r3, r0
 800247e:	8023      	strh	r3, [r4, #0]
				t/=100;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2164      	movs	r1, #100	; 0x64
 8002484:	0018      	movs	r0, r3
 8002486:	f7fd fed7 	bl	8000238 <__divsi3>
 800248a:	0003      	movs	r3, r0
 800248c:	613b      	str	r3, [r7, #16]
				h/=100;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2164      	movs	r1, #100	; 0x64
 8002492:	0018      	movs	r0, r3
 8002494:	f7fd fed0 	bl	8000238 <__divsi3>
 8002498:	0003      	movs	r3, r0
 800249a:	60fb      	str	r3, [r7, #12]
				sprintf(s,"Temp: %d.%dC, Relative Humidity: %d.%d%%\r\n",td,tm,hd,hm);
 800249c:	2208      	movs	r2, #8
 800249e:	18bb      	adds	r3, r7, r2
 80024a0:	2400      	movs	r4, #0
 80024a2:	5f1c      	ldrsh	r4, [r3, r4]
 80024a4:	197b      	adds	r3, r7, r5
 80024a6:	781d      	ldrb	r5, [r3, #0]
 80024a8:	1dbb      	adds	r3, r7, #6
 80024aa:	2200      	movs	r2, #0
 80024ac:	5e9b      	ldrsh	r3, [r3, r2]
 80024ae:	19ba      	adds	r2, r7, r6
 80024b0:	7812      	ldrb	r2, [r2, #0]
 80024b2:	491c      	ldr	r1, [pc, #112]	; (8002524 <doLoop+0x27c>)
 80024b4:	4815      	ldr	r0, [pc, #84]	; (800250c <doLoop+0x264>)
 80024b6:	9201      	str	r2, [sp, #4]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	002b      	movs	r3, r5
 80024bc:	0022      	movs	r2, r4
 80024be:	f003 fff9 	bl	80064b4 <siprintf>
			}
			debugPrintln(&huart1, s);
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <doLoop+0x264>)
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <doLoop+0x268>)
 80024c6:	0011      	movs	r1, r2
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7ff fe15 	bl	80020f8 <debugPrintln>
		}

	}

}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b009      	add	sp, #36	; 0x24
 80024d4:	bcc0      	pop	{r6, r7}
 80024d6:	46b9      	mov	r9, r7
 80024d8:	46b0      	mov	r8, r6
 80024da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024dc:	200000a1 	.word	0x200000a1
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000008 	.word	0x20000008
 80024e8:	2000009c 	.word	0x2000009c
 80024ec:	50000800 	.word	0x50000800
 80024f0:	200001c4 	.word	0x200001c4
 80024f4:	20000198 	.word	0x20000198
 80024f8:	200000b8 	.word	0x200000b8
 80024fc:	08006d18 	.word	0x08006d18
 8002500:	08006d20 	.word	0x08006d20
 8002504:	08006d28 	.word	0x08006d28
 8002508:	08006d30 	.word	0x08006d30
 800250c:	200001d8 	.word	0x200001d8
 8002510:	20000108 	.word	0x20000108
 8002514:	08006d5c 	.word	0x08006d5c
 8002518:	200000a4 	.word	0x200000a4
 800251c:	42c80000 	.word	0x42c80000
 8002520:	200000a8 	.word	0x200000a8
 8002524:	08006d70 	.word	0x08006d70

08002528 <getHumidityTemp>:

// Read the temperature and humidity from the on-board SHT30 sensor
uint8_t getHumidityTemp(void){
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af02      	add	r7, sp, #8
	uint8_t pData[6]={0x2C,0x06,0,0,0,0};
 800252e:	003b      	movs	r3, r7
 8002530:	4a4a      	ldr	r2, [pc, #296]	; (800265c <getHumidityTemp+0x134>)
 8002532:	6811      	ldr	r1, [r2, #0]
 8002534:	6019      	str	r1, [r3, #0]
 8002536:	8892      	ldrh	r2, [r2, #4]
 8002538:	809a      	strh	r2, [r3, #4]
	uint8_t ret=HAL_I2C_Master_Transmit (&hi2c2, HUMIDITY_SENSOR_ADDR<<1, pData, 2, 10000);
 800253a:	1dfc      	adds	r4, r7, #7
 800253c:	003a      	movs	r2, r7
 800253e:	4848      	ldr	r0, [pc, #288]	; (8002660 <getHumidityTemp+0x138>)
 8002540:	4b48      	ldr	r3, [pc, #288]	; (8002664 <getHumidityTemp+0x13c>)
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2302      	movs	r3, #2
 8002546:	2188      	movs	r1, #136	; 0x88
 8002548:	f001 f860 	bl	800360c <HAL_I2C_Master_Transmit>
 800254c:	0003      	movs	r3, r0
 800254e:	7023      	strb	r3, [r4, #0]
	HAL_Delay(50);
 8002550:	2032      	movs	r0, #50	; 0x32
 8002552:	f000 fd41 	bl	8002fd8 <HAL_Delay>
	ret=HAL_I2C_Master_Receive (&hi2c2, HUMIDITY_SENSOR_ADDR<<1, pData, 6, 10000);
 8002556:	1dfc      	adds	r4, r7, #7
 8002558:	003a      	movs	r2, r7
 800255a:	4841      	ldr	r0, [pc, #260]	; (8002660 <getHumidityTemp+0x138>)
 800255c:	4b41      	ldr	r3, [pc, #260]	; (8002664 <getHumidityTemp+0x13c>)
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2306      	movs	r3, #6
 8002562:	2188      	movs	r1, #136	; 0x88
 8002564:	f001 f95a 	bl	800381c <HAL_I2C_Master_Receive>
 8002568:	0003      	movs	r3, r0
 800256a:	7023      	strb	r3, [r4, #0]

	if(ret){
 800256c:	1dfb      	adds	r3, r7, #7
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <getHumidityTemp+0x52>
		return ret;
 8002574:	1dfb      	adds	r3, r7, #7
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	e06b      	b.n	8002652 <getHumidityTemp+0x12a>
	}

	temperature = ((((pData[0] * 256.0) + pData[1]) * 175) / 65535.0) - 45;
 800257a:	003b      	movs	r3, r7
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	0018      	movs	r0, r3
 8002580:	f7ff fcd0 	bl	8001f24 <__aeabi_i2d>
 8002584:	2200      	movs	r2, #0
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <getHumidityTemp+0x140>)
 8002588:	f7fe fece 	bl	8001328 <__aeabi_dmul>
 800258c:	0002      	movs	r2, r0
 800258e:	000b      	movs	r3, r1
 8002590:	0014      	movs	r4, r2
 8002592:	001d      	movs	r5, r3
 8002594:	003b      	movs	r3, r7
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff fcc3 	bl	8001f24 <__aeabi_i2d>
 800259e:	0002      	movs	r2, r0
 80025a0:	000b      	movs	r3, r1
 80025a2:	0020      	movs	r0, r4
 80025a4:	0029      	movs	r1, r5
 80025a6:	f7fe f86d 	bl	8000684 <__aeabi_dadd>
 80025aa:	0002      	movs	r2, r0
 80025ac:	000b      	movs	r3, r1
 80025ae:	0010      	movs	r0, r2
 80025b0:	0019      	movs	r1, r3
 80025b2:	2200      	movs	r2, #0
 80025b4:	4b2d      	ldr	r3, [pc, #180]	; (800266c <getHumidityTemp+0x144>)
 80025b6:	f7fe feb7 	bl	8001328 <__aeabi_dmul>
 80025ba:	0002      	movs	r2, r0
 80025bc:	000b      	movs	r3, r1
 80025be:	0010      	movs	r0, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	2200      	movs	r2, #0
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <getHumidityTemp+0x148>)
 80025c6:	f7fe fbc7 	bl	8000d58 <__aeabi_ddiv>
 80025ca:	0002      	movs	r2, r0
 80025cc:	000b      	movs	r3, r1
 80025ce:	0010      	movs	r0, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	2200      	movs	r2, #0
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <getHumidityTemp+0x14c>)
 80025d6:	f7ff f913 	bl	8001800 <__aeabi_dsub>
 80025da:	0002      	movs	r2, r0
 80025dc:	000b      	movs	r3, r1
 80025de:	0010      	movs	r0, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	f7ff fccf 	bl	8001f84 <__aeabi_d2f>
 80025e6:	1c02      	adds	r2, r0, #0
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <getHumidityTemp+0x150>)
 80025ea:	601a      	str	r2, [r3, #0]
	humidity = ((((pData[3] * 256.0) + pData[4]) * 100) / 65535.0);
 80025ec:	003b      	movs	r3, r7
 80025ee:	78db      	ldrb	r3, [r3, #3]
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff fc97 	bl	8001f24 <__aeabi_i2d>
 80025f6:	2200      	movs	r2, #0
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <getHumidityTemp+0x140>)
 80025fa:	f7fe fe95 	bl	8001328 <__aeabi_dmul>
 80025fe:	0002      	movs	r2, r0
 8002600:	000b      	movs	r3, r1
 8002602:	0014      	movs	r4, r2
 8002604:	001d      	movs	r5, r3
 8002606:	003b      	movs	r3, r7
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	0018      	movs	r0, r3
 800260c:	f7ff fc8a 	bl	8001f24 <__aeabi_i2d>
 8002610:	0002      	movs	r2, r0
 8002612:	000b      	movs	r3, r1
 8002614:	0020      	movs	r0, r4
 8002616:	0029      	movs	r1, r5
 8002618:	f7fe f834 	bl	8000684 <__aeabi_dadd>
 800261c:	0002      	movs	r2, r0
 800261e:	000b      	movs	r3, r1
 8002620:	0010      	movs	r0, r2
 8002622:	0019      	movs	r1, r3
 8002624:	2200      	movs	r2, #0
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <getHumidityTemp+0x154>)
 8002628:	f7fe fe7e 	bl	8001328 <__aeabi_dmul>
 800262c:	0002      	movs	r2, r0
 800262e:	000b      	movs	r3, r1
 8002630:	0010      	movs	r0, r2
 8002632:	0019      	movs	r1, r3
 8002634:	2200      	movs	r2, #0
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <getHumidityTemp+0x148>)
 8002638:	f7fe fb8e 	bl	8000d58 <__aeabi_ddiv>
 800263c:	0002      	movs	r2, r0
 800263e:	000b      	movs	r3, r1
 8002640:	0010      	movs	r0, r2
 8002642:	0019      	movs	r1, r3
 8002644:	f7ff fc9e 	bl	8001f84 <__aeabi_d2f>
 8002648:	1c02      	adds	r2, r0, #0
 800264a:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <getHumidityTemp+0x158>)
 800264c:	601a      	str	r2, [r3, #0]

	return ret;
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	781b      	ldrb	r3, [r3, #0]
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b002      	add	sp, #8
 8002658:	bdb0      	pop	{r4, r5, r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	08006d9c 	.word	0x08006d9c
 8002660:	200000bc 	.word	0x200000bc
 8002664:	00002710 	.word	0x00002710
 8002668:	40700000 	.word	0x40700000
 800266c:	4065e000 	.word	0x4065e000
 8002670:	40efffe0 	.word	0x40efffe0
 8002674:	40468000 	.word	0x40468000
 8002678:	200000a4 	.word	0x200000a4
 800267c:	40590000 	.word	0x40590000
 8002680:	200000a8 	.word	0x200000a8

08002684 <scanBus>:

// Scan for i2C devices
void scanBus(void){
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800268a:	23fa      	movs	r3, #250	; 0xfa
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	0018      	movs	r0, r3
 8002690:	f000 fca2 	bl	8002fd8 <HAL_Delay>
	char s[16];
	debugPrint(&huart1, "Scanning for i2C devices...\r\n\r\n---- ");
 8002694:	4a2e      	ldr	r2, [pc, #184]	; (8002750 <scanBus+0xcc>)
 8002696:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <scanBus+0xd0>)
 8002698:	0011      	movs	r1, r2
 800269a:	0018      	movs	r0, r3
 800269c:	f7ff fd18 	bl	80020d0 <debugPrint>
	for(uint8_t i=1; i<128; i++){
 80026a0:	2317      	movs	r3, #23
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	e041      	b.n	800272e <scanBus+0xaa>
		uint8_t ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 80026aa:	2317      	movs	r3, #23
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	18db      	adds	r3, r3, r3
 80026b4:	b299      	uxth	r1, r3
 80026b6:	2516      	movs	r5, #22
 80026b8:	197c      	adds	r4, r7, r5
 80026ba:	4827      	ldr	r0, [pc, #156]	; (8002758 <scanBus+0xd4>)
 80026bc:	2305      	movs	r3, #5
 80026be:	2203      	movs	r2, #3
 80026c0:	f001 f9b4 	bl	8003a2c <HAL_I2C_IsDeviceReady>
 80026c4:	0003      	movs	r3, r0
 80026c6:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) /* No ACK Received At That Address */
 80026c8:	197b      	adds	r3, r7, r5
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <scanBus+0x5a>
		{
			sprintf(s, "---- ");
 80026d0:	4a22      	ldr	r2, [pc, #136]	; (800275c <scanBus+0xd8>)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	0011      	movs	r1, r2
 80026d6:	0018      	movs	r0, r3
 80026d8:	f003 feec 	bl	80064b4 <siprintf>
 80026dc:	e00c      	b.n	80026f8 <scanBus+0x74>
		}
		else if(ret == HAL_OK)
 80026de:	2316      	movs	r3, #22
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d107      	bne.n	80026f8 <scanBus+0x74>
		{
			sprintf(s, "0x%02X ", i);
 80026e8:	2317      	movs	r3, #23
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	491c      	ldr	r1, [pc, #112]	; (8002760 <scanBus+0xdc>)
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	0018      	movs	r0, r3
 80026f4:	f003 fede 	bl	80064b4 <siprintf>
		}
		if((i%16)==15){
 80026f8:	2317      	movs	r3, #23
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	220f      	movs	r2, #15
 8002700:	4013      	ands	r3, r2
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b0f      	cmp	r3, #15
 8002706:	d106      	bne.n	8002716 <scanBus+0x92>
			debugPrintln(&huart1, s);
 8002708:	1d3a      	adds	r2, r7, #4
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <scanBus+0xd0>)
 800270c:	0011      	movs	r1, r2
 800270e:	0018      	movs	r0, r3
 8002710:	f7ff fcf2 	bl	80020f8 <debugPrintln>
 8002714:	e005      	b.n	8002722 <scanBus+0x9e>
		}else{
			debugPrint(&huart1, s);
 8002716:	1d3a      	adds	r2, r7, #4
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <scanBus+0xd0>)
 800271a:	0011      	movs	r1, r2
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff fcd7 	bl	80020d0 <debugPrint>
	for(uint8_t i=1; i<128; i++){
 8002722:	2117      	movs	r1, #23
 8002724:	187b      	adds	r3, r7, r1
 8002726:	781a      	ldrb	r2, [r3, #0]
 8002728:	187b      	adds	r3, r7, r1
 800272a:	3201      	adds	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	2317      	movs	r3, #23
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b25b      	sxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	dab7      	bge.n	80026aa <scanBus+0x26>
		}
	}
	debugPrintln(&huart1, "\r\nDone\r\n");
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <scanBus+0xe0>)
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <scanBus+0xd0>)
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f7ff fcd9 	bl	80020f8 <debugPrintln>
}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b006      	add	sp, #24
 800274c:	bdb0      	pop	{r4, r5, r7, pc}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	08006da4 	.word	0x08006da4
 8002754:	20000108 	.word	0x20000108
 8002758:	200000bc 	.word	0x200000bc
 800275c:	08006dcc 	.word	0x08006dcc
 8002760:	08006dd4 	.word	0x08006dd4
 8002764:	08006ddc 	.word	0x08006ddc

08002768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800276c:	f000 fbae 	bl	8002ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002770:	f000 f816 	bl	80027a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002774:	f000 f97e 	bl	8002a74 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002778:	f000 f85e 	bl	8002838 <MX_I2C2_Init>
  MX_RTC_Init();
 800277c:	f000 f89c 	bl	80028b8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002780:	f000 f92a 	bl	80029d8 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8002784:	f000 f904 	bl	8002990 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <main+0x34>)
 800278a:	0018      	movs	r0, r3
 800278c:	f002 fef0 	bl	8005570 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	scanBus();
 8002790:	f7ff ff78 	bl	8002684 <scanBus>

	while(1){
		doLoop();
 8002794:	f7ff fd88 	bl	80022a8 <doLoop>
 8002798:	e7fc      	b.n	8002794 <main+0x2c>
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	20000218 	.word	0x20000218

080027a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b093      	sub	sp, #76	; 0x4c
 80027a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027a6:	2414      	movs	r4, #20
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	0018      	movs	r0, r3
 80027ac:	2334      	movs	r3, #52	; 0x34
 80027ae:	001a      	movs	r2, r3
 80027b0:	2100      	movs	r1, #0
 80027b2:	f003 fe77 	bl	80064a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	0018      	movs	r0, r3
 80027ba:	2310      	movs	r3, #16
 80027bc:	001a      	movs	r2, r3
 80027be:	2100      	movs	r1, #0
 80027c0:	f003 fe70 	bl	80064a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f001 fcd9 	bl	8004180 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	220a      	movs	r2, #10
 80027d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	0052      	lsls	r2, r2, #1
 80027da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80027dc:	0021      	movs	r1, r4
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	2240      	movs	r2, #64	; 0x40
 80027e8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	2201      	movs	r2, #1
 80027ee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	2200      	movs	r2, #0
 80027f4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027f6:	187b      	adds	r3, r7, r1
 80027f8:	0018      	movs	r0, r3
 80027fa:	f001 fd0d 	bl	8004218 <HAL_RCC_OscConfig>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d001      	beq.n	8002806 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002802:	f000 f99b 	bl	8002b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2100      	movs	r1, #0
 8002822:	0018      	movs	r0, r3
 8002824:	f002 f80e 	bl	8004844 <HAL_RCC_ClockConfig>
 8002828:	1e03      	subs	r3, r0, #0
 800282a:	d001      	beq.n	8002830 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800282c:	f000 f986 	bl	8002b3c <Error_Handler>
  }
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b013      	add	sp, #76	; 0x4c
 8002836:	bd90      	pop	{r4, r7, pc}

08002838 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <MX_I2C2_Init+0x74>)
 800283e:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <MX_I2C2_Init+0x78>)
 8002840:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002842:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <MX_I2C2_Init+0x74>)
 8002844:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <MX_I2C2_Init+0x7c>)
 8002846:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002848:	4b18      	ldr	r3, [pc, #96]	; (80028ac <MX_I2C2_Init+0x74>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800284e:	4b17      	ldr	r3, [pc, #92]	; (80028ac <MX_I2C2_Init+0x74>)
 8002850:	2201      	movs	r2, #1
 8002852:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <MX_I2C2_Init+0x74>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800285a:	4b14      	ldr	r3, [pc, #80]	; (80028ac <MX_I2C2_Init+0x74>)
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <MX_I2C2_Init+0x74>)
 8002862:	2200      	movs	r2, #0
 8002864:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002866:	4b11      	ldr	r3, [pc, #68]	; (80028ac <MX_I2C2_Init+0x74>)
 8002868:	2200      	movs	r2, #0
 800286a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <MX_I2C2_Init+0x74>)
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <MX_I2C2_Init+0x74>)
 8002874:	0018      	movs	r0, r3
 8002876:	f000 fe33 	bl	80034e0 <HAL_I2C_Init>
 800287a:	1e03      	subs	r3, r0, #0
 800287c:	d001      	beq.n	8002882 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800287e:	f000 f95d 	bl	8002b3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <MX_I2C2_Init+0x74>)
 8002884:	2100      	movs	r1, #0
 8002886:	0018      	movs	r0, r3
 8002888:	f001 fbe2 	bl	8004050 <HAL_I2CEx_ConfigAnalogFilter>
 800288c:	1e03      	subs	r3, r0, #0
 800288e:	d001      	beq.n	8002894 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002890:	f000 f954 	bl	8002b3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <MX_I2C2_Init+0x74>)
 8002896:	2100      	movs	r1, #0
 8002898:	0018      	movs	r0, r3
 800289a:	f001 fc25 	bl	80040e8 <HAL_I2CEx_ConfigDigitalFilter>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d001      	beq.n	80028a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80028a2:	f000 f94b 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	200000bc 	.word	0x200000bc
 80028b0:	40005800 	.word	0x40005800
 80028b4:	00303d5b 	.word	0x00303d5b

080028b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	0018      	movs	r0, r3
 80028c2:	2314      	movs	r3, #20
 80028c4:	001a      	movs	r2, r3
 80028c6:	2100      	movs	r1, #0
 80028c8:	f003 fdec 	bl	80064a4 <memset>
  RTC_DateTypeDef sDate = {0};
 80028cc:	003b      	movs	r3, r7
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028d2:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <MX_RTC_Init+0xd0>)
 80028d4:	4a2d      	ldr	r2, [pc, #180]	; (800298c <MX_RTC_Init+0xd4>)
 80028d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <MX_RTC_Init+0xd0>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80028de:	4b2a      	ldr	r3, [pc, #168]	; (8002988 <MX_RTC_Init+0xd0>)
 80028e0:	227f      	movs	r2, #127	; 0x7f
 80028e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80028e4:	4b28      	ldr	r3, [pc, #160]	; (8002988 <MX_RTC_Init+0xd0>)
 80028e6:	22ff      	movs	r2, #255	; 0xff
 80028e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028ea:	4b27      	ldr	r3, [pc, #156]	; (8002988 <MX_RTC_Init+0xd0>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <MX_RTC_Init+0xd0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028f6:	4b24      	ldr	r3, [pc, #144]	; (8002988 <MX_RTC_Init+0xd0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028fc:	4b22      	ldr	r3, [pc, #136]	; (8002988 <MX_RTC_Init+0xd0>)
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	05d2      	lsls	r2, r2, #23
 8002902:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002904:	4b20      	ldr	r3, [pc, #128]	; (8002988 <MX_RTC_Init+0xd0>)
 8002906:	2200      	movs	r2, #0
 8002908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800290a:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <MX_RTC_Init+0xd0>)
 800290c:	0018      	movs	r0, r3
 800290e:	f002 fa69 	bl	8004de4 <HAL_RTC_Init>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d001      	beq.n	800291a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8002916:	f000 f911 	bl	8002b3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x15;
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	2215      	movs	r2, #21
 800291e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x30;
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	2230      	movs	r2, #48	; 0x30
 8002924:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002926:	1d3b      	adds	r3, r7, #4
 8002928:	2200      	movs	r2, #0
 800292a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	2200      	movs	r2, #0
 8002930:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2200      	movs	r2, #0
 8002936:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	2200      	movs	r2, #0
 800293c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800293e:	1d39      	adds	r1, r7, #4
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <MX_RTC_Init+0xd0>)
 8002942:	2201      	movs	r2, #1
 8002944:	0018      	movs	r0, r3
 8002946:	f002 fae3 	bl	8004f10 <HAL_RTC_SetTime>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800294e:	f000 f8f5 	bl	8002b3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8002952:	003b      	movs	r3, r7
 8002954:	2205      	movs	r2, #5
 8002956:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JUNE;
 8002958:	003b      	movs	r3, r7
 800295a:	2206      	movs	r2, #6
 800295c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x3;
 800295e:	003b      	movs	r3, r7
 8002960:	2203      	movs	r2, #3
 8002962:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x20;
 8002964:	003b      	movs	r3, r7
 8002966:	2220      	movs	r2, #32
 8002968:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800296a:	0039      	movs	r1, r7
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <MX_RTC_Init+0xd0>)
 800296e:	2201      	movs	r2, #1
 8002970:	0018      	movs	r0, r3
 8002972:	f002 fbd1 	bl	8005118 <HAL_RTC_SetDate>
 8002976:	1e03      	subs	r3, r0, #0
 8002978:	d001      	beq.n	800297e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800297a:	f000 f8df 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	46bd      	mov	sp, r7
 8002982:	b006      	add	sp, #24
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	20000198 	.word	0x20000198
 800298c:	40002800 	.word	0x40002800

08002990 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <MX_TIM14_Init+0x40>)
 8002996:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <MX_TIM14_Init+0x44>)
 8002998:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <MX_TIM14_Init+0x40>)
 800299c:	220f      	movs	r2, #15
 800299e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a0:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <MX_TIM14_Init+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100-1;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <MX_TIM14_Init+0x40>)
 80029a8:	2263      	movs	r2, #99	; 0x63
 80029aa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <MX_TIM14_Init+0x40>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <MX_TIM14_Init+0x40>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <MX_TIM14_Init+0x40>)
 80029ba:	0018      	movs	r0, r3
 80029bc:	f002 fd7f 	bl	80054be <HAL_TIM_Base_Init>
 80029c0:	1e03      	subs	r3, r0, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80029c4:	f000 f8ba 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80029c8:	46c0      	nop			; (mov r8, r8)
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	20000218 	.word	0x20000218
 80029d4:	40002000 	.word	0x40002000

080029d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 80029de:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <MX_USART1_UART_Init+0x98>)
 80029e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 80029e4:	22e1      	movs	r2, #225	; 0xe1
 80029e6:	0252      	lsls	r2, r2, #9
 80029e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 80029fe:	220c      	movs	r2, #12
 8002a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a08:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a0e:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a14:	4b15      	ldr	r3, [pc, #84]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 8002a22:	0018      	movs	r0, r3
 8002a24:	f002 ffc8 	bl	80059b8 <HAL_UART_Init>
 8002a28:	1e03      	subs	r3, r0, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a2c:	f000 f886 	bl	8002b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 8002a32:	2100      	movs	r1, #0
 8002a34:	0018      	movs	r0, r3
 8002a36:	f003 fc2b 	bl	8006290 <HAL_UARTEx_SetTxFifoThreshold>
 8002a3a:	1e03      	subs	r3, r0, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a3e:	f000 f87d 	bl	8002b3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 8002a44:	2100      	movs	r1, #0
 8002a46:	0018      	movs	r0, r3
 8002a48:	f003 fc62 	bl	8006310 <HAL_UARTEx_SetRxFifoThreshold>
 8002a4c:	1e03      	subs	r3, r0, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a50:	f000 f874 	bl	8002b3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <MX_USART1_UART_Init+0x94>)
 8002a56:	0018      	movs	r0, r3
 8002a58:	f003 fbe0 	bl	800621c <HAL_UARTEx_DisableFifoMode>
 8002a5c:	1e03      	subs	r3, r0, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a60:	f000 f86c 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	20000108 	.word	0x20000108
 8002a70:	40013800 	.word	0x40013800

08002a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7a:	240c      	movs	r4, #12
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	0018      	movs	r0, r3
 8002a80:	2314      	movs	r3, #20
 8002a82:	001a      	movs	r2, r3
 8002a84:	2100      	movs	r1, #0
 8002a86:	f003 fd0d 	bl	80064a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8a:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <MX_GPIO_Init+0xbc>)
 8002a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a8e:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <MX_GPIO_Init+0xbc>)
 8002a90:	2102      	movs	r1, #2
 8002a92:	430a      	orrs	r2, r1
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <MX_GPIO_Init+0xbc>)
 8002a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <MX_GPIO_Init+0xbc>)
 8002aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <MX_GPIO_Init+0xbc>)
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <MX_GPIO_Init+0xbc>)
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <MX_GPIO_Init+0xbc>)
 8002abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002abe:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <MX_GPIO_Init+0xbc>)
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <MX_GPIO_Init+0xbc>)
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	2201      	movs	r2, #1
 8002acc:	4013      	ands	r3, r2
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, out0_Pin|out1_Pin|out2_Pin|out3_Pin
 8002ad2:	4918      	ldr	r1, [pc, #96]	; (8002b34 <MX_GPIO_Init+0xc0>)
 8002ad4:	23a0      	movs	r3, #160	; 0xa0
 8002ad6:	05db      	lsls	r3, r3, #23
 8002ad8:	2201      	movs	r2, #1
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 fce2 	bl	80034a4 <HAL_GPIO_WritePin>
                          |out4_Pin|out5_Pin|out6_Pin|out7_Pin
                          |SIM_KEY_OUT_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : but2_Pin but1_Pin */
  GPIO_InitStruct.Pin = but2_Pin|but1_Pin;
 8002ae0:	193b      	adds	r3, r7, r4
 8002ae2:	22c0      	movs	r2, #192	; 0xc0
 8002ae4:	0212      	lsls	r2, r2, #8
 8002ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	2200      	movs	r2, #0
 8002aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aee:	193b      	adds	r3, r7, r4
 8002af0:	2201      	movs	r2, #1
 8002af2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af4:	193b      	adds	r3, r7, r4
 8002af6:	4a10      	ldr	r2, [pc, #64]	; (8002b38 <MX_GPIO_Init+0xc4>)
 8002af8:	0019      	movs	r1, r3
 8002afa:	0010      	movs	r0, r2
 8002afc:	f000 fb6e 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : out0_Pin out1_Pin out2_Pin out3_Pin
                           out4_Pin out5_Pin out6_Pin out7_Pin
                           SIM_KEY_OUT_Pin */
  GPIO_InitStruct.Pin = out0_Pin|out1_Pin|out2_Pin|out3_Pin
 8002b00:	0021      	movs	r1, r4
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <MX_GPIO_Init+0xc0>)
 8002b06:	601a      	str	r2, [r3, #0]
                          |out4_Pin|out5_Pin|out6_Pin|out7_Pin
                          |SIM_KEY_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1a:	187a      	adds	r2, r7, r1
 8002b1c:	23a0      	movs	r3, #160	; 0xa0
 8002b1e:	05db      	lsls	r3, r3, #23
 8002b20:	0011      	movs	r1, r2
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 fb5a 	bl	80031dc <HAL_GPIO_Init>

}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b009      	add	sp, #36	; 0x24
 8002b2e:	bd90      	pop	{r4, r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	000001ff 	.word	0x000001ff
 8002b38:	50000800 	.word	0x50000800

08002b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b40:	b672      	cpsid	i
}
 8002b42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <Error_Handler+0x8>
	...

08002b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <HAL_MspInit+0x44>)
 8002b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b52:	4b0e      	ldr	r3, [pc, #56]	; (8002b8c <HAL_MspInit+0x44>)
 8002b54:	2101      	movs	r1, #1
 8002b56:	430a      	orrs	r2, r1
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <HAL_MspInit+0x44>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2201      	movs	r2, #1
 8002b60:	4013      	ands	r3, r2
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_MspInit+0x44>)
 8002b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b6a:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <HAL_MspInit+0x44>)
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	0549      	lsls	r1, r1, #21
 8002b70:	430a      	orrs	r2, r1
 8002b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_MspInit+0x44>)
 8002b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	055b      	lsls	r3, r3, #21
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b002      	add	sp, #8
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b08b      	sub	sp, #44	; 0x2c
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	2414      	movs	r4, #20
 8002b9a:	193b      	adds	r3, r7, r4
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	2314      	movs	r3, #20
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f003 fc7e 	bl	80064a4 <memset>
  if(hi2c->Instance==I2C2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_I2C_MspInit+0x90>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d131      	bne.n	8002c16 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <HAL_I2C_MspInit+0x94>)
 8002bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <HAL_I2C_MspInit+0x94>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_I2C_MspInit+0x94>)
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002bca:	193b      	adds	r3, r7, r4
 8002bcc:	22c0      	movs	r2, #192	; 0xc0
 8002bce:	0152      	lsls	r2, r2, #5
 8002bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bd2:	0021      	movs	r1, r4
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	2212      	movs	r2, #18
 8002bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	187b      	adds	r3, r7, r1
 8002bdc:	2200      	movs	r2, #0
 8002bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	2206      	movs	r2, #6
 8002bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bec:	187a      	adds	r2, r7, r1
 8002bee:	23a0      	movs	r3, #160	; 0xa0
 8002bf0:	05db      	lsls	r3, r3, #23
 8002bf2:	0011      	movs	r1, r2
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 faf1 	bl	80031dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_I2C_MspInit+0x94>)
 8002bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_I2C_MspInit+0x94>)
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	03c9      	lsls	r1, r1, #15
 8002c04:	430a      	orrs	r2, r1
 8002c06:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_I2C_MspInit+0x94>)
 8002c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	03db      	lsls	r3, r3, #15
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b00b      	add	sp, #44	; 0x2c
 8002c1c:	bd90      	pop	{r4, r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	40005800 	.word	0x40005800
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b08b      	sub	sp, #44	; 0x2c
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c30:	2410      	movs	r4, #16
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	0018      	movs	r0, r3
 8002c36:	2318      	movs	r3, #24
 8002c38:	001a      	movs	r2, r3
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	f003 fc32 	bl	80064a4 <memset>
  if(hrtc->Instance==RTC)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a15      	ldr	r2, [pc, #84]	; (8002c9c <HAL_RTC_MspInit+0x74>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d124      	bne.n	8002c94 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	0292      	lsls	r2, r2, #10
 8002c50:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f001 ff9b 	bl	8004b98 <HAL_RCCEx_PeriphCLKConfig>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002c66:	f7ff ff69 	bl	8002b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <HAL_RTC_MspInit+0x78>)
 8002c6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_RTC_MspInit+0x78>)
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	0209      	lsls	r1, r1, #8
 8002c74:	430a      	orrs	r2, r1
 8002c76:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RTC_MspInit+0x78>)
 8002c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RTC_MspInit+0x78>)
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	00c9      	lsls	r1, r1, #3
 8002c82:	430a      	orrs	r2, r1
 8002c84:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_RTC_MspInit+0x78>)
 8002c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4013      	ands	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b00b      	add	sp, #44	; 0x2c
 8002c9a:	bd90      	pop	{r4, r7, pc}
 8002c9c:	40002800 	.word	0x40002800
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0e      	ldr	r2, [pc, #56]	; (8002cec <HAL_TIM_Base_MspInit+0x48>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d115      	bne.n	8002ce2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_TIM_Base_MspInit+0x4c>)
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_TIM_Base_MspInit+0x4c>)
 8002cbc:	2180      	movs	r1, #128	; 0x80
 8002cbe:	0209      	lsls	r1, r1, #8
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_TIM_Base_MspInit+0x4c>)
 8002cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	2013      	movs	r0, #19
 8002cd8:	f000 fa4e 	bl	8003178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002cdc:	2013      	movs	r0, #19
 8002cde:	f000 fa60 	bl	80031a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b004      	add	sp, #16
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	40002000 	.word	0x40002000
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b091      	sub	sp, #68	; 0x44
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	232c      	movs	r3, #44	; 0x2c
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	0018      	movs	r0, r3
 8002d02:	2314      	movs	r3, #20
 8002d04:	001a      	movs	r2, r3
 8002d06:	2100      	movs	r1, #0
 8002d08:	f003 fbcc 	bl	80064a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d0c:	2414      	movs	r4, #20
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	0018      	movs	r0, r3
 8002d12:	2318      	movs	r3, #24
 8002d14:	001a      	movs	r2, r3
 8002d16:	2100      	movs	r1, #0
 8002d18:	f003 fbc4 	bl	80064a4 <memset>
  if(huart->Instance==USART1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a22      	ldr	r2, [pc, #136]	; (8002dac <HAL_UART_MspInit+0xb8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d13d      	bne.n	8002da2 <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d26:	193b      	adds	r3, r7, r4
 8002d28:	2201      	movs	r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d2c:	193b      	adds	r3, r7, r4
 8002d2e:	2200      	movs	r2, #0
 8002d30:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	0018      	movs	r0, r3
 8002d36:	f001 ff2f 	bl	8004b98 <HAL_RCCEx_PeriphCLKConfig>
 8002d3a:	1e03      	subs	r3, r0, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d3e:	f7ff fefd 	bl	8002b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_UART_MspInit+0xbc>)
 8002d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <HAL_UART_MspInit+0xbc>)
 8002d48:	2180      	movs	r1, #128	; 0x80
 8002d4a:	01c9      	lsls	r1, r1, #7
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <HAL_UART_MspInit+0xbc>)
 8002d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	01db      	lsls	r3, r3, #7
 8002d58:	4013      	ands	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <HAL_UART_MspInit+0xbc>)
 8002d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <HAL_UART_MspInit+0xbc>)
 8002d64:	2102      	movs	r1, #2
 8002d66:	430a      	orrs	r2, r1
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_UART_MspInit+0xbc>)
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6e:	2202      	movs	r2, #2
 8002d70:	4013      	ands	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	22c0      	movs	r2, #192	; 0xc0
 8002d7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2202      	movs	r2, #2
 8002d82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <HAL_UART_MspInit+0xc0>)
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	f000 fa1d 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b011      	add	sp, #68	; 0x44
 8002da8:	bd90      	pop	{r4, r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	50000400 	.word	0x50000400

08002db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <NMI_Handler+0x4>

08002dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <HardFault_Handler+0x4>

08002dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ddc:	f000 f8e0 	bl	8002fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <TIM14_IRQHandler+0x14>)
 8002dee:	0018      	movs	r0, r3
 8002df0:	f002 fc0c 	bl	800560c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	20000218 	.word	0x20000218

08002e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e08:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <_sbrk+0x5c>)
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <_sbrk+0x60>)
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <_sbrk+0x64>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <_sbrk+0x64>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <_sbrk+0x68>)
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	18d3      	adds	r3, r2, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e30:	f003 fb0e 	bl	8006450 <__errno>
 8002e34:	0003      	movs	r3, r0
 8002e36:	220c      	movs	r2, #12
 8002e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	425b      	negs	r3, r3
 8002e3e:	e009      	b.n	8002e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	18d2      	adds	r2, r2, r3
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <_sbrk+0x64>)
 8002e50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e52:	68fb      	ldr	r3, [r7, #12]
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b006      	add	sp, #24
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	20002000 	.word	0x20002000
 8002e60:	00000400 	.word	0x00000400
 8002e64:	200000ac 	.word	0x200000ac
 8002e68:	20000278 	.word	0x20000278

08002e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e78:	480d      	ldr	r0, [pc, #52]	; (8002eb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e7c:	f7ff fff6 	bl	8002e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e82:	490d      	ldr	r1, [pc, #52]	; (8002eb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <LoopForever+0xe>)
  movs r3, #0
 8002e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e88:	e002      	b.n	8002e90 <LoopCopyDataInit>

08002e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e8e:	3304      	adds	r3, #4

08002e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e94:	d3f9      	bcc.n	8002e8a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e98:	4c0a      	ldr	r4, [pc, #40]	; (8002ec4 <LoopForever+0x16>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e9c:	e001      	b.n	8002ea2 <LoopFillZerobss>

08002e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea0:	3204      	adds	r2, #4

08002ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea4:	d3fb      	bcc.n	8002e9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ea6:	f003 fad9 	bl	800645c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002eaa:	f7ff fc5d 	bl	8002768 <main>

08002eae <LoopForever>:

LoopForever:
  b LoopForever
 8002eae:	e7fe      	b.n	8002eae <LoopForever>
  ldr   r0, =_estack
 8002eb0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002ebc:	08006f6c 	.word	0x08006f6c
  ldr r2, =_sbss
 8002ec0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002ec4:	20000278 	.word	0x20000278

08002ec8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC1_IRQHandler>
	...

08002ecc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ed2:	1dfb      	adds	r3, r7, #7
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_Init+0x3c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_Init+0x3c>)
 8002ede:	2180      	movs	r1, #128	; 0x80
 8002ee0:	0049      	lsls	r1, r1, #1
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ee6:	2003      	movs	r0, #3
 8002ee8:	f000 f810 	bl	8002f0c <HAL_InitTick>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ef0:	1dfb      	adds	r3, r7, #7
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e001      	b.n	8002efc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ef8:	f7ff fe26 	bl	8002b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002efc:	1dfb      	adds	r3, r7, #7
 8002efe:	781b      	ldrb	r3, [r3, #0]
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40022000 	.word	0x40022000

08002f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f14:	230f      	movs	r3, #15
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_InitTick+0x88>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02b      	beq.n	8002f7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002f24:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <HAL_InitTick+0x8c>)
 8002f26:	681c      	ldr	r4, [r3, #0]
 8002f28:	4b1a      	ldr	r3, [pc, #104]	; (8002f94 <HAL_InitTick+0x88>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	23fa      	movs	r3, #250	; 0xfa
 8002f30:	0098      	lsls	r0, r3, #2
 8002f32:	f7fd f8f7 	bl	8000124 <__udivsi3>
 8002f36:	0003      	movs	r3, r0
 8002f38:	0019      	movs	r1, r3
 8002f3a:	0020      	movs	r0, r4
 8002f3c:	f7fd f8f2 	bl	8000124 <__udivsi3>
 8002f40:	0003      	movs	r3, r0
 8002f42:	0018      	movs	r0, r3
 8002f44:	f000 f93d 	bl	80031c2 <HAL_SYSTICK_Config>
 8002f48:	1e03      	subs	r3, r0, #0
 8002f4a:	d112      	bne.n	8002f72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	d80a      	bhi.n	8002f68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	2301      	movs	r3, #1
 8002f56:	425b      	negs	r3, r3
 8002f58:	2200      	movs	r2, #0
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 f90c 	bl	8003178 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <HAL_InitTick+0x90>)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e00d      	b.n	8002f84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f68:	230f      	movs	r3, #15
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e008      	b.n	8002f84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f72:	230f      	movs	r3, #15
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e003      	b.n	8002f84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	2201      	movs	r2, #1
 8002f82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f84:	230f      	movs	r3, #15
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	781b      	ldrb	r3, [r3, #0]
}
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	b005      	add	sp, #20
 8002f90:	bd90      	pop	{r4, r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	20000018 	.word	0x20000018
 8002f98:	20000010 	.word	0x20000010
 8002f9c:	20000014 	.word	0x20000014

08002fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_IncTick+0x1c>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <HAL_IncTick+0x20>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	18d2      	adds	r2, r2, r3
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <HAL_IncTick+0x20>)
 8002fb2:	601a      	str	r2, [r3, #0]
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	20000018 	.word	0x20000018
 8002fc0:	20000264 	.word	0x20000264

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <HAL_GetTick+0x10>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	20000264 	.word	0x20000264

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff fff0 	bl	8002fc4 <HAL_GetTick>
 8002fe4:	0003      	movs	r3, r0
 8002fe6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	189b      	adds	r3, r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	f7ff ffe0 	bl	8002fc4 <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46bd      	mov	sp, r7
 8003016:	b004      	add	sp, #16
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	20000018 	.word	0x20000018

08003020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	0002      	movs	r2, r0
 8003028:	1dfb      	adds	r3, r7, #7
 800302a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b7f      	cmp	r3, #127	; 0x7f
 8003032:	d809      	bhi.n	8003048 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003034:	1dfb      	adds	r3, r7, #7
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	001a      	movs	r2, r3
 800303a:	231f      	movs	r3, #31
 800303c:	401a      	ands	r2, r3
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <__NVIC_EnableIRQ+0x30>)
 8003040:	2101      	movs	r1, #1
 8003042:	4091      	lsls	r1, r2
 8003044:	000a      	movs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	b002      	add	sp, #8
 800304e:	bd80      	pop	{r7, pc}
 8003050:	e000e100 	.word	0xe000e100

08003054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	0002      	movs	r2, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b7f      	cmp	r3, #127	; 0x7f
 8003068:	d828      	bhi.n	80030bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800306a:	4a2f      	ldr	r2, [pc, #188]	; (8003128 <__NVIC_SetPriority+0xd4>)
 800306c:	1dfb      	adds	r3, r7, #7
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b25b      	sxtb	r3, r3
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	33c0      	adds	r3, #192	; 0xc0
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	589b      	ldr	r3, [r3, r2]
 800307a:	1dfa      	adds	r2, r7, #7
 800307c:	7812      	ldrb	r2, [r2, #0]
 800307e:	0011      	movs	r1, r2
 8003080:	2203      	movs	r2, #3
 8003082:	400a      	ands	r2, r1
 8003084:	00d2      	lsls	r2, r2, #3
 8003086:	21ff      	movs	r1, #255	; 0xff
 8003088:	4091      	lsls	r1, r2
 800308a:	000a      	movs	r2, r1
 800308c:	43d2      	mvns	r2, r2
 800308e:	401a      	ands	r2, r3
 8003090:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	22ff      	movs	r2, #255	; 0xff
 8003098:	401a      	ands	r2, r3
 800309a:	1dfb      	adds	r3, r7, #7
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	0018      	movs	r0, r3
 80030a0:	2303      	movs	r3, #3
 80030a2:	4003      	ands	r3, r0
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030a8:	481f      	ldr	r0, [pc, #124]	; (8003128 <__NVIC_SetPriority+0xd4>)
 80030aa:	1dfb      	adds	r3, r7, #7
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	430a      	orrs	r2, r1
 80030b4:	33c0      	adds	r3, #192	; 0xc0
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80030ba:	e031      	b.n	8003120 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030bc:	4a1b      	ldr	r2, [pc, #108]	; (800312c <__NVIC_SetPriority+0xd8>)
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	0019      	movs	r1, r3
 80030c4:	230f      	movs	r3, #15
 80030c6:	400b      	ands	r3, r1
 80030c8:	3b08      	subs	r3, #8
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	3306      	adds	r3, #6
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	18d3      	adds	r3, r2, r3
 80030d2:	3304      	adds	r3, #4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	1dfa      	adds	r2, r7, #7
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	0011      	movs	r1, r2
 80030dc:	2203      	movs	r2, #3
 80030de:	400a      	ands	r2, r1
 80030e0:	00d2      	lsls	r2, r2, #3
 80030e2:	21ff      	movs	r1, #255	; 0xff
 80030e4:	4091      	lsls	r1, r2
 80030e6:	000a      	movs	r2, r1
 80030e8:	43d2      	mvns	r2, r2
 80030ea:	401a      	ands	r2, r3
 80030ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	019b      	lsls	r3, r3, #6
 80030f2:	22ff      	movs	r2, #255	; 0xff
 80030f4:	401a      	ands	r2, r3
 80030f6:	1dfb      	adds	r3, r7, #7
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	0018      	movs	r0, r3
 80030fc:	2303      	movs	r3, #3
 80030fe:	4003      	ands	r3, r0
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003104:	4809      	ldr	r0, [pc, #36]	; (800312c <__NVIC_SetPriority+0xd8>)
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	001c      	movs	r4, r3
 800310c:	230f      	movs	r3, #15
 800310e:	4023      	ands	r3, r4
 8003110:	3b08      	subs	r3, #8
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	430a      	orrs	r2, r1
 8003116:	3306      	adds	r3, #6
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	18c3      	adds	r3, r0, r3
 800311c:	3304      	adds	r3, #4
 800311e:	601a      	str	r2, [r3, #0]
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b003      	add	sp, #12
 8003126:	bd90      	pop	{r4, r7, pc}
 8003128:	e000e100 	.word	0xe000e100
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1e5a      	subs	r2, r3, #1
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	045b      	lsls	r3, r3, #17
 8003140:	429a      	cmp	r2, r3
 8003142:	d301      	bcc.n	8003148 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003144:	2301      	movs	r3, #1
 8003146:	e010      	b.n	800316a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003148:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <SysTick_Config+0x44>)
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	3a01      	subs	r2, #1
 800314e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003150:	2301      	movs	r3, #1
 8003152:	425b      	negs	r3, r3
 8003154:	2103      	movs	r1, #3
 8003156:	0018      	movs	r0, r3
 8003158:	f7ff ff7c 	bl	8003054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <SysTick_Config+0x44>)
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <SysTick_Config+0x44>)
 8003164:	2207      	movs	r2, #7
 8003166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003168:	2300      	movs	r3, #0
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b002      	add	sp, #8
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	e000e010 	.word	0xe000e010

08003178 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	210f      	movs	r1, #15
 8003184:	187b      	adds	r3, r7, r1
 8003186:	1c02      	adds	r2, r0, #0
 8003188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	187b      	adds	r3, r7, r1
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b25b      	sxtb	r3, r3
 8003192:	0011      	movs	r1, r2
 8003194:	0018      	movs	r0, r3
 8003196:	f7ff ff5d 	bl	8003054 <__NVIC_SetPriority>
}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b004      	add	sp, #16
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	0002      	movs	r2, r0
 80031aa:	1dfb      	adds	r3, r7, #7
 80031ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ae:	1dfb      	adds	r3, r7, #7
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	b25b      	sxtb	r3, r3
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff ff33 	bl	8003020 <__NVIC_EnableIRQ>
}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	0018      	movs	r0, r3
 80031ce:	f7ff ffaf 	bl	8003130 <SysTick_Config>
 80031d2:	0003      	movs	r3, r0
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ea:	e147      	b.n	800347c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4091      	lsls	r1, r2
 80031f6:	000a      	movs	r2, r1
 80031f8:	4013      	ands	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d100      	bne.n	8003204 <HAL_GPIO_Init+0x28>
 8003202:	e138      	b.n	8003476 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2203      	movs	r2, #3
 800320a:	4013      	ands	r3, r2
 800320c:	2b01      	cmp	r3, #1
 800320e:	d005      	beq.n	800321c <HAL_GPIO_Init+0x40>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	4013      	ands	r3, r2
 8003218:	2b02      	cmp	r3, #2
 800321a:	d130      	bne.n	800327e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	409a      	lsls	r2, r3
 800322a:	0013      	movs	r3, r2
 800322c:	43da      	mvns	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	409a      	lsls	r2, r3
 800323e:	0013      	movs	r3, r2
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003252:	2201      	movs	r2, #1
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
 8003258:	0013      	movs	r3, r2
 800325a:	43da      	mvns	r2, r3
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	2201      	movs	r2, #1
 800326a:	401a      	ands	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2203      	movs	r2, #3
 8003284:	4013      	ands	r3, r2
 8003286:	2b03      	cmp	r3, #3
 8003288:	d017      	beq.n	80032ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2203      	movs	r2, #3
 8003296:	409a      	lsls	r2, r3
 8003298:	0013      	movs	r3, r2
 800329a:	43da      	mvns	r2, r3
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	409a      	lsls	r2, r3
 80032ac:	0013      	movs	r3, r2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2203      	movs	r2, #3
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d123      	bne.n	800330e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	08da      	lsrs	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3208      	adds	r2, #8
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	58d3      	ldr	r3, [r2, r3]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2207      	movs	r2, #7
 80032d8:	4013      	ands	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	409a      	lsls	r2, r3
 80032e0:	0013      	movs	r3, r2
 80032e2:	43da      	mvns	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2107      	movs	r1, #7
 80032f2:	400b      	ands	r3, r1
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	08da      	lsrs	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3208      	adds	r2, #8
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	6939      	ldr	r1, [r7, #16]
 800330c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	409a      	lsls	r2, r3
 800331c:	0013      	movs	r3, r2
 800331e:	43da      	mvns	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2203      	movs	r2, #3
 800332c:	401a      	ands	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	0013      	movs	r3, r2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	23c0      	movs	r3, #192	; 0xc0
 8003348:	029b      	lsls	r3, r3, #10
 800334a:	4013      	ands	r3, r2
 800334c:	d100      	bne.n	8003350 <HAL_GPIO_Init+0x174>
 800334e:	e092      	b.n	8003476 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003350:	4a50      	ldr	r2, [pc, #320]	; (8003494 <HAL_GPIO_Init+0x2b8>)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	3318      	adds	r3, #24
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	589b      	ldr	r3, [r3, r2]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2203      	movs	r2, #3
 8003362:	4013      	ands	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	220f      	movs	r2, #15
 8003368:	409a      	lsls	r2, r3
 800336a:	0013      	movs	r3, r2
 800336c:	43da      	mvns	r2, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	23a0      	movs	r3, #160	; 0xa0
 8003378:	05db      	lsls	r3, r3, #23
 800337a:	429a      	cmp	r2, r3
 800337c:	d013      	beq.n	80033a6 <HAL_GPIO_Init+0x1ca>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a45      	ldr	r2, [pc, #276]	; (8003498 <HAL_GPIO_Init+0x2bc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00d      	beq.n	80033a2 <HAL_GPIO_Init+0x1c6>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a44      	ldr	r2, [pc, #272]	; (800349c <HAL_GPIO_Init+0x2c0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <HAL_GPIO_Init+0x1c2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a43      	ldr	r2, [pc, #268]	; (80034a0 <HAL_GPIO_Init+0x2c4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d101      	bne.n	800339a <HAL_GPIO_Init+0x1be>
 8003396:	2303      	movs	r3, #3
 8003398:	e006      	b.n	80033a8 <HAL_GPIO_Init+0x1cc>
 800339a:	2305      	movs	r3, #5
 800339c:	e004      	b.n	80033a8 <HAL_GPIO_Init+0x1cc>
 800339e:	2302      	movs	r3, #2
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_Init+0x1cc>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_GPIO_Init+0x1cc>
 80033a6:	2300      	movs	r3, #0
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	2103      	movs	r1, #3
 80033ac:	400a      	ands	r2, r1
 80033ae:	00d2      	lsls	r2, r2, #3
 80033b0:	4093      	lsls	r3, r2
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80033b8:	4936      	ldr	r1, [pc, #216]	; (8003494 <HAL_GPIO_Init+0x2b8>)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3318      	adds	r3, #24
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033c6:	4a33      	ldr	r2, [pc, #204]	; (8003494 <HAL_GPIO_Init+0x2b8>)
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	58d3      	ldr	r3, [r2, r3]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	43da      	mvns	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	025b      	lsls	r3, r3, #9
 80033e0:	4013      	ands	r3, r2
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033ec:	4929      	ldr	r1, [pc, #164]	; (8003494 <HAL_GPIO_Init+0x2b8>)
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80033f4:	4a27      	ldr	r2, [pc, #156]	; (8003494 <HAL_GPIO_Init+0x2b8>)
 80033f6:	2384      	movs	r3, #132	; 0x84
 80033f8:	58d3      	ldr	r3, [r2, r3]
 80033fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43da      	mvns	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	4013      	ands	r3, r2
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800341a:	491e      	ldr	r1, [pc, #120]	; (8003494 <HAL_GPIO_Init+0x2b8>)
 800341c:	2284      	movs	r2, #132	; 0x84
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003422:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <HAL_GPIO_Init+0x2b8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	43da      	mvns	r2, r3
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	2380      	movs	r3, #128	; 0x80
 8003438:	035b      	lsls	r3, r3, #13
 800343a:	4013      	ands	r3, r2
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <HAL_GPIO_Init+0x2b8>)
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_GPIO_Init+0x2b8>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43da      	mvns	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	039b      	lsls	r3, r3, #14
 8003464:	4013      	ands	r3, r2
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_GPIO_Init+0x2b8>)
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	3301      	adds	r3, #1
 800347a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	40da      	lsrs	r2, r3
 8003484:	1e13      	subs	r3, r2, #0
 8003486:	d000      	beq.n	800348a <HAL_GPIO_Init+0x2ae>
 8003488:	e6b0      	b.n	80031ec <HAL_GPIO_Init+0x10>
  }
}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b006      	add	sp, #24
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40021800 	.word	0x40021800
 8003498:	50000400 	.word	0x50000400
 800349c:	50000800 	.word	0x50000800
 80034a0:	50000c00 	.word	0x50000c00

080034a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	0008      	movs	r0, r1
 80034ae:	0011      	movs	r1, r2
 80034b0:	1cbb      	adds	r3, r7, #2
 80034b2:	1c02      	adds	r2, r0, #0
 80034b4:	801a      	strh	r2, [r3, #0]
 80034b6:	1c7b      	adds	r3, r7, #1
 80034b8:	1c0a      	adds	r2, r1, #0
 80034ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034bc:	1c7b      	adds	r3, r7, #1
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034c4:	1cbb      	adds	r3, r7, #2
 80034c6:	881a      	ldrh	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034cc:	e003      	b.n	80034d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ce:	1cbb      	adds	r3, r7, #2
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b002      	add	sp, #8
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e082      	b.n	80035f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2241      	movs	r2, #65	; 0x41
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d107      	bne.n	800350e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2240      	movs	r2, #64	; 0x40
 8003502:	2100      	movs	r1, #0
 8003504:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff fb41 	bl	8002b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2241      	movs	r2, #65	; 0x41
 8003512:	2124      	movs	r1, #36	; 0x24
 8003514:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	438a      	bics	r2, r1
 8003524:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4934      	ldr	r1, [pc, #208]	; (8003600 <HAL_I2C_Init+0x120>)
 8003530:	400a      	ands	r2, r1
 8003532:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4931      	ldr	r1, [pc, #196]	; (8003604 <HAL_I2C_Init+0x124>)
 8003540:	400a      	ands	r2, r1
 8003542:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d108      	bne.n	800355e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	0209      	lsls	r1, r1, #8
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	e007      	b.n	800356e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2184      	movs	r1, #132	; 0x84
 8003568:	0209      	lsls	r1, r1, #8
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d104      	bne.n	8003580 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	0112      	lsls	r2, r2, #4
 800357e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	491f      	ldr	r1, [pc, #124]	; (8003608 <HAL_I2C_Init+0x128>)
 800358c:	430a      	orrs	r2, r1
 800358e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	491a      	ldr	r1, [pc, #104]	; (8003604 <HAL_I2C_Init+0x124>)
 800359c:	400a      	ands	r2, r1
 800359e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69d9      	ldr	r1, [r3, #28]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2241      	movs	r2, #65	; 0x41
 80035e4:	2120      	movs	r1, #32
 80035e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2242      	movs	r2, #66	; 0x42
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	0018      	movs	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	f0ffffff 	.word	0xf0ffffff
 8003604:	ffff7fff 	.word	0xffff7fff
 8003608:	02008000 	.word	0x02008000

0800360c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b089      	sub	sp, #36	; 0x24
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	0008      	movs	r0, r1
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	0019      	movs	r1, r3
 800361a:	230a      	movs	r3, #10
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	1c02      	adds	r2, r0, #0
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	2308      	movs	r3, #8
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	1c0a      	adds	r2, r1, #0
 8003628:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2241      	movs	r2, #65	; 0x41
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d000      	beq.n	8003638 <HAL_I2C_Master_Transmit+0x2c>
 8003636:	e0e7      	b.n	8003808 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	5c9b      	ldrb	r3, [r3, r2]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_I2C_Master_Transmit+0x3a>
 8003642:	2302      	movs	r3, #2
 8003644:	e0e1      	b.n	800380a <HAL_I2C_Master_Transmit+0x1fe>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2240      	movs	r2, #64	; 0x40
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800364e:	f7ff fcb9 	bl	8002fc4 <HAL_GetTick>
 8003652:	0003      	movs	r3, r0
 8003654:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	0219      	lsls	r1, r3, #8
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2319      	movs	r3, #25
 8003662:	2201      	movs	r2, #1
 8003664:	f000 fb1e 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003668:	1e03      	subs	r3, r0, #0
 800366a:	d001      	beq.n	8003670 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0cc      	b.n	800380a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2241      	movs	r2, #65	; 0x41
 8003674:	2121      	movs	r1, #33	; 0x21
 8003676:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2242      	movs	r2, #66	; 0x42
 800367c:	2110      	movs	r1, #16
 800367e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2208      	movs	r2, #8
 8003690:	18ba      	adds	r2, r7, r2
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2bff      	cmp	r3, #255	; 0xff
 80036a4:	d911      	bls.n	80036ca <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	045c      	lsls	r4, r3, #17
 80036b6:	230a      	movs	r3, #10
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	8819      	ldrh	r1, [r3, #0]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	4b55      	ldr	r3, [pc, #340]	; (8003814 <HAL_I2C_Master_Transmit+0x208>)
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	0023      	movs	r3, r4
 80036c4:	f000 fc8e 	bl	8003fe4 <I2C_TransferConfig>
 80036c8:	e075      	b.n	80037b6 <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	049c      	lsls	r4, r3, #18
 80036de:	230a      	movs	r3, #10
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	8819      	ldrh	r1, [r3, #0]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <HAL_I2C_Master_Transmit+0x208>)
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	0023      	movs	r3, r4
 80036ec:	f000 fc7a 	bl	8003fe4 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80036f0:	e061      	b.n	80037b6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f000 fb12 	bl	8003d22 <I2C_WaitOnTXISFlagUntilTimeout>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d001      	beq.n	8003706 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e081      	b.n	800380a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	781a      	ldrb	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d03a      	beq.n	80037b6 <HAL_I2C_Master_Transmit+0x1aa>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	d136      	bne.n	80037b6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	0013      	movs	r3, r2
 8003752:	2200      	movs	r2, #0
 8003754:	2180      	movs	r1, #128	; 0x80
 8003756:	f000 faa5 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d001      	beq.n	8003762 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e053      	b.n	800380a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	2bff      	cmp	r3, #255	; 0xff
 800376a:	d911      	bls.n	8003790 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	22ff      	movs	r2, #255	; 0xff
 8003770:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003776:	b2da      	uxtb	r2, r3
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	045c      	lsls	r4, r3, #17
 800377c:	230a      	movs	r3, #10
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	8819      	ldrh	r1, [r3, #0]
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	0023      	movs	r3, r4
 800378a:	f000 fc2b 	bl	8003fe4 <I2C_TransferConfig>
 800378e:	e012      	b.n	80037b6 <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	049c      	lsls	r4, r3, #18
 80037a4:	230a      	movs	r3, #10
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	8819      	ldrh	r1, [r3, #0]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	2300      	movs	r3, #0
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	0023      	movs	r3, r4
 80037b2:	f000 fc17 	bl	8003fe4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d198      	bne.n	80036f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 faea 	bl	8003da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e01a      	b.n	800380a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2220      	movs	r2, #32
 80037da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	490c      	ldr	r1, [pc, #48]	; (8003818 <HAL_I2C_Master_Transmit+0x20c>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2241      	movs	r2, #65	; 0x41
 80037f0:	2120      	movs	r1, #32
 80037f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2242      	movs	r2, #66	; 0x42
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2240      	movs	r2, #64	; 0x40
 8003800:	2100      	movs	r1, #0
 8003802:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	0018      	movs	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	b007      	add	sp, #28
 8003810:	bd90      	pop	{r4, r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	80002000 	.word	0x80002000
 8003818:	fe00e800 	.word	0xfe00e800

0800381c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	0008      	movs	r0, r1
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	0019      	movs	r1, r3
 800382a:	230a      	movs	r3, #10
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	1c02      	adds	r2, r0, #0
 8003830:	801a      	strh	r2, [r3, #0]
 8003832:	2308      	movs	r3, #8
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	1c0a      	adds	r2, r1, #0
 8003838:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2241      	movs	r2, #65	; 0x41
 800383e:	5c9b      	ldrb	r3, [r3, r2]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	d000      	beq.n	8003848 <HAL_I2C_Master_Receive+0x2c>
 8003846:	e0e8      	b.n	8003a1a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2240      	movs	r2, #64	; 0x40
 800384c:	5c9b      	ldrb	r3, [r3, r2]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_I2C_Master_Receive+0x3a>
 8003852:	2302      	movs	r3, #2
 8003854:	e0e2      	b.n	8003a1c <HAL_I2C_Master_Receive+0x200>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2240      	movs	r2, #64	; 0x40
 800385a:	2101      	movs	r1, #1
 800385c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800385e:	f7ff fbb1 	bl	8002fc4 <HAL_GetTick>
 8003862:	0003      	movs	r3, r0
 8003864:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	0219      	lsls	r1, r3, #8
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2319      	movs	r3, #25
 8003872:	2201      	movs	r2, #1
 8003874:	f000 fa16 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003878:	1e03      	subs	r3, r0, #0
 800387a:	d001      	beq.n	8003880 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0cd      	b.n	8003a1c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2241      	movs	r2, #65	; 0x41
 8003884:	2122      	movs	r1, #34	; 0x22
 8003886:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2242      	movs	r2, #66	; 0x42
 800388c:	2110      	movs	r1, #16
 800388e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2208      	movs	r2, #8
 80038a0:	18ba      	adds	r2, r7, r2
 80038a2:	8812      	ldrh	r2, [r2, #0]
 80038a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2bff      	cmp	r3, #255	; 0xff
 80038b4:	d911      	bls.n	80038da <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	22ff      	movs	r2, #255	; 0xff
 80038ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	045c      	lsls	r4, r3, #17
 80038c6:	230a      	movs	r3, #10
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	8819      	ldrh	r1, [r3, #0]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	4b55      	ldr	r3, [pc, #340]	; (8003a24 <HAL_I2C_Master_Receive+0x208>)
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	0023      	movs	r3, r4
 80038d4:	f000 fb86 	bl	8003fe4 <I2C_TransferConfig>
 80038d8:	e076      	b.n	80039c8 <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	049c      	lsls	r4, r3, #18
 80038ee:	230a      	movs	r3, #10
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	8819      	ldrh	r1, [r3, #0]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_I2C_Master_Receive+0x208>)
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	0023      	movs	r3, r4
 80038fc:	f000 fb72 	bl	8003fe4 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003900:	e062      	b.n	80039c8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	0018      	movs	r0, r3
 800390a:	f000 fa85 	bl	8003e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e082      	b.n	8003a1c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d03a      	beq.n	80039c8 <HAL_I2C_Master_Receive+0x1ac>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	d136      	bne.n	80039c8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800395a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	0013      	movs	r3, r2
 8003964:	2200      	movs	r2, #0
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	f000 f99c 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 800396c:	1e03      	subs	r3, r0, #0
 800396e:	d001      	beq.n	8003974 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e053      	b.n	8003a1c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	2bff      	cmp	r3, #255	; 0xff
 800397c:	d911      	bls.n	80039a2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	22ff      	movs	r2, #255	; 0xff
 8003982:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	b2da      	uxtb	r2, r3
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	045c      	lsls	r4, r3, #17
 800398e:	230a      	movs	r3, #10
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	8819      	ldrh	r1, [r3, #0]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	2300      	movs	r3, #0
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	0023      	movs	r3, r4
 800399c:	f000 fb22 	bl	8003fe4 <I2C_TransferConfig>
 80039a0:	e012      	b.n	80039c8 <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	049c      	lsls	r4, r3, #18
 80039b6:	230a      	movs	r3, #10
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	8819      	ldrh	r1, [r3, #0]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	2300      	movs	r3, #0
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	0023      	movs	r3, r4
 80039c4:	f000 fb0e 	bl	8003fe4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d197      	bne.n	8003902 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 f9e1 	bl	8003da0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e01a      	b.n	8003a1c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2220      	movs	r2, #32
 80039ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	490b      	ldr	r1, [pc, #44]	; (8003a28 <HAL_I2C_Master_Receive+0x20c>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2241      	movs	r2, #65	; 0x41
 8003a02:	2120      	movs	r1, #32
 8003a04:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2242      	movs	r2, #66	; 0x42
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2240      	movs	r2, #64	; 0x40
 8003a12:	2100      	movs	r1, #0
 8003a14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003a1a:	2302      	movs	r3, #2
  }
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b007      	add	sp, #28
 8003a22:	bd90      	pop	{r4, r7, pc}
 8003a24:	80002400 	.word	0x80002400
 8003a28:	fe00e800 	.word	0xfe00e800

08003a2c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                           uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	230a      	movs	r3, #10
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	1c0a      	adds	r2, r1, #0
 8003a3e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2241      	movs	r2, #65	; 0x41
 8003a48:	5c9b      	ldrb	r3, [r3, r2]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d000      	beq.n	8003a52 <HAL_I2C_IsDeviceReady+0x26>
 8003a50:	e0fe      	b.n	8003c50 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699a      	ldr	r2, [r3, #24]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	021b      	lsls	r3, r3, #8
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d101      	bne.n	8003a6a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
 8003a68:	e0f3      	b.n	8003c52 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	5c9b      	ldrb	r3, [r3, r2]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_I2C_IsDeviceReady+0x4c>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e0ec      	b.n	8003c52 <HAL_I2C_IsDeviceReady+0x226>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2240      	movs	r2, #64	; 0x40
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2241      	movs	r2, #65	; 0x41
 8003a84:	2124      	movs	r1, #36	; 0x24
 8003a86:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_I2C_IsDeviceReady+0x7a>
 8003a96:	230a      	movs	r3, #10
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	059b      	lsls	r3, r3, #22
 8003a9e:	0d9b      	lsrs	r3, r3, #22
 8003aa0:	4a6e      	ldr	r2, [pc, #440]	; (8003c5c <HAL_I2C_IsDeviceReady+0x230>)
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	e007      	b.n	8003ab6 <HAL_I2C_IsDeviceReady+0x8a>
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	059b      	lsls	r3, r3, #22
 8003aae:	0d9b      	lsrs	r3, r3, #22
 8003ab0:	22a0      	movs	r2, #160	; 0xa0
 8003ab2:	0192      	lsls	r2, r2, #6
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003abc:	f7ff fa82 	bl	8002fc4 <HAL_GetTick>
 8003ac0:	0003      	movs	r3, r0
 8003ac2:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2220      	movs	r2, #32
 8003acc:	4013      	ands	r3, r2
 8003ace:	3b20      	subs	r3, #32
 8003ad0:	425a      	negs	r2, r3
 8003ad2:	4153      	adcs	r3, r2
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	231f      	movs	r3, #31
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2210      	movs	r2, #16
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	3b10      	subs	r3, #16
 8003ae8:	425a      	negs	r2, r3
 8003aea:	4153      	adcs	r3, r2
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	231e      	movs	r3, #30
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003af4:	e035      	b.n	8003b62 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	d01a      	beq.n	8003b32 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003afc:	f7ff fa62 	bl	8002fc4 <HAL_GetTick>
 8003b00:	0002      	movs	r2, r0
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d302      	bcc.n	8003b12 <HAL_I2C_IsDeviceReady+0xe6>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10f      	bne.n	8003b32 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2241      	movs	r2, #65	; 0x41
 8003b16:	2120      	movs	r1, #32
 8003b18:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	2220      	movs	r2, #32
 8003b20:	431a      	orrs	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2240      	movs	r2, #64	; 0x40
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e08f      	b.n	8003c52 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	3b20      	subs	r3, #32
 8003b3e:	425a      	negs	r2, r3
 8003b40:	4153      	adcs	r3, r2
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	231f      	movs	r3, #31
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2210      	movs	r2, #16
 8003b52:	4013      	ands	r3, r2
 8003b54:	3b10      	subs	r3, #16
 8003b56:	425a      	negs	r2, r3
 8003b58:	4153      	adcs	r3, r2
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	231e      	movs	r3, #30
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003b62:	231f      	movs	r3, #31
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <HAL_I2C_IsDeviceReady+0x14a>
 8003b6c:	231e      	movs	r3, #30
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0bf      	beq.n	8003af6 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d01a      	beq.n	8003bba <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2120      	movs	r1, #32
 8003b92:	f000 f887 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003b96:	1e03      	subs	r3, r0, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e059      	b.n	8003c52 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2241      	movs	r2, #65	; 0x41
 8003baa:	2120      	movs	r1, #32
 8003bac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e04b      	b.n	8003c52 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	0013      	movs	r3, r2
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	f000 f86c 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003bcc:	1e03      	subs	r3, r0, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e03e      	b.n	8003c52 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2210      	movs	r2, #16
 8003bda:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2220      	movs	r2, #32
 8003be2:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d119      	bne.n	8003c20 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2180      	movs	r1, #128	; 0x80
 8003bf8:	01c9      	lsls	r1, r1, #7
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	0013      	movs	r3, r2
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2120      	movs	r1, #32
 8003c0c:	f000 f84a 	bl	8003ca4 <I2C_WaitOnFlagUntilTimeout>
 8003c10:	1e03      	subs	r3, r0, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e01c      	b.n	8003c52 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	3301      	adds	r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d900      	bls.n	8003c30 <HAL_I2C_IsDeviceReady+0x204>
 8003c2e:	e72e      	b.n	8003a8e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2241      	movs	r2, #65	; 0x41
 8003c34:	2120      	movs	r1, #32
 8003c36:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2240      	movs	r2, #64	; 0x40
 8003c48:	2100      	movs	r1, #0
 8003c4a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b008      	add	sp, #32
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	02002000 	.word	0x02002000

08003c60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d103      	bne.n	8003c7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2201      	movs	r2, #1
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d007      	beq.n	8003c9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2101      	movs	r1, #1
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	619a      	str	r2, [r3, #24]
  }
}
 8003c9c:	46c0      	nop			; (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b002      	add	sp, #8
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	1dfb      	adds	r3, r7, #7
 8003cb2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb4:	e021      	b.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	d01e      	beq.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cbc:	f7ff f982 	bl	8002fc4 <HAL_GetTick>
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d302      	bcc.n	8003cd2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d113      	bne.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2241      	movs	r2, #65	; 0x41
 8003ce2:	2120      	movs	r1, #32
 8003ce4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2242      	movs	r2, #66	; 0x42
 8003cea:	2100      	movs	r1, #0
 8003cec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2240      	movs	r2, #64	; 0x40
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e00f      	b.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	425a      	negs	r2, r3
 8003d0a:	4153      	adcs	r3, r2
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	001a      	movs	r2, r3
 8003d10:	1dfb      	adds	r3, r7, #7
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d0ce      	beq.n	8003cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b004      	add	sp, #16
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d2e:	e02b      	b.n	8003d88 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 f8da 	bl	8003ef0 <I2C_IsAcknowledgeFailed>
 8003d3c:	1e03      	subs	r3, r0, #0
 8003d3e:	d001      	beq.n	8003d44 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e029      	b.n	8003d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	3301      	adds	r3, #1
 8003d48:	d01e      	beq.n	8003d88 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7ff f93b 	bl	8002fc4 <HAL_GetTick>
 8003d4e:	0002      	movs	r2, r0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d113      	bne.n	8003d88 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	2220      	movs	r2, #32
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2241      	movs	r2, #65	; 0x41
 8003d70:	2120      	movs	r1, #32
 8003d72:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2242      	movs	r2, #66	; 0x42
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2240      	movs	r2, #64	; 0x40
 8003d80:	2100      	movs	r1, #0
 8003d82:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e007      	b.n	8003d98 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d1cc      	bne.n	8003d30 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b004      	add	sp, #16
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dac:	e028      	b.n	8003e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	0018      	movs	r0, r3
 8003db6:	f000 f89b 	bl	8003ef0 <I2C_IsAcknowledgeFailed>
 8003dba:	1e03      	subs	r3, r0, #0
 8003dbc:	d001      	beq.n	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e026      	b.n	8003e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc2:	f7ff f8ff 	bl	8002fc4 <HAL_GetTick>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d302      	bcc.n	8003dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d113      	bne.n	8003e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	2220      	movs	r2, #32
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2241      	movs	r2, #65	; 0x41
 8003de8:	2120      	movs	r1, #32
 8003dea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2242      	movs	r2, #66	; 0x42
 8003df0:	2100      	movs	r1, #0
 8003df2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	2100      	movs	r1, #0
 8003dfa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e007      	b.n	8003e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2220      	movs	r2, #32
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d1cf      	bne.n	8003dae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	0018      	movs	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b004      	add	sp, #16
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e24:	e055      	b.n	8003ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f000 f85f 	bl	8003ef0 <I2C_IsAcknowledgeFailed>
 8003e32:	1e03      	subs	r3, r0, #0
 8003e34:	d001      	beq.n	8003e3a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e053      	b.n	8003ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2220      	movs	r2, #32
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d129      	bne.n	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d105      	bne.n	8003e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e03f      	b.n	8003ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2220      	movs	r2, #32
 8003e68:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	491d      	ldr	r1, [pc, #116]	; (8003eec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003e76:	400a      	ands	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2241      	movs	r2, #65	; 0x41
 8003e84:	2120      	movs	r1, #32
 8003e86:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2242      	movs	r2, #66	; 0x42
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2240      	movs	r2, #64	; 0x40
 8003e94:	2100      	movs	r1, #0
 8003e96:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e022      	b.n	8003ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9c:	f7ff f892 	bl	8002fc4 <HAL_GetTick>
 8003ea0:	0002      	movs	r2, r0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d302      	bcc.n	8003eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2241      	movs	r2, #65	; 0x41
 8003ec2:	2120      	movs	r1, #32
 8003ec4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2240      	movs	r2, #64	; 0x40
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e007      	b.n	8003ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d1a2      	bne.n	8003e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b004      	add	sp, #16
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	fe00e800 	.word	0xfe00e800

08003ef0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2210      	movs	r2, #16
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d164      	bne.n	8003fd4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	049b      	lsls	r3, r3, #18
 8003f14:	401a      	ands	r2, r3
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	049b      	lsls	r3, r3, #18
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d02b      	beq.n	8003f76 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2180      	movs	r1, #128	; 0x80
 8003f2a:	01c9      	lsls	r1, r1, #7
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f30:	e021      	b.n	8003f76 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	3301      	adds	r3, #1
 8003f36:	d01e      	beq.n	8003f76 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f38:	f7ff f844 	bl	8002fc4 <HAL_GetTick>
 8003f3c:	0002      	movs	r2, r0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d302      	bcc.n	8003f4e <I2C_IsAcknowledgeFailed+0x5e>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d113      	bne.n	8003f76 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	2220      	movs	r2, #32
 8003f54:	431a      	orrs	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2241      	movs	r2, #65	; 0x41
 8003f5e:	2120      	movs	r1, #32
 8003f60:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2242      	movs	r2, #66	; 0x42
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2240      	movs	r2, #64	; 0x40
 8003f6e:	2100      	movs	r1, #0
 8003f70:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e02f      	b.n	8003fd6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d1d6      	bne.n	8003f32 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2210      	movs	r2, #16
 8003f8a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2220      	movs	r2, #32
 8003f92:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7ff fe62 	bl	8003c60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	490e      	ldr	r1, [pc, #56]	; (8003fe0 <I2C_IsAcknowledgeFailed+0xf0>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2241      	movs	r2, #65	; 0x41
 8003fbc:	2120      	movs	r1, #32
 8003fbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2242      	movs	r2, #66	; 0x42
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2240      	movs	r2, #64	; 0x40
 8003fcc:	2100      	movs	r1, #0
 8003fce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b004      	add	sp, #16
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	fe00e800 	.word	0xfe00e800

08003fe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	0008      	movs	r0, r1
 8003fee:	0011      	movs	r1, r2
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	240a      	movs	r4, #10
 8003ff4:	193b      	adds	r3, r7, r4
 8003ff6:	1c02      	adds	r2, r0, #0
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	2009      	movs	r0, #9
 8003ffc:	183b      	adds	r3, r7, r0
 8003ffe:	1c0a      	adds	r2, r1, #0
 8004000:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	0d51      	lsrs	r1, r2, #21
 800400c:	2280      	movs	r2, #128	; 0x80
 800400e:	00d2      	lsls	r2, r2, #3
 8004010:	400a      	ands	r2, r1
 8004012:	490e      	ldr	r1, [pc, #56]	; (800404c <I2C_TransferConfig+0x68>)
 8004014:	430a      	orrs	r2, r1
 8004016:	43d2      	mvns	r2, r2
 8004018:	401a      	ands	r2, r3
 800401a:	0011      	movs	r1, r2
 800401c:	193b      	adds	r3, r7, r4
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	059b      	lsls	r3, r3, #22
 8004022:	0d9a      	lsrs	r2, r3, #22
 8004024:	183b      	adds	r3, r7, r0
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	0418      	lsls	r0, r3, #16
 800402a:	23ff      	movs	r3, #255	; 0xff
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	4003      	ands	r3, r0
 8004030:	431a      	orrs	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	431a      	orrs	r2, r3
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	431a      	orrs	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b005      	add	sp, #20
 8004048:	bd90      	pop	{r4, r7, pc}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	03ff63ff 	.word	0x03ff63ff

08004050 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2241      	movs	r2, #65	; 0x41
 800405e:	5c9b      	ldrb	r3, [r3, r2]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b20      	cmp	r3, #32
 8004064:	d138      	bne.n	80040d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2240      	movs	r2, #64	; 0x40
 800406a:	5c9b      	ldrb	r3, [r3, r2]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004070:	2302      	movs	r3, #2
 8004072:	e032      	b.n	80040da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2240      	movs	r2, #64	; 0x40
 8004078:	2101      	movs	r1, #1
 800407a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2241      	movs	r2, #65	; 0x41
 8004080:	2124      	movs	r1, #36	; 0x24
 8004082:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2101      	movs	r1, #1
 8004090:	438a      	bics	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4911      	ldr	r1, [pc, #68]	; (80040e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6819      	ldr	r1, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2101      	movs	r1, #1
 80040c0:	430a      	orrs	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2241      	movs	r2, #65	; 0x41
 80040c8:	2120      	movs	r1, #32
 80040ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2240      	movs	r2, #64	; 0x40
 80040d0:	2100      	movs	r1, #0
 80040d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e000      	b.n	80040da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
  }
}
 80040da:	0018      	movs	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	b002      	add	sp, #8
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	ffffefff 	.word	0xffffefff

080040e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2241      	movs	r2, #65	; 0x41
 80040f6:	5c9b      	ldrb	r3, [r3, r2]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d139      	bne.n	8004172 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2240      	movs	r2, #64	; 0x40
 8004102:	5c9b      	ldrb	r3, [r3, r2]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004108:	2302      	movs	r3, #2
 800410a:	e033      	b.n	8004174 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2240      	movs	r2, #64	; 0x40
 8004110:	2101      	movs	r1, #1
 8004112:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2241      	movs	r2, #65	; 0x41
 8004118:	2124      	movs	r1, #36	; 0x24
 800411a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2101      	movs	r1, #1
 8004128:	438a      	bics	r2, r1
 800412a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a11      	ldr	r2, [pc, #68]	; (800417c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004138:	4013      	ands	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2241      	movs	r2, #65	; 0x41
 8004162:	2120      	movs	r1, #32
 8004164:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2240      	movs	r2, #64	; 0x40
 800416a:	2100      	movs	r1, #0
 800416c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004172:	2302      	movs	r3, #2
  }
}
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	b004      	add	sp, #16
 800417a:	bd80      	pop	{r7, pc}
 800417c:	fffff0ff 	.word	0xfffff0ff

08004180 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a19      	ldr	r2, [pc, #100]	; (80041f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800418e:	4013      	ands	r3, r2
 8004190:	0019      	movs	r1, r3
 8004192:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d11f      	bne.n	80041e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	0013      	movs	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	189b      	adds	r3, r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4912      	ldr	r1, [pc, #72]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80041b2:	0018      	movs	r0, r3
 80041b4:	f7fb ffb6 	bl	8000124 <__udivsi3>
 80041b8:	0003      	movs	r3, r0
 80041ba:	3301      	adds	r3, #1
 80041bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041be:	e008      	b.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	e001      	b.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e009      	b.n	80041e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	401a      	ands	r2, r3
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0ed      	beq.n	80041c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b004      	add	sp, #16
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	40007000 	.word	0x40007000
 80041f4:	fffff9ff 	.word	0xfffff9ff
 80041f8:	20000010 	.word	0x20000010
 80041fc:	000f4240 	.word	0x000f4240

08004200 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	23e0      	movs	r3, #224	; 0xe0
 800420a:	01db      	lsls	r3, r3, #7
 800420c:	4013      	ands	r3, r2
}
 800420e:	0018      	movs	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000

08004218 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e2f9      	b.n	800481e <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2201      	movs	r2, #1
 8004230:	4013      	ands	r3, r2
 8004232:	d100      	bne.n	8004236 <HAL_RCC_OscConfig+0x1e>
 8004234:	e07c      	b.n	8004330 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004236:	4bc3      	ldr	r3, [pc, #780]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2238      	movs	r2, #56	; 0x38
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004240:	4bc0      	ldr	r3, [pc, #768]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2203      	movs	r2, #3
 8004246:	4013      	ands	r3, r2
 8004248:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b10      	cmp	r3, #16
 800424e:	d102      	bne.n	8004256 <HAL_RCC_OscConfig+0x3e>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b03      	cmp	r3, #3
 8004254:	d002      	beq.n	800425c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d10b      	bne.n	8004274 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425c:	4bb9      	ldr	r3, [pc, #740]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	029b      	lsls	r3, r3, #10
 8004264:	4013      	ands	r3, r2
 8004266:	d062      	beq.n	800432e <HAL_RCC_OscConfig+0x116>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d15e      	bne.n	800432e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e2d4      	b.n	800481e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	025b      	lsls	r3, r3, #9
 800427c:	429a      	cmp	r2, r3
 800427e:	d107      	bne.n	8004290 <HAL_RCC_OscConfig+0x78>
 8004280:	4bb0      	ldr	r3, [pc, #704]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4baf      	ldr	r3, [pc, #700]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004286:	2180      	movs	r1, #128	; 0x80
 8004288:	0249      	lsls	r1, r1, #9
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e020      	b.n	80042d2 <HAL_RCC_OscConfig+0xba>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	23a0      	movs	r3, #160	; 0xa0
 8004296:	02db      	lsls	r3, r3, #11
 8004298:	429a      	cmp	r2, r3
 800429a:	d10e      	bne.n	80042ba <HAL_RCC_OscConfig+0xa2>
 800429c:	4ba9      	ldr	r3, [pc, #676]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4ba8      	ldr	r3, [pc, #672]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80042a2:	2180      	movs	r1, #128	; 0x80
 80042a4:	02c9      	lsls	r1, r1, #11
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	4ba6      	ldr	r3, [pc, #664]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4ba5      	ldr	r3, [pc, #660]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	0249      	lsls	r1, r1, #9
 80042b4:	430a      	orrs	r2, r1
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	e00b      	b.n	80042d2 <HAL_RCC_OscConfig+0xba>
 80042ba:	4ba2      	ldr	r3, [pc, #648]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4ba1      	ldr	r3, [pc, #644]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80042c0:	49a1      	ldr	r1, [pc, #644]	; (8004548 <HAL_RCC_OscConfig+0x330>)
 80042c2:	400a      	ands	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	4b9f      	ldr	r3, [pc, #636]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b9e      	ldr	r3, [pc, #632]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80042cc:	499f      	ldr	r1, [pc, #636]	; (800454c <HAL_RCC_OscConfig+0x334>)
 80042ce:	400a      	ands	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d014      	beq.n	8004304 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fe fe73 	bl	8002fc4 <HAL_GetTick>
 80042de:	0003      	movs	r3, r0
 80042e0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe fe6e 	bl	8002fc4 <HAL_GetTick>
 80042e8:	0002      	movs	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e293      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f6:	4b93      	ldr	r3, [pc, #588]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	029b      	lsls	r3, r3, #10
 80042fe:	4013      	ands	r3, r2
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0xcc>
 8004302:	e015      	b.n	8004330 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fe fe5e 	bl	8002fc4 <HAL_GetTick>
 8004308:	0003      	movs	r3, r0
 800430a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800430e:	f7fe fe59 	bl	8002fc4 <HAL_GetTick>
 8004312:	0002      	movs	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b64      	cmp	r3, #100	; 0x64
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e27e      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004320:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	029b      	lsls	r3, r3, #10
 8004328:	4013      	ands	r3, r2
 800432a:	d1f0      	bne.n	800430e <HAL_RCC_OscConfig+0xf6>
 800432c:	e000      	b.n	8004330 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800432e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2202      	movs	r2, #2
 8004336:	4013      	ands	r3, r2
 8004338:	d100      	bne.n	800433c <HAL_RCC_OscConfig+0x124>
 800433a:	e099      	b.n	8004470 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2238      	movs	r2, #56	; 0x38
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004346:	4b7f      	ldr	r3, [pc, #508]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2203      	movs	r2, #3
 800434c:	4013      	ands	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b10      	cmp	r3, #16
 8004354:	d102      	bne.n	800435c <HAL_RCC_OscConfig+0x144>
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d002      	beq.n	8004362 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d135      	bne.n	80043ce <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004362:	4b78      	ldr	r3, [pc, #480]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4013      	ands	r3, r2
 800436c:	d005      	beq.n	800437a <HAL_RCC_OscConfig+0x162>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e251      	b.n	800481e <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437a:	4b72      	ldr	r3, [pc, #456]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4a74      	ldr	r2, [pc, #464]	; (8004550 <HAL_RCC_OscConfig+0x338>)
 8004380:	4013      	ands	r3, r2
 8004382:	0019      	movs	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	021a      	lsls	r2, r3, #8
 800438a:	4b6e      	ldr	r3, [pc, #440]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d112      	bne.n	80043bc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004396:	4b6b      	ldr	r3, [pc, #428]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a6e      	ldr	r2, [pc, #440]	; (8004554 <HAL_RCC_OscConfig+0x33c>)
 800439c:	4013      	ands	r3, r2
 800439e:	0019      	movs	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	4b67      	ldr	r3, [pc, #412]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80043a6:	430a      	orrs	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80043aa:	4b66      	ldr	r3, [pc, #408]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	0adb      	lsrs	r3, r3, #11
 80043b0:	2207      	movs	r2, #7
 80043b2:	4013      	ands	r3, r2
 80043b4:	4a68      	ldr	r2, [pc, #416]	; (8004558 <HAL_RCC_OscConfig+0x340>)
 80043b6:	40da      	lsrs	r2, r3
 80043b8:	4b68      	ldr	r3, [pc, #416]	; (800455c <HAL_RCC_OscConfig+0x344>)
 80043ba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043bc:	4b68      	ldr	r3, [pc, #416]	; (8004560 <HAL_RCC_OscConfig+0x348>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0018      	movs	r0, r3
 80043c2:	f7fe fda3 	bl	8002f0c <HAL_InitTick>
 80043c6:	1e03      	subs	r3, r0, #0
 80043c8:	d051      	beq.n	800446e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e227      	b.n	800481e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d030      	beq.n	8004438 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043d6:	4b5b      	ldr	r3, [pc, #364]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a5e      	ldr	r2, [pc, #376]	; (8004554 <HAL_RCC_OscConfig+0x33c>)
 80043dc:	4013      	ands	r3, r2
 80043de:	0019      	movs	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	4b57      	ldr	r3, [pc, #348]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80043e6:	430a      	orrs	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043ea:	4b56      	ldr	r3, [pc, #344]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b55      	ldr	r3, [pc, #340]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80043f0:	2180      	movs	r1, #128	; 0x80
 80043f2:	0049      	lsls	r1, r1, #1
 80043f4:	430a      	orrs	r2, r1
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fe fde4 	bl	8002fc4 <HAL_GetTick>
 80043fc:	0003      	movs	r3, r0
 80043fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004402:	f7fe fddf 	bl	8002fc4 <HAL_GetTick>
 8004406:	0002      	movs	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e204      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004414:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4013      	ands	r3, r2
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004420:	4b48      	ldr	r3, [pc, #288]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a4a      	ldr	r2, [pc, #296]	; (8004550 <HAL_RCC_OscConfig+0x338>)
 8004426:	4013      	ands	r3, r2
 8004428:	0019      	movs	r1, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	021a      	lsls	r2, r3, #8
 8004430:	4b44      	ldr	r3, [pc, #272]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	e01b      	b.n	8004470 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b41      	ldr	r3, [pc, #260]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 800443e:	4949      	ldr	r1, [pc, #292]	; (8004564 <HAL_RCC_OscConfig+0x34c>)
 8004440:	400a      	ands	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe fdbe 	bl	8002fc4 <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444e:	f7fe fdb9 	bl	8002fc4 <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e1de      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004460:	4b38      	ldr	r3, [pc, #224]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4013      	ands	r3, r2
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x236>
 800446c:	e000      	b.n	8004470 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800446e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2208      	movs	r2, #8
 8004476:	4013      	ands	r3, r2
 8004478:	d047      	beq.n	800450a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2238      	movs	r2, #56	; 0x38
 8004480:	4013      	ands	r3, r2
 8004482:	2b18      	cmp	r3, #24
 8004484:	d10a      	bne.n	800449c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004486:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448a:	2202      	movs	r2, #2
 800448c:	4013      	ands	r3, r2
 800448e:	d03c      	beq.n	800450a <HAL_RCC_OscConfig+0x2f2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d138      	bne.n	800450a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e1c0      	b.n	800481e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d019      	beq.n	80044d8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80044a4:	4b27      	ldr	r3, [pc, #156]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80044a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044a8:	4b26      	ldr	r3, [pc, #152]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80044aa:	2101      	movs	r1, #1
 80044ac:	430a      	orrs	r2, r1
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b0:	f7fe fd88 	bl	8002fc4 <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ba:	f7fe fd83 	bl	8002fc4 <HAL_GetTick>
 80044be:	0002      	movs	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e1a8      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044cc:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80044ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d0:	2202      	movs	r2, #2
 80044d2:	4013      	ands	r3, r2
 80044d4:	d0f1      	beq.n	80044ba <HAL_RCC_OscConfig+0x2a2>
 80044d6:	e018      	b.n	800450a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80044da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 80044de:	2101      	movs	r1, #1
 80044e0:	438a      	bics	r2, r1
 80044e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fe fd6e 	bl	8002fc4 <HAL_GetTick>
 80044e8:	0003      	movs	r3, r0
 80044ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fe fd69 	bl	8002fc4 <HAL_GetTick>
 80044f2:	0002      	movs	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e18e      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004500:	4b10      	ldr	r3, [pc, #64]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004504:	2202      	movs	r2, #2
 8004506:	4013      	ands	r3, r2
 8004508:	d1f1      	bne.n	80044ee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2204      	movs	r2, #4
 8004510:	4013      	ands	r3, r2
 8004512:	d100      	bne.n	8004516 <HAL_RCC_OscConfig+0x2fe>
 8004514:	e0c6      	b.n	80046a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004516:	231f      	movs	r3, #31
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	2238      	movs	r2, #56	; 0x38
 8004524:	4013      	ands	r3, r2
 8004526:	2b20      	cmp	r3, #32
 8004528:	d11e      	bne.n	8004568 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCC_OscConfig+0x32c>)
 800452c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452e:	2202      	movs	r2, #2
 8004530:	4013      	ands	r3, r2
 8004532:	d100      	bne.n	8004536 <HAL_RCC_OscConfig+0x31e>
 8004534:	e0b6      	b.n	80046a4 <HAL_RCC_OscConfig+0x48c>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d000      	beq.n	8004540 <HAL_RCC_OscConfig+0x328>
 800453e:	e0b1      	b.n	80046a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e16c      	b.n	800481e <HAL_RCC_OscConfig+0x606>
 8004544:	40021000 	.word	0x40021000
 8004548:	fffeffff 	.word	0xfffeffff
 800454c:	fffbffff 	.word	0xfffbffff
 8004550:	ffff80ff 	.word	0xffff80ff
 8004554:	ffffc7ff 	.word	0xffffc7ff
 8004558:	00f42400 	.word	0x00f42400
 800455c:	20000010 	.word	0x20000010
 8004560:	20000014 	.word	0x20000014
 8004564:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004568:	4baf      	ldr	r3, [pc, #700]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800456a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	055b      	lsls	r3, r3, #21
 8004570:	4013      	ands	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_RCC_OscConfig+0x360>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x362>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d011      	beq.n	80045a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	4baa      	ldr	r3, [pc, #680]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004582:	4ba9      	ldr	r3, [pc, #676]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0549      	lsls	r1, r1, #21
 8004588:	430a      	orrs	r2, r1
 800458a:	63da      	str	r2, [r3, #60]	; 0x3c
 800458c:	4ba6      	ldr	r3, [pc, #664]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800458e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	055b      	lsls	r3, r3, #21
 8004594:	4013      	ands	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800459a:	231f      	movs	r3, #31
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a2:	4ba2      	ldr	r3, [pc, #648]	; (800482c <HAL_RCC_OscConfig+0x614>)
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4013      	ands	r3, r2
 80045ac:	d11a      	bne.n	80045e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ae:	4b9f      	ldr	r3, [pc, #636]	; (800482c <HAL_RCC_OscConfig+0x614>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4b9e      	ldr	r3, [pc, #632]	; (800482c <HAL_RCC_OscConfig+0x614>)
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	0049      	lsls	r1, r1, #1
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80045bc:	f7fe fd02 	bl	8002fc4 <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c6:	f7fe fcfd 	bl	8002fc4 <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e122      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d8:	4b94      	ldr	r3, [pc, #592]	; (800482c <HAL_RCC_OscConfig+0x614>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4013      	ands	r3, r2
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d106      	bne.n	80045fa <HAL_RCC_OscConfig+0x3e2>
 80045ec:	4b8e      	ldr	r3, [pc, #568]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 80045ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045f0:	4b8d      	ldr	r3, [pc, #564]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 80045f2:	2101      	movs	r1, #1
 80045f4:	430a      	orrs	r2, r1
 80045f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045f8:	e01c      	b.n	8004634 <HAL_RCC_OscConfig+0x41c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0x404>
 8004602:	4b89      	ldr	r3, [pc, #548]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004604:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004606:	4b88      	ldr	r3, [pc, #544]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004608:	2104      	movs	r1, #4
 800460a:	430a      	orrs	r2, r1
 800460c:	65da      	str	r2, [r3, #92]	; 0x5c
 800460e:	4b86      	ldr	r3, [pc, #536]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004610:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004612:	4b85      	ldr	r3, [pc, #532]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004614:	2101      	movs	r1, #1
 8004616:	430a      	orrs	r2, r1
 8004618:	65da      	str	r2, [r3, #92]	; 0x5c
 800461a:	e00b      	b.n	8004634 <HAL_RCC_OscConfig+0x41c>
 800461c:	4b82      	ldr	r3, [pc, #520]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800461e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004620:	4b81      	ldr	r3, [pc, #516]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004622:	2101      	movs	r1, #1
 8004624:	438a      	bics	r2, r1
 8004626:	65da      	str	r2, [r3, #92]	; 0x5c
 8004628:	4b7f      	ldr	r3, [pc, #508]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800462a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800462c:	4b7e      	ldr	r3, [pc, #504]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800462e:	2104      	movs	r1, #4
 8004630:	438a      	bics	r2, r1
 8004632:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d014      	beq.n	8004666 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fe fcc2 	bl	8002fc4 <HAL_GetTick>
 8004640:	0003      	movs	r3, r0
 8004642:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004644:	e009      	b.n	800465a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004646:	f7fe fcbd 	bl	8002fc4 <HAL_GetTick>
 800464a:	0002      	movs	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	4a77      	ldr	r2, [pc, #476]	; (8004830 <HAL_RCC_OscConfig+0x618>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e0e1      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465a:	4b73      	ldr	r3, [pc, #460]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	2202      	movs	r2, #2
 8004660:	4013      	ands	r3, r2
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x42e>
 8004664:	e013      	b.n	800468e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fe fcad 	bl	8002fc4 <HAL_GetTick>
 800466a:	0003      	movs	r3, r0
 800466c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800466e:	e009      	b.n	8004684 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fe fca8 	bl	8002fc4 <HAL_GetTick>
 8004674:	0002      	movs	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	4a6d      	ldr	r2, [pc, #436]	; (8004830 <HAL_RCC_OscConfig+0x618>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e0cc      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004684:	4b68      	ldr	r3, [pc, #416]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	2202      	movs	r2, #2
 800468a:	4013      	ands	r3, r2
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800468e:	231f      	movs	r3, #31
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d105      	bne.n	80046a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004698:	4b63      	ldr	r3, [pc, #396]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800469a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800469c:	4b62      	ldr	r3, [pc, #392]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800469e:	4965      	ldr	r1, [pc, #404]	; (8004834 <HAL_RCC_OscConfig+0x61c>)
 80046a0:	400a      	ands	r2, r1
 80046a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d100      	bne.n	80046ae <HAL_RCC_OscConfig+0x496>
 80046ac:	e0b6      	b.n	800481c <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ae:	4b5e      	ldr	r3, [pc, #376]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2238      	movs	r2, #56	; 0x38
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d100      	bne.n	80046bc <HAL_RCC_OscConfig+0x4a4>
 80046ba:	e07e      	b.n	80047ba <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d153      	bne.n	800476c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c4:	4b58      	ldr	r3, [pc, #352]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b57      	ldr	r3, [pc, #348]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 80046ca:	495b      	ldr	r1, [pc, #364]	; (8004838 <HAL_RCC_OscConfig+0x620>)
 80046cc:	400a      	ands	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fe fc78 	bl	8002fc4 <HAL_GetTick>
 80046d4:	0003      	movs	r3, r0
 80046d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046da:	f7fe fc73 	bl	8002fc4 <HAL_GetTick>
 80046de:	0002      	movs	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e098      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ec:	4b4e      	ldr	r3, [pc, #312]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	049b      	lsls	r3, r3, #18
 80046f4:	4013      	ands	r3, r2
 80046f6:	d1f0      	bne.n	80046da <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046f8:	4b4b      	ldr	r3, [pc, #300]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a4f      	ldr	r2, [pc, #316]	; (800483c <HAL_RCC_OscConfig+0x624>)
 80046fe:	4013      	ands	r3, r2
 8004700:	0019      	movs	r1, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1a      	ldr	r2, [r3, #32]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	431a      	orrs	r2, r3
 8004720:	4b41      	ldr	r3, [pc, #260]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004722:	430a      	orrs	r2, r1
 8004724:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004726:	4b40      	ldr	r3, [pc, #256]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b3f      	ldr	r3, [pc, #252]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800472c:	2180      	movs	r1, #128	; 0x80
 800472e:	0449      	lsls	r1, r1, #17
 8004730:	430a      	orrs	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004734:	4b3c      	ldr	r3, [pc, #240]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	4b3b      	ldr	r3, [pc, #236]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800473a:	2180      	movs	r1, #128	; 0x80
 800473c:	0549      	lsls	r1, r1, #21
 800473e:	430a      	orrs	r2, r1
 8004740:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004742:	f7fe fc3f 	bl	8002fc4 <HAL_GetTick>
 8004746:	0003      	movs	r3, r0
 8004748:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fe fc3a 	bl	8002fc4 <HAL_GetTick>
 8004750:	0002      	movs	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e05f      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475e:	4b32      	ldr	r3, [pc, #200]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	049b      	lsls	r3, r3, #18
 8004766:	4013      	ands	r3, r2
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x534>
 800476a:	e057      	b.n	800481c <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476c:	4b2e      	ldr	r3, [pc, #184]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004772:	4931      	ldr	r1, [pc, #196]	; (8004838 <HAL_RCC_OscConfig+0x620>)
 8004774:	400a      	ands	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004778:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800477e:	2103      	movs	r1, #3
 8004780:	438a      	bics	r2, r1
 8004782:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004784:	4b28      	ldr	r3, [pc, #160]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	4b27      	ldr	r3, [pc, #156]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 800478a:	492d      	ldr	r1, [pc, #180]	; (8004840 <HAL_RCC_OscConfig+0x628>)
 800478c:	400a      	ands	r2, r1
 800478e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004790:	f7fe fc18 	bl	8002fc4 <HAL_GetTick>
 8004794:	0003      	movs	r3, r0
 8004796:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479a:	f7fe fc13 	bl	8002fc4 <HAL_GetTick>
 800479e:	0002      	movs	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e038      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ac:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	049b      	lsls	r3, r3, #18
 80047b4:	4013      	ands	r3, r2
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x582>
 80047b8:	e030      	b.n	800481c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e02b      	b.n	800481e <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80047c6:	4b18      	ldr	r3, [pc, #96]	; (8004828 <HAL_RCC_OscConfig+0x610>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2203      	movs	r2, #3
 80047d0:	401a      	ands	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d11e      	bne.n	8004818 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2270      	movs	r2, #112	; 0x70
 80047de:	401a      	ands	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d117      	bne.n	8004818 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	23fe      	movs	r3, #254	; 0xfe
 80047ec:	01db      	lsls	r3, r3, #7
 80047ee:	401a      	ands	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d10e      	bne.n	8004818 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	23f8      	movs	r3, #248	; 0xf8
 80047fe:	039b      	lsls	r3, r3, #14
 8004800:	401a      	ands	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d106      	bne.n	8004818 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	0f5b      	lsrs	r3, r3, #29
 800480e:	075a      	lsls	r2, r3, #29
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b008      	add	sp, #32
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	40021000 	.word	0x40021000
 800482c:	40007000 	.word	0x40007000
 8004830:	00001388 	.word	0x00001388
 8004834:	efffffff 	.word	0xefffffff
 8004838:	feffffff 	.word	0xfeffffff
 800483c:	1fc1808c 	.word	0x1fc1808c
 8004840:	effeffff 	.word	0xeffeffff

08004844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0e9      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2207      	movs	r2, #7
 800485e:	4013      	ands	r3, r2
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d91e      	bls.n	80048a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b73      	ldr	r3, [pc, #460]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2207      	movs	r2, #7
 800486c:	4393      	bics	r3, r2
 800486e:	0019      	movs	r1, r3
 8004870:	4b70      	ldr	r3, [pc, #448]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004878:	f7fe fba4 	bl	8002fc4 <HAL_GetTick>
 800487c:	0003      	movs	r3, r0
 800487e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004880:	e009      	b.n	8004896 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004882:	f7fe fb9f 	bl	8002fc4 <HAL_GetTick>
 8004886:	0002      	movs	r2, r0
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	4a6a      	ldr	r2, [pc, #424]	; (8004a38 <HAL_RCC_ClockConfig+0x1f4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e0ca      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004896:	4b67      	ldr	r3, [pc, #412]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2207      	movs	r2, #7
 800489c:	4013      	ands	r3, r2
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d1ee      	bne.n	8004882 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2202      	movs	r2, #2
 80048aa:	4013      	ands	r3, r2
 80048ac:	d015      	beq.n	80048da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2204      	movs	r2, #4
 80048b4:	4013      	ands	r3, r2
 80048b6:	d006      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048b8:	4b60      	ldr	r3, [pc, #384]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	4b5f      	ldr	r3, [pc, #380]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80048be:	21e0      	movs	r1, #224	; 0xe0
 80048c0:	01c9      	lsls	r1, r1, #7
 80048c2:	430a      	orrs	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c6:	4b5d      	ldr	r3, [pc, #372]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4a5d      	ldr	r2, [pc, #372]	; (8004a40 <HAL_RCC_ClockConfig+0x1fc>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80048d6:	430a      	orrs	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2201      	movs	r2, #1
 80048e0:	4013      	ands	r3, r2
 80048e2:	d057      	beq.n	8004994 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ec:	4b53      	ldr	r3, [pc, #332]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	029b      	lsls	r3, r3, #10
 80048f4:	4013      	ands	r3, r2
 80048f6:	d12b      	bne.n	8004950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e097      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d107      	bne.n	8004914 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004904:	4b4d      	ldr	r3, [pc, #308]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	049b      	lsls	r3, r3, #18
 800490c:	4013      	ands	r3, r2
 800490e:	d11f      	bne.n	8004950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e08b      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800491c:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4013      	ands	r3, r2
 8004926:	d113      	bne.n	8004950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e07f      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d106      	bne.n	8004942 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004934:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004938:	2202      	movs	r2, #2
 800493a:	4013      	ands	r3, r2
 800493c:	d108      	bne.n	8004950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e074      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004942:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004946:	2202      	movs	r2, #2
 8004948:	4013      	ands	r3, r2
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e06d      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004950:	4b3a      	ldr	r3, [pc, #232]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2207      	movs	r2, #7
 8004956:	4393      	bics	r3, r2
 8004958:	0019      	movs	r1, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4b37      	ldr	r3, [pc, #220]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004960:	430a      	orrs	r2, r1
 8004962:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fe fb2e 	bl	8002fc4 <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496c:	e009      	b.n	8004982 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496e:	f7fe fb29 	bl	8002fc4 <HAL_GetTick>
 8004972:	0002      	movs	r2, r0
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	4a2f      	ldr	r2, [pc, #188]	; (8004a38 <HAL_RCC_ClockConfig+0x1f4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e054      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b2e      	ldr	r3, [pc, #184]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2238      	movs	r2, #56	; 0x38
 8004988:	401a      	ands	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	429a      	cmp	r2, r3
 8004992:	d1ec      	bne.n	800496e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2207      	movs	r2, #7
 800499a:	4013      	ands	r3, r2
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d21e      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2207      	movs	r2, #7
 80049a8:	4393      	bics	r3, r2
 80049aa:	0019      	movs	r1, r3
 80049ac:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049b4:	f7fe fb06 	bl	8002fc4 <HAL_GetTick>
 80049b8:	0003      	movs	r3, r0
 80049ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049bc:	e009      	b.n	80049d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049be:	f7fe fb01 	bl	8002fc4 <HAL_GetTick>
 80049c2:	0002      	movs	r2, r0
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_RCC_ClockConfig+0x1f4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e02c      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049d2:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2207      	movs	r2, #7
 80049d8:	4013      	ands	r3, r2
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d1ee      	bne.n	80049be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2204      	movs	r2, #4
 80049e6:	4013      	ands	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <HAL_RCC_ClockConfig+0x200>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80049fe:	f000 f829 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a02:	0001      	movs	r1, r0
 8004a04:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	220f      	movs	r2, #15
 8004a0c:	401a      	ands	r2, r3
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_RCC_ClockConfig+0x204>)
 8004a10:	0092      	lsls	r2, r2, #2
 8004a12:	58d3      	ldr	r3, [r2, r3]
 8004a14:	221f      	movs	r2, #31
 8004a16:	4013      	ands	r3, r2
 8004a18:	000a      	movs	r2, r1
 8004a1a:	40da      	lsrs	r2, r3
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_ClockConfig+0x208>)
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_ClockConfig+0x20c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fe fa71 	bl	8002f0c <HAL_InitTick>
 8004a2a:	0003      	movs	r3, r0
}
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b004      	add	sp, #16
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40022000 	.word	0x40022000
 8004a38:	00001388 	.word	0x00001388
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	fffff0ff 	.word	0xfffff0ff
 8004a44:	ffff8fff 	.word	0xffff8fff
 8004a48:	08006ea8 	.word	0x08006ea8
 8004a4c:	20000010 	.word	0x20000010
 8004a50:	20000014 	.word	0x20000014

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a5a:	4b3c      	ldr	r3, [pc, #240]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2238      	movs	r2, #56	; 0x38
 8004a60:	4013      	ands	r3, r2
 8004a62:	d10f      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a64:	4b39      	ldr	r3, [pc, #228]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0adb      	lsrs	r3, r3, #11
 8004a6a:	2207      	movs	r2, #7
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2201      	movs	r2, #1
 8004a70:	409a      	lsls	r2, r3
 8004a72:	0013      	movs	r3, r2
 8004a74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a76:	6839      	ldr	r1, [r7, #0]
 8004a78:	4835      	ldr	r0, [pc, #212]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a7a:	f7fb fb53 	bl	8000124 <__udivsi3>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	e05d      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a84:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2238      	movs	r2, #56	; 0x38
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a90:	4b30      	ldr	r3, [pc, #192]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	e054      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a96:	4b2d      	ldr	r3, [pc, #180]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2238      	movs	r2, #56	; 0x38
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d138      	bne.n	8004b14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004aa2:	4b2a      	ldr	r3, [pc, #168]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aac:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	2207      	movs	r2, #7
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d10d      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	4824      	ldr	r0, [pc, #144]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ac4:	f7fb fb2e 	bl	8000124 <__udivsi3>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	0019      	movs	r1, r3
 8004acc:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	227f      	movs	r2, #127	; 0x7f
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	434b      	muls	r3, r1
 8004ad8:	617b      	str	r3, [r7, #20]
        break;
 8004ada:	e00d      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	481c      	ldr	r0, [pc, #112]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ae0:	f7fb fb20 	bl	8000124 <__udivsi3>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	227f      	movs	r2, #127	; 0x7f
 8004af0:	4013      	ands	r3, r2
 8004af2:	434b      	muls	r3, r1
 8004af4:	617b      	str	r3, [r7, #20]
        break;
 8004af6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004af8:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	0f5b      	lsrs	r3, r3, #29
 8004afe:	2207      	movs	r2, #7
 8004b00:	4013      	ands	r3, r2
 8004b02:	3301      	adds	r3, #1
 8004b04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f7fb fb0b 	bl	8000124 <__udivsi3>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	e015      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b14:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2238      	movs	r2, #56	; 0x38
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d103      	bne.n	8004b28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	e00b      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2238      	movs	r2, #56	; 0x38
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b18      	cmp	r3, #24
 8004b32:	d103      	bne.n	8004b3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b34:	23fa      	movs	r3, #250	; 0xfa
 8004b36:	01db      	lsls	r3, r3, #7
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e001      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b40:	693b      	ldr	r3, [r7, #16]
}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b006      	add	sp, #24
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	00f42400 	.word	0x00f42400
 8004b54:	007a1200 	.word	0x007a1200

08004b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b5c:	4b02      	ldr	r3, [pc, #8]	; (8004b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	0018      	movs	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	20000010 	.word	0x20000010

08004b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b6c:	b5b0      	push	{r4, r5, r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b70:	f7ff fff2 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b74:	0004      	movs	r4, r0
 8004b76:	f7ff fb43 	bl	8004200 <LL_RCC_GetAPB1Prescaler>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	0b1a      	lsrs	r2, r3, #12
 8004b7e:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b80:	0092      	lsls	r2, r2, #2
 8004b82:	58d3      	ldr	r3, [r2, r3]
 8004b84:	221f      	movs	r2, #31
 8004b86:	4013      	ands	r3, r2
 8004b88:	40dc      	lsrs	r4, r3
 8004b8a:	0023      	movs	r3, r4
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bdb0      	pop	{r4, r5, r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	08006ee8 	.word	0x08006ee8

08004b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004ba0:	2313      	movs	r3, #19
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ba8:	2312      	movs	r3, #18
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	029b      	lsls	r3, r3, #10
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d100      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004bbc:	e0a3      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bbe:	2011      	movs	r0, #17
 8004bc0:	183b      	adds	r3, r7, r0
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bc6:	4b7f      	ldr	r3, [pc, #508]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	055b      	lsls	r3, r3, #21
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d110      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd2:	4b7c      	ldr	r3, [pc, #496]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd6:	4b7b      	ldr	r3, [pc, #492]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004bd8:	2180      	movs	r1, #128	; 0x80
 8004bda:	0549      	lsls	r1, r1, #21
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	63da      	str	r2, [r3, #60]	; 0x3c
 8004be0:	4b78      	ldr	r3, [pc, #480]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	055b      	lsls	r3, r3, #21
 8004be8:	4013      	ands	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bee:	183b      	adds	r3, r7, r0
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bf4:	4b74      	ldr	r3, [pc, #464]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	4b73      	ldr	r3, [pc, #460]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004bfa:	2180      	movs	r1, #128	; 0x80
 8004bfc:	0049      	lsls	r1, r1, #1
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c02:	f7fe f9df 	bl	8002fc4 <HAL_GetTick>
 8004c06:	0003      	movs	r3, r0
 8004c08:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c0a:	e00b      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c0c:	f7fe f9da 	bl	8002fc4 <HAL_GetTick>
 8004c10:	0002      	movs	r2, r0
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d904      	bls.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c1a:	2313      	movs	r3, #19
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	2203      	movs	r2, #3
 8004c20:	701a      	strb	r2, [r3, #0]
        break;
 8004c22:	e005      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c24:	4b68      	ldr	r3, [pc, #416]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	2380      	movs	r3, #128	; 0x80
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	d0ed      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c30:	2313      	movs	r3, #19
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d154      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c3a:	4b62      	ldr	r3, [pc, #392]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c3e:	23c0      	movs	r3, #192	; 0xc0
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4013      	ands	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d019      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d014      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c56:	4b5b      	ldr	r3, [pc, #364]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5a:	4a5c      	ldr	r2, [pc, #368]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c60:	4b58      	ldr	r3, [pc, #352]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c64:	4b57      	ldr	r3, [pc, #348]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c66:	2180      	movs	r1, #128	; 0x80
 8004c68:	0249      	lsls	r1, r1, #9
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6e:	4b55      	ldr	r3, [pc, #340]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c72:	4b54      	ldr	r3, [pc, #336]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c74:	4956      	ldr	r1, [pc, #344]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004c76:	400a      	ands	r2, r1
 8004c78:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c7a:	4b52      	ldr	r3, [pc, #328]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2201      	movs	r2, #1
 8004c84:	4013      	ands	r3, r2
 8004c86:	d016      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7fe f99c 	bl	8002fc4 <HAL_GetTick>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c90:	e00c      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c92:	f7fe f997 	bl	8002fc4 <HAL_GetTick>
 8004c96:	0002      	movs	r2, r0
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	4a4d      	ldr	r2, [pc, #308]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d904      	bls.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004ca2:	2313      	movs	r3, #19
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	701a      	strb	r2, [r3, #0]
            break;
 8004caa:	e004      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cac:	4b45      	ldr	r3, [pc, #276]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d0ed      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004cb6:	2313      	movs	r3, #19
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cc0:	4b40      	ldr	r3, [pc, #256]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc4:	4a41      	ldr	r2, [pc, #260]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	0019      	movs	r1, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	4b3d      	ldr	r3, [pc, #244]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cd4:	e00c      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cd6:	2312      	movs	r3, #18
 8004cd8:	18fb      	adds	r3, r7, r3
 8004cda:	2213      	movs	r2, #19
 8004cdc:	18ba      	adds	r2, r7, r2
 8004cde:	7812      	ldrb	r2, [r2, #0]
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e005      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	2312      	movs	r3, #18
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	2213      	movs	r2, #19
 8004cea:	18ba      	adds	r2, r7, r2
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cf0:	2311      	movs	r3, #17
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfa:	4b32      	ldr	r3, [pc, #200]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d00:	4935      	ldr	r1, [pc, #212]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d02:	400a      	ands	r2, r1
 8004d04:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d10:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	2203      	movs	r2, #3
 8004d16:	4393      	bics	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	4b29      	ldr	r3, [pc, #164]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d20:	430a      	orrs	r2, r1
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d009      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d2e:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	0019      	movs	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	2380      	movs	r3, #128	; 0x80
 8004d48:	01db      	lsls	r3, r3, #7
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d015      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d4e:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	0899      	lsrs	r1, r3, #2
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	05db      	lsls	r3, r3, #23
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d106      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004d6c:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	0249      	lsls	r1, r1, #9
 8004d76:	430a      	orrs	r2, r1
 8004d78:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	4013      	ands	r3, r2
 8004d84:	d016      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8a:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	0019      	movs	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d96:	430a      	orrs	r2, r1
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	2380      	movs	r3, #128	; 0x80
 8004da0:	01db      	lsls	r3, r3, #7
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d106      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004da6:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004dac:	2180      	movs	r1, #128	; 0x80
 8004dae:	0249      	lsls	r1, r1, #9
 8004db0:	430a      	orrs	r2, r1
 8004db2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004db4:	2312      	movs	r3, #18
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	781b      	ldrb	r3, [r3, #0]
}
 8004dba:	0018      	movs	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b006      	add	sp, #24
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40007000 	.word	0x40007000
 8004dcc:	fffffcff 	.word	0xfffffcff
 8004dd0:	fffeffff 	.word	0xfffeffff
 8004dd4:	00001388 	.word	0x00001388
 8004dd8:	efffffff 	.word	0xefffffff
 8004ddc:	ffffcfff 	.word	0xffffcfff
 8004de0:	ffff3fff 	.word	0xffff3fff

08004de4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004de4:	b5b0      	push	{r4, r5, r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004dec:	230f      	movs	r3, #15
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d100      	bne.n	8004dfc <HAL_RTC_Init+0x18>
 8004dfa:	e080      	b.n	8004efe <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2229      	movs	r2, #41	; 0x29
 8004e00:	5c9b      	ldrb	r3, [r3, r2]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2228      	movs	r2, #40	; 0x28
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2288      	movs	r2, #136	; 0x88
 8004e14:	0212      	lsls	r2, r2, #8
 8004e16:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f7fd ff04 	bl	8002c28 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2229      	movs	r2, #41	; 0x29
 8004e24:	2102      	movs	r1, #2
 8004e26:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	22ca      	movs	r2, #202	; 0xca
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2253      	movs	r2, #83	; 0x53
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004e38:	250f      	movs	r5, #15
 8004e3a:	197c      	adds	r4, r7, r5
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f000 fa71 	bl	8005326 <RTC_EnterInitMode>
 8004e44:	0003      	movs	r3, r0
 8004e46:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8004e48:	0028      	movs	r0, r5
 8004e4a:	183b      	adds	r3, r7, r0
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d148      	bne.n	8004ee4 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	492b      	ldr	r1, [pc, #172]	; (8004f0c <HAL_RTC_Init+0x128>)
 8004e5e:	400a      	ands	r2, r1
 8004e60:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6999      	ldr	r1, [r3, #24]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6912      	ldr	r2, [r2, #16]
 8004e88:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6919      	ldr	r1, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	041a      	lsls	r2, r3, #16
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004e9e:	0005      	movs	r5, r0
 8004ea0:	183c      	adds	r4, r7, r0
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f000 fa81 	bl	80053ac <RTC_ExitInitMode>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8004eae:	197b      	adds	r3, r7, r5
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d116      	bne.n	8004ee4 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699a      	ldr	r2, [r3, #24]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	00d2      	lsls	r2, r2, #3
 8004ec2:	08d2      	lsrs	r2, r2, #3
 8004ec4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6999      	ldr	r1, [r3, #24]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	22ff      	movs	r2, #255	; 0xff
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004eec:	230f      	movs	r3, #15
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2229      	movs	r2, #41	; 0x29
 8004efa:	2101      	movs	r1, #1
 8004efc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004efe:	230f      	movs	r3, #15
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	781b      	ldrb	r3, [r3, #0]
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0c:	fb8fffbf 	.word	0xfb8fffbf

08004f10 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f10:	b5b0      	push	{r4, r5, r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2228      	movs	r2, #40	; 0x28
 8004f20:	5c9b      	ldrb	r3, [r3, r2]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_RTC_SetTime+0x1a>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e092      	b.n	8005050 <HAL_RTC_SetTime+0x140>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2228      	movs	r2, #40	; 0x28
 8004f2e:	2101      	movs	r1, #1
 8004f30:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2229      	movs	r2, #41	; 0x29
 8004f36:	2102      	movs	r1, #2
 8004f38:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	22ca      	movs	r2, #202	; 0xca
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2253      	movs	r2, #83	; 0x53
 8004f48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f4a:	2513      	movs	r5, #19
 8004f4c:	197c      	adds	r4, r7, r5
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f000 f9e8 	bl	8005326 <RTC_EnterInitMode>
 8004f56:	0003      	movs	r3, r0
 8004f58:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004f5a:	197b      	adds	r3, r7, r5
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d162      	bne.n	8005028 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d125      	bne.n	8004fb4 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2240      	movs	r2, #64	; 0x40
 8004f70:	4013      	ands	r3, r2
 8004f72:	d102      	bne.n	8004f7a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2200      	movs	r2, #0
 8004f78:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f000 fa58 	bl	8005434 <RTC_ByteToBcd2>
 8004f84:	0003      	movs	r3, r0
 8004f86:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	785b      	ldrb	r3, [r3, #1]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f000 fa51 	bl	8005434 <RTC_ByteToBcd2>
 8004f92:	0003      	movs	r3, r0
 8004f94:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f96:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	789b      	ldrb	r3, [r3, #2]
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f000 fa49 	bl	8005434 <RTC_ByteToBcd2>
 8004fa2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fa4:	0022      	movs	r2, r4
 8004fa6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	78db      	ldrb	r3, [r3, #3]
 8004fac:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	e017      	b.n	8004fe4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d102      	bne.n	8004fc6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fd2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004fd8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	78db      	ldrb	r3, [r3, #3]
 8004fde:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	491b      	ldr	r1, [pc, #108]	; (8005058 <HAL_RTC_SetTime+0x148>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4918      	ldr	r1, [pc, #96]	; (800505c <HAL_RTC_SetTime+0x14c>)
 8004ffc:	400a      	ands	r2, r1
 8004ffe:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6999      	ldr	r1, [r3, #24]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	431a      	orrs	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005018:	2313      	movs	r3, #19
 800501a:	18fc      	adds	r4, r7, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	0018      	movs	r0, r3
 8005020:	f000 f9c4 	bl	80053ac <RTC_ExitInitMode>
 8005024:	0003      	movs	r3, r0
 8005026:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	22ff      	movs	r2, #255	; 0xff
 800502e:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005030:	2313      	movs	r3, #19
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2229      	movs	r2, #41	; 0x29
 800503e:	2101      	movs	r1, #1
 8005040:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2228      	movs	r2, #40	; 0x28
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]

  return status;
 800504a:	2313      	movs	r3, #19
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	781b      	ldrb	r3, [r3, #0]
}
 8005050:	0018      	movs	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	b006      	add	sp, #24
 8005056:	bdb0      	pop	{r4, r5, r7, pc}
 8005058:	007f7f7f 	.word	0x007f7f7f
 800505c:	fffbffff 	.word	0xfffbffff

08005060 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	045b      	lsls	r3, r3, #17
 800507e:	0c5a      	lsrs	r2, r3, #17
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a22      	ldr	r2, [pc, #136]	; (8005114 <HAL_RTC_GetTime+0xb4>)
 800508c:	4013      	ands	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	0c1b      	lsrs	r3, r3, #16
 8005094:	b2db      	uxtb	r3, r3
 8005096:	223f      	movs	r2, #63	; 0x3f
 8005098:	4013      	ands	r3, r2
 800509a:	b2da      	uxtb	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	0a1b      	lsrs	r3, r3, #8
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	227f      	movs	r2, #127	; 0x7f
 80050a8:	4013      	ands	r3, r2
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	227f      	movs	r2, #127	; 0x7f
 80050b6:	4013      	ands	r3, r2
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	0d9b      	lsrs	r3, r3, #22
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2201      	movs	r2, #1
 80050c6:	4013      	ands	r3, r2
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11a      	bne.n	800510a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	0018      	movs	r0, r3
 80050da:	f000 f9d3 	bl	8005484 <RTC_Bcd2ToByte>
 80050de:	0003      	movs	r3, r0
 80050e0:	001a      	movs	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 f9ca 	bl	8005484 <RTC_Bcd2ToByte>
 80050f0:	0003      	movs	r3, r0
 80050f2:	001a      	movs	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	789b      	ldrb	r3, [r3, #2]
 80050fc:	0018      	movs	r0, r3
 80050fe:	f000 f9c1 	bl	8005484 <RTC_Bcd2ToByte>
 8005102:	0003      	movs	r3, r0
 8005104:	001a      	movs	r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	0018      	movs	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	b006      	add	sp, #24
 8005112:	bd80      	pop	{r7, pc}
 8005114:	007f7f7f 	.word	0x007f7f7f

08005118 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005118:	b5b0      	push	{r4, r5, r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2228      	movs	r2, #40	; 0x28
 8005128:	5c9b      	ldrb	r3, [r3, r2]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_RTC_SetDate+0x1a>
 800512e:	2302      	movs	r3, #2
 8005130:	e07e      	b.n	8005230 <HAL_RTC_SetDate+0x118>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2228      	movs	r2, #40	; 0x28
 8005136:	2101      	movs	r1, #1
 8005138:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2229      	movs	r2, #41	; 0x29
 800513e:	2102      	movs	r1, #2
 8005140:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10e      	bne.n	8005166 <HAL_RTC_SetDate+0x4e>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	001a      	movs	r2, r3
 800514e:	2310      	movs	r3, #16
 8005150:	4013      	ands	r3, r2
 8005152:	d008      	beq.n	8005166 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	2210      	movs	r2, #16
 800515a:	4393      	bics	r3, r2
 800515c:	b2db      	uxtb	r3, r3
 800515e:	330a      	adds	r3, #10
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11c      	bne.n	80051a6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	78db      	ldrb	r3, [r3, #3]
 8005170:	0018      	movs	r0, r3
 8005172:	f000 f95f 	bl	8005434 <RTC_ByteToBcd2>
 8005176:	0003      	movs	r3, r0
 8005178:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	785b      	ldrb	r3, [r3, #1]
 800517e:	0018      	movs	r0, r3
 8005180:	f000 f958 	bl	8005434 <RTC_ByteToBcd2>
 8005184:	0003      	movs	r3, r0
 8005186:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005188:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	789b      	ldrb	r3, [r3, #2]
 800518e:	0018      	movs	r0, r3
 8005190:	f000 f950 	bl	8005434 <RTC_ByteToBcd2>
 8005194:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005196:	0022      	movs	r2, r4
 8005198:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	e00e      	b.n	80051c4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	78db      	ldrb	r3, [r3, #3]
 80051aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051b2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80051b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	22ca      	movs	r2, #202	; 0xca
 80051ca:	625a      	str	r2, [r3, #36]	; 0x24
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2253      	movs	r2, #83	; 0x53
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80051d4:	2513      	movs	r5, #19
 80051d6:	197c      	adds	r4, r7, r5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	0018      	movs	r0, r3
 80051dc:	f000 f8a3 	bl	8005326 <RTC_EnterInitMode>
 80051e0:	0003      	movs	r3, r0
 80051e2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80051e4:	0028      	movs	r0, r5
 80051e6:	183b      	adds	r3, r7, r0
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10c      	bne.n	8005208 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4910      	ldr	r1, [pc, #64]	; (8005238 <HAL_RTC_SetDate+0x120>)
 80051f6:	400a      	ands	r2, r1
 80051f8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80051fa:	183c      	adds	r4, r7, r0
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 f8d4 	bl	80053ac <RTC_ExitInitMode>
 8005204:	0003      	movs	r3, r0
 8005206:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	22ff      	movs	r2, #255	; 0xff
 800520e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005210:	2313      	movs	r3, #19
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2229      	movs	r2, #41	; 0x29
 800521e:	2101      	movs	r1, #1
 8005220:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2228      	movs	r2, #40	; 0x28
 8005226:	2100      	movs	r1, #0
 8005228:	5499      	strb	r1, [r3, r2]

  return status;
 800522a:	2313      	movs	r3, #19
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	781b      	ldrb	r3, [r3, #0]
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b006      	add	sp, #24
 8005236:	bdb0      	pop	{r4, r5, r7, pc}
 8005238:	00ffff3f 	.word	0x00ffff3f

0800523c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4a21      	ldr	r2, [pc, #132]	; (80052d4 <HAL_RTC_GetDate+0x98>)
 8005250:	4013      	ands	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	b2da      	uxtb	r2, r3
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	b2db      	uxtb	r3, r3
 8005264:	221f      	movs	r2, #31
 8005266:	4013      	ands	r3, r2
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	b2db      	uxtb	r3, r3
 8005272:	223f      	movs	r2, #63	; 0x3f
 8005274:	4013      	ands	r3, r2
 8005276:	b2da      	uxtb	r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	0b5b      	lsrs	r3, r3, #13
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2207      	movs	r2, #7
 8005284:	4013      	ands	r3, r2
 8005286:	b2da      	uxtb	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d11a      	bne.n	80052c8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	78db      	ldrb	r3, [r3, #3]
 8005296:	0018      	movs	r0, r3
 8005298:	f000 f8f4 	bl	8005484 <RTC_Bcd2ToByte>
 800529c:	0003      	movs	r3, r0
 800529e:	001a      	movs	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	0018      	movs	r0, r3
 80052aa:	f000 f8eb 	bl	8005484 <RTC_Bcd2ToByte>
 80052ae:	0003      	movs	r3, r0
 80052b0:	001a      	movs	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	789b      	ldrb	r3, [r3, #2]
 80052ba:	0018      	movs	r0, r3
 80052bc:	f000 f8e2 	bl	8005484 <RTC_Bcd2ToByte>
 80052c0:	0003      	movs	r3, r0
 80052c2:	001a      	movs	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	0018      	movs	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b006      	add	sp, #24
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	00ffff3f 	.word	0x00ffff3f

080052d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	21a0      	movs	r1, #160	; 0xa0
 80052ec:	438a      	bics	r2, r1
 80052ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80052f0:	f7fd fe68 	bl	8002fc4 <HAL_GetTick>
 80052f4:	0003      	movs	r3, r0
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80052f8:	e00a      	b.n	8005310 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80052fa:	f7fd fe63 	bl	8002fc4 <HAL_GetTick>
 80052fe:	0002      	movs	r2, r0
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	1ad2      	subs	r2, r2, r3
 8005304:	23fa      	movs	r3, #250	; 0xfa
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	429a      	cmp	r2, r3
 800530a:	d901      	bls.n	8005310 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e006      	b.n	800531e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	4013      	ands	r3, r2
 800531a:	d0ee      	beq.n	80052fa <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	0018      	movs	r0, r3
 8005320:	46bd      	mov	sp, r7
 8005322:	b004      	add	sp, #16
 8005324:	bd80      	pop	{r7, pc}

08005326 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800532e:	230f      	movs	r3, #15
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2240      	movs	r2, #64	; 0x40
 800533e:	4013      	ands	r3, r2
 8005340:	d12c      	bne.n	800539c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2180      	movs	r1, #128	; 0x80
 800534e:	430a      	orrs	r2, r1
 8005350:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005352:	f7fd fe37 	bl	8002fc4 <HAL_GetTick>
 8005356:	0003      	movs	r3, r0
 8005358:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800535a:	e014      	b.n	8005386 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800535c:	f7fd fe32 	bl	8002fc4 <HAL_GetTick>
 8005360:	0002      	movs	r2, r0
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	1ad2      	subs	r2, r2, r3
 8005366:	200f      	movs	r0, #15
 8005368:	183b      	adds	r3, r7, r0
 800536a:	1839      	adds	r1, r7, r0
 800536c:	7809      	ldrb	r1, [r1, #0]
 800536e:	7019      	strb	r1, [r3, #0]
 8005370:	23fa      	movs	r3, #250	; 0xfa
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	429a      	cmp	r2, r3
 8005376:	d906      	bls.n	8005386 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005378:	183b      	adds	r3, r7, r0
 800537a:	2203      	movs	r2, #3
 800537c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2229      	movs	r2, #41	; 0x29
 8005382:	2103      	movs	r1, #3
 8005384:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2240      	movs	r2, #64	; 0x40
 800538e:	4013      	ands	r3, r2
 8005390:	d104      	bne.n	800539c <RTC_EnterInitMode+0x76>
 8005392:	230f      	movs	r3, #15
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d1df      	bne.n	800535c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800539c:	230f      	movs	r3, #15
 800539e:	18fb      	adds	r3, r7, r3
 80053a0:	781b      	ldrb	r3, [r3, #0]
}
 80053a2:	0018      	movs	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b004      	add	sp, #16
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b4:	240f      	movs	r4, #15
 80053b6:	193b      	adds	r3, r7, r4
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80053bc:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <RTC_ExitInitMode+0x84>)
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <RTC_ExitInitMode+0x84>)
 80053c2:	2180      	movs	r1, #128	; 0x80
 80053c4:	438a      	bics	r2, r1
 80053c6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80053c8:	4b19      	ldr	r3, [pc, #100]	; (8005430 <RTC_ExitInitMode+0x84>)
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2220      	movs	r2, #32
 80053ce:	4013      	ands	r3, r2
 80053d0:	d10d      	bne.n	80053ee <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7ff ff7f 	bl	80052d8 <HAL_RTC_WaitForSynchro>
 80053da:	1e03      	subs	r3, r0, #0
 80053dc:	d021      	beq.n	8005422 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2229      	movs	r2, #41	; 0x29
 80053e2:	2103      	movs	r1, #3
 80053e4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80053e6:	193b      	adds	r3, r7, r4
 80053e8:	2203      	movs	r2, #3
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e019      	b.n	8005422 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <RTC_ExitInitMode+0x84>)
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <RTC_ExitInitMode+0x84>)
 80053f4:	2120      	movs	r1, #32
 80053f6:	438a      	bics	r2, r1
 80053f8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7ff ff6b 	bl	80052d8 <HAL_RTC_WaitForSynchro>
 8005402:	1e03      	subs	r3, r0, #0
 8005404:	d007      	beq.n	8005416 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2229      	movs	r2, #41	; 0x29
 800540a:	2103      	movs	r1, #3
 800540c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800540e:	230f      	movs	r3, #15
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	2203      	movs	r2, #3
 8005414:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <RTC_ExitInitMode+0x84>)
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	4b05      	ldr	r3, [pc, #20]	; (8005430 <RTC_ExitInitMode+0x84>)
 800541c:	2120      	movs	r1, #32
 800541e:	430a      	orrs	r2, r1
 8005420:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005422:	230f      	movs	r3, #15
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	781b      	ldrb	r3, [r3, #0]
}
 8005428:	0018      	movs	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	b005      	add	sp, #20
 800542e:	bd90      	pop	{r4, r7, pc}
 8005430:	40002800 	.word	0x40002800

08005434 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	0002      	movs	r2, r0
 800543c:	1dfb      	adds	r3, r7, #7
 800543e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005444:	230b      	movs	r3, #11
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	1dfa      	adds	r2, r7, #7
 800544a:	7812      	ldrb	r2, [r2, #0]
 800544c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800544e:	e008      	b.n	8005462 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3301      	adds	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005456:	220b      	movs	r2, #11
 8005458:	18bb      	adds	r3, r7, r2
 800545a:	18ba      	adds	r2, r7, r2
 800545c:	7812      	ldrb	r2, [r2, #0]
 800545e:	3a0a      	subs	r2, #10
 8005460:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005462:	210b      	movs	r1, #11
 8005464:	187b      	adds	r3, r7, r1
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b09      	cmp	r3, #9
 800546a:	d8f1      	bhi.n	8005450 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	b2da      	uxtb	r2, r3
 8005474:	187b      	adds	r3, r7, r1
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	4313      	orrs	r3, r2
 800547a:	b2db      	uxtb	r3, r3
}
 800547c:	0018      	movs	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	b004      	add	sp, #16
 8005482:	bd80      	pop	{r7, pc}

08005484 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	0002      	movs	r2, r0
 800548c:	1dfb      	adds	r3, r7, #7
 800548e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005490:	1dfb      	adds	r3, r7, #7
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	091b      	lsrs	r3, r3, #4
 8005496:	b2db      	uxtb	r3, r3
 8005498:	001a      	movs	r2, r3
 800549a:	0013      	movs	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	189b      	adds	r3, r3, r2
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	1dfb      	adds	r3, r7, #7
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	210f      	movs	r1, #15
 80054ae:	400b      	ands	r3, r1
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	18d3      	adds	r3, r2, r3
 80054b4:	b2db      	uxtb	r3, r3
}
 80054b6:	0018      	movs	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b004      	add	sp, #16
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b082      	sub	sp, #8
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e04a      	b.n	8005566 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	223d      	movs	r2, #61	; 0x3d
 80054d4:	5c9b      	ldrb	r3, [r3, r2]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d107      	bne.n	80054ec <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	223c      	movs	r2, #60	; 0x3c
 80054e0:	2100      	movs	r1, #0
 80054e2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	0018      	movs	r0, r3
 80054e8:	f7fd fbdc 	bl	8002ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	223d      	movs	r2, #61	; 0x3d
 80054f0:	2102      	movs	r1, #2
 80054f2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	0019      	movs	r1, r3
 80054fe:	0010      	movs	r0, r2
 8005500:	f000 f9d6 	bl	80058b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2248      	movs	r2, #72	; 0x48
 8005508:	2101      	movs	r1, #1
 800550a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	223e      	movs	r2, #62	; 0x3e
 8005510:	2101      	movs	r1, #1
 8005512:	5499      	strb	r1, [r3, r2]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	223f      	movs	r2, #63	; 0x3f
 8005518:	2101      	movs	r1, #1
 800551a:	5499      	strb	r1, [r3, r2]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2240      	movs	r2, #64	; 0x40
 8005520:	2101      	movs	r1, #1
 8005522:	5499      	strb	r1, [r3, r2]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2241      	movs	r2, #65	; 0x41
 8005528:	2101      	movs	r1, #1
 800552a:	5499      	strb	r1, [r3, r2]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2242      	movs	r2, #66	; 0x42
 8005530:	2101      	movs	r1, #1
 8005532:	5499      	strb	r1, [r3, r2]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2243      	movs	r2, #67	; 0x43
 8005538:	2101      	movs	r1, #1
 800553a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2244      	movs	r2, #68	; 0x44
 8005540:	2101      	movs	r1, #1
 8005542:	5499      	strb	r1, [r3, r2]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2245      	movs	r2, #69	; 0x45
 8005548:	2101      	movs	r1, #1
 800554a:	5499      	strb	r1, [r3, r2]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2246      	movs	r2, #70	; 0x46
 8005550:	2101      	movs	r1, #1
 8005552:	5499      	strb	r1, [r3, r2]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2247      	movs	r2, #71	; 0x47
 8005558:	2101      	movs	r1, #1
 800555a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	223d      	movs	r2, #61	; 0x3d
 8005560:	2101      	movs	r1, #1
 8005562:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b002      	add	sp, #8
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	223d      	movs	r2, #61	; 0x3d
 800557c:	5c9b      	ldrb	r3, [r3, r2]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	d001      	beq.n	8005588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e037      	b.n	80055f8 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	223d      	movs	r2, #61	; 0x3d
 800558c:	2102      	movs	r1, #2
 800558e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2101      	movs	r1, #1
 800559c:	430a      	orrs	r2, r1
 800559e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a16      	ldr	r2, [pc, #88]	; (8005600 <HAL_TIM_Base_Start_IT+0x90>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_TIM_Base_Start_IT+0x44>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a15      	ldr	r2, [pc, #84]	; (8005604 <HAL_TIM_Base_Start_IT+0x94>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d116      	bne.n	80055e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	4a13      	ldr	r2, [pc, #76]	; (8005608 <HAL_TIM_Base_Start_IT+0x98>)
 80055bc:	4013      	ands	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b06      	cmp	r3, #6
 80055c4:	d016      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x84>
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	025b      	lsls	r3, r3, #9
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d011      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2101      	movs	r1, #1
 80055dc:	430a      	orrs	r2, r1
 80055de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e0:	e008      	b.n	80055f4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2101      	movs	r1, #1
 80055ee:	430a      	orrs	r2, r1
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e000      	b.n	80055f6 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	0018      	movs	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b004      	add	sp, #16
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40012c00 	.word	0x40012c00
 8005604:	40000400 	.word	0x40000400
 8005608:	00010007 	.word	0x00010007

0800560c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	2202      	movs	r2, #2
 800561c:	4013      	ands	r3, r2
 800561e:	2b02      	cmp	r3, #2
 8005620:	d124      	bne.n	800566c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2202      	movs	r2, #2
 800562a:	4013      	ands	r3, r2
 800562c:	2b02      	cmp	r3, #2
 800562e:	d11d      	bne.n	800566c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2203      	movs	r2, #3
 8005636:	4252      	negs	r2, r2
 8005638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2203      	movs	r2, #3
 8005648:	4013      	ands	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	0018      	movs	r0, r3
 8005650:	f000 f916 	bl	8005880 <HAL_TIM_IC_CaptureCallback>
 8005654:	e007      	b.n	8005666 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	0018      	movs	r0, r3
 800565a:	f000 f909 	bl	8005870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0018      	movs	r0, r3
 8005662:	f000 f915 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2204      	movs	r2, #4
 8005674:	4013      	ands	r3, r2
 8005676:	2b04      	cmp	r3, #4
 8005678:	d125      	bne.n	80056c6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2204      	movs	r2, #4
 8005682:	4013      	ands	r3, r2
 8005684:	2b04      	cmp	r3, #4
 8005686:	d11e      	bne.n	80056c6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2205      	movs	r2, #5
 800568e:	4252      	negs	r2, r2
 8005690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2202      	movs	r2, #2
 8005696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	23c0      	movs	r3, #192	; 0xc0
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4013      	ands	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 f8e9 	bl	8005880 <HAL_TIM_IC_CaptureCallback>
 80056ae:	e007      	b.n	80056c0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	0018      	movs	r0, r3
 80056b4:	f000 f8dc 	bl	8005870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f000 f8e8 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2208      	movs	r2, #8
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d124      	bne.n	800571e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2208      	movs	r2, #8
 80056dc:	4013      	ands	r3, r2
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d11d      	bne.n	800571e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2209      	movs	r2, #9
 80056e8:	4252      	negs	r2, r2
 80056ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2204      	movs	r2, #4
 80056f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	2203      	movs	r2, #3
 80056fa:	4013      	ands	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	0018      	movs	r0, r3
 8005702:	f000 f8bd 	bl	8005880 <HAL_TIM_IC_CaptureCallback>
 8005706:	e007      	b.n	8005718 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	0018      	movs	r0, r3
 800570c:	f000 f8b0 	bl	8005870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	0018      	movs	r0, r3
 8005714:	f000 f8bc 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2210      	movs	r2, #16
 8005726:	4013      	ands	r3, r2
 8005728:	2b10      	cmp	r3, #16
 800572a:	d125      	bne.n	8005778 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	2210      	movs	r2, #16
 8005734:	4013      	ands	r3, r2
 8005736:	2b10      	cmp	r3, #16
 8005738:	d11e      	bne.n	8005778 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2211      	movs	r2, #17
 8005740:	4252      	negs	r2, r2
 8005742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2208      	movs	r2, #8
 8005748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	23c0      	movs	r3, #192	; 0xc0
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4013      	ands	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	0018      	movs	r0, r3
 800575c:	f000 f890 	bl	8005880 <HAL_TIM_IC_CaptureCallback>
 8005760:	e007      	b.n	8005772 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f000 f883 	bl	8005870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0018      	movs	r0, r3
 800576e:	f000 f88f 	bl	8005890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2201      	movs	r2, #1
 8005780:	4013      	ands	r3, r2
 8005782:	2b01      	cmp	r3, #1
 8005784:	d10f      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	4013      	ands	r3, r2
 8005790:	2b01      	cmp	r3, #1
 8005792:	d108      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2202      	movs	r2, #2
 800579a:	4252      	negs	r2, r2
 800579c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	0018      	movs	r0, r3
 80057a2:	f7fc fcc9 	bl	8002138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2280      	movs	r2, #128	; 0x80
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b80      	cmp	r3, #128	; 0x80
 80057b2:	d10f      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	4013      	ands	r3, r2
 80057be:	2b80      	cmp	r3, #128	; 0x80
 80057c0:	d108      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2281      	movs	r2, #129	; 0x81
 80057c8:	4252      	negs	r2, r2
 80057ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	0018      	movs	r0, r3
 80057d0:	f000 f8e2 	bl	8005998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	401a      	ands	r2, r3
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d10e      	bne.n	8005806 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	2280      	movs	r2, #128	; 0x80
 80057f0:	4013      	ands	r3, r2
 80057f2:	2b80      	cmp	r3, #128	; 0x80
 80057f4:	d107      	bne.n	8005806 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1c      	ldr	r2, [pc, #112]	; (800586c <HAL_TIM_IRQHandler+0x260>)
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	0018      	movs	r0, r3
 8005802:	f000 f8d1 	bl	80059a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2240      	movs	r2, #64	; 0x40
 800580e:	4013      	ands	r3, r2
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d10f      	bne.n	8005834 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2240      	movs	r2, #64	; 0x40
 800581c:	4013      	ands	r3, r2
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	d108      	bne.n	8005834 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2241      	movs	r2, #65	; 0x41
 8005828:	4252      	negs	r2, r2
 800582a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	0018      	movs	r0, r3
 8005830:	f000 f836 	bl	80058a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2220      	movs	r2, #32
 800583c:	4013      	ands	r3, r2
 800583e:	2b20      	cmp	r3, #32
 8005840:	d10f      	bne.n	8005862 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	2220      	movs	r2, #32
 800584a:	4013      	ands	r3, r2
 800584c:	2b20      	cmp	r3, #32
 800584e:	d108      	bne.n	8005862 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2221      	movs	r2, #33	; 0x21
 8005856:	4252      	negs	r2, r2
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	0018      	movs	r0, r3
 800585e:	f000 f893 	bl	8005988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	46bd      	mov	sp, r7
 8005866:	b002      	add	sp, #8
 8005868:	bd80      	pop	{r7, pc}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	fffffeff 	.word	0xfffffeff

08005870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	b002      	add	sp, #8
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b002      	add	sp, #8
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005898:	46c0      	nop			; (mov r8, r8)
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058a8:	46c0      	nop			; (mov r8, r8)
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b002      	add	sp, #8
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <TIM_Base_SetConfig+0xc0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_Base_SetConfig+0x20>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <TIM_Base_SetConfig+0xc4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d108      	bne.n	80058e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2270      	movs	r2, #112	; 0x70
 80058d4:	4393      	bics	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a22      	ldr	r2, [pc, #136]	; (8005970 <TIM_Base_SetConfig+0xc0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00f      	beq.n	800590a <TIM_Base_SetConfig+0x5a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a21      	ldr	r2, [pc, #132]	; (8005974 <TIM_Base_SetConfig+0xc4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d00b      	beq.n	800590a <TIM_Base_SetConfig+0x5a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a20      	ldr	r2, [pc, #128]	; (8005978 <TIM_Base_SetConfig+0xc8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d007      	beq.n	800590a <TIM_Base_SetConfig+0x5a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1f      	ldr	r2, [pc, #124]	; (800597c <TIM_Base_SetConfig+0xcc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_Base_SetConfig+0x5a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1e      	ldr	r2, [pc, #120]	; (8005980 <TIM_Base_SetConfig+0xd0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d108      	bne.n	800591c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <TIM_Base_SetConfig+0xd4>)
 800590e:	4013      	ands	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	4393      	bics	r3, r2
 8005922:	001a      	movs	r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a0a      	ldr	r2, [pc, #40]	; (8005970 <TIM_Base_SetConfig+0xc0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a0b      	ldr	r2, [pc, #44]	; (800597c <TIM_Base_SetConfig+0xcc>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_Base_SetConfig+0xaa>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a0a      	ldr	r2, [pc, #40]	; (8005980 <TIM_Base_SetConfig+0xd0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d103      	bne.n	8005962 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	615a      	str	r2, [r3, #20]
}
 8005968:	46c0      	nop			; (mov r8, r8)
 800596a:	46bd      	mov	sp, r7
 800596c:	b004      	add	sp, #16
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40000400 	.word	0x40000400
 8005978:	40002000 	.word	0x40002000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800
 8005984:	fffffcff 	.word	0xfffffcff

08005988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005990:	46c0      	nop			; (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	b002      	add	sp, #8
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b002      	add	sp, #8
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059b0:	46c0      	nop			; (mov r8, r8)
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b002      	add	sp, #8
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e046      	b.n	8005a58 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2284      	movs	r2, #132	; 0x84
 80059ce:	589b      	ldr	r3, [r3, r2]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d107      	bne.n	80059e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2280      	movs	r2, #128	; 0x80
 80059d8:	2100      	movs	r1, #0
 80059da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	0018      	movs	r0, r3
 80059e0:	f7fd f988 	bl	8002cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2284      	movs	r2, #132	; 0x84
 80059e8:	2124      	movs	r1, #36	; 0x24
 80059ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2101      	movs	r1, #1
 80059f8:	438a      	bics	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	0018      	movs	r0, r3
 8005a00:	f000 f8dc 	bl	8005bbc <UART_SetConfig>
 8005a04:	0003      	movs	r3, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e024      	b.n	8005a58 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	0018      	movs	r0, r3
 8005a1a:	f000 fa39 	bl	8005e90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	490d      	ldr	r1, [pc, #52]	; (8005a60 <HAL_UART_Init+0xa8>)
 8005a2a:	400a      	ands	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	212a      	movs	r1, #42	; 0x2a
 8005a3a:	438a      	bics	r2, r1
 8005a3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2101      	movs	r1, #1
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f000 fad1 	bl	8005ff8 <UART_CheckIdleState>
 8005a56:	0003      	movs	r3, r0
}
 8005a58:	0018      	movs	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b002      	add	sp, #8
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	ffffb7ff 	.word	0xffffb7ff

08005a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	1dbb      	adds	r3, r7, #6
 8005a72:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2284      	movs	r2, #132	; 0x84
 8005a78:	589b      	ldr	r3, [r3, r2]
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	d000      	beq.n	8005a80 <HAL_UART_Transmit+0x1c>
 8005a7e:	e097      	b.n	8005bb0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_UART_Transmit+0x2a>
 8005a86:	1dbb      	adds	r3, r7, #6
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e08f      	b.n	8005bb2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	015b      	lsls	r3, r3, #5
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d109      	bne.n	8005ab2 <HAL_UART_Transmit+0x4e>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d105      	bne.n	8005ab2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d001      	beq.n	8005ab2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e07f      	b.n	8005bb2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2280      	movs	r2, #128	; 0x80
 8005ab6:	5c9b      	ldrb	r3, [r3, r2]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_UART_Transmit+0x5c>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e078      	b.n	8005bb2 <HAL_UART_Transmit+0x14e>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	228c      	movs	r2, #140	; 0x8c
 8005acc:	2100      	movs	r1, #0
 8005ace:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2284      	movs	r2, #132	; 0x84
 8005ad4:	2121      	movs	r1, #33	; 0x21
 8005ad6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ad8:	f7fd fa74 	bl	8002fc4 <HAL_GetTick>
 8005adc:	0003      	movs	r3, r0
 8005ade:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1dba      	adds	r2, r7, #6
 8005ae4:	2154      	movs	r1, #84	; 0x54
 8005ae6:	8812      	ldrh	r2, [r2, #0]
 8005ae8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1dba      	adds	r2, r7, #6
 8005aee:	2156      	movs	r1, #86	; 0x56
 8005af0:	8812      	ldrh	r2, [r2, #0]
 8005af2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	015b      	lsls	r3, r3, #5
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d108      	bne.n	8005b12 <HAL_UART_Transmit+0xae>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	e003      	b.n	8005b1a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2280      	movs	r2, #128	; 0x80
 8005b1e:	2100      	movs	r1, #0
 8005b20:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005b22:	e02c      	b.n	8005b7e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	0013      	movs	r3, r2
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2180      	movs	r1, #128	; 0x80
 8005b32:	f000 faab 	bl	800608c <UART_WaitOnFlagUntilTimeout>
 8005b36:	1e03      	subs	r3, r0, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e039      	b.n	8005bb2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10b      	bne.n	8005b5c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	001a      	movs	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	05d2      	lsls	r2, r2, #23
 8005b50:	0dd2      	lsrs	r2, r2, #23
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	3302      	adds	r3, #2
 8005b58:	61bb      	str	r3, [r7, #24]
 8005b5a:	e007      	b.n	8005b6c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	781a      	ldrb	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2256      	movs	r2, #86	; 0x56
 8005b70:	5a9b      	ldrh	r3, [r3, r2]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b299      	uxth	r1, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2256      	movs	r2, #86	; 0x56
 8005b7c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2256      	movs	r2, #86	; 0x56
 8005b82:	5a9b      	ldrh	r3, [r3, r2]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1cc      	bne.n	8005b24 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	0013      	movs	r3, r2
 8005b94:	2200      	movs	r2, #0
 8005b96:	2140      	movs	r1, #64	; 0x40
 8005b98:	f000 fa78 	bl	800608c <UART_WaitOnFlagUntilTimeout>
 8005b9c:	1e03      	subs	r3, r0, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e006      	b.n	8005bb2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2284      	movs	r2, #132	; 0x84
 8005ba8:	2120      	movs	r1, #32
 8005baa:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	e000      	b.n	8005bb2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8005bb0:	2302      	movs	r3, #2
  }
}
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	b008      	add	sp, #32
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bc4:	231a      	movs	r3, #26
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4aa1      	ldr	r2, [pc, #644]	; (8005e70 <UART_SetConfig+0x2b4>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	0019      	movs	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4a9c      	ldr	r2, [pc, #624]	; (8005e74 <UART_SetConfig+0x2b8>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	0019      	movs	r1, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	4a93      	ldr	r2, [pc, #588]	; (8005e78 <UART_SetConfig+0x2bc>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	0019      	movs	r1, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	220f      	movs	r2, #15
 8005c40:	4393      	bics	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a89      	ldr	r2, [pc, #548]	; (8005e7c <UART_SetConfig+0x2c0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d127      	bne.n	8005caa <UART_SetConfig+0xee>
 8005c5a:	4b89      	ldr	r3, [pc, #548]	; (8005e80 <UART_SetConfig+0x2c4>)
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	2203      	movs	r2, #3
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d017      	beq.n	8005c96 <UART_SetConfig+0xda>
 8005c66:	d81b      	bhi.n	8005ca0 <UART_SetConfig+0xe4>
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d00a      	beq.n	8005c82 <UART_SetConfig+0xc6>
 8005c6c:	d818      	bhi.n	8005ca0 <UART_SetConfig+0xe4>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <UART_SetConfig+0xbc>
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d00a      	beq.n	8005c8c <UART_SetConfig+0xd0>
 8005c76:	e013      	b.n	8005ca0 <UART_SetConfig+0xe4>
 8005c78:	231b      	movs	r3, #27
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
 8005c80:	e021      	b.n	8005cc6 <UART_SetConfig+0x10a>
 8005c82:	231b      	movs	r3, #27
 8005c84:	18fb      	adds	r3, r7, r3
 8005c86:	2202      	movs	r2, #2
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	e01c      	b.n	8005cc6 <UART_SetConfig+0x10a>
 8005c8c:	231b      	movs	r3, #27
 8005c8e:	18fb      	adds	r3, r7, r3
 8005c90:	2204      	movs	r2, #4
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e017      	b.n	8005cc6 <UART_SetConfig+0x10a>
 8005c96:	231b      	movs	r3, #27
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	e012      	b.n	8005cc6 <UART_SetConfig+0x10a>
 8005ca0:	231b      	movs	r3, #27
 8005ca2:	18fb      	adds	r3, r7, r3
 8005ca4:	2210      	movs	r2, #16
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	e00d      	b.n	8005cc6 <UART_SetConfig+0x10a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a75      	ldr	r2, [pc, #468]	; (8005e84 <UART_SetConfig+0x2c8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d104      	bne.n	8005cbe <UART_SetConfig+0x102>
 8005cb4:	231b      	movs	r3, #27
 8005cb6:	18fb      	adds	r3, r7, r3
 8005cb8:	2200      	movs	r2, #0
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	e003      	b.n	8005cc6 <UART_SetConfig+0x10a>
 8005cbe:	231b      	movs	r3, #27
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	2210      	movs	r2, #16
 8005cc4:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69da      	ldr	r2, [r3, #28]
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d000      	beq.n	8005cd4 <UART_SetConfig+0x118>
 8005cd2:	e066      	b.n	8005da2 <UART_SetConfig+0x1e6>
  {
    switch (clocksource)
 8005cd4:	231b      	movs	r3, #27
 8005cd6:	18fb      	adds	r3, r7, r3
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d015      	beq.n	8005d0a <UART_SetConfig+0x14e>
 8005cde:	dc18      	bgt.n	8005d12 <UART_SetConfig+0x156>
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d00d      	beq.n	8005d00 <UART_SetConfig+0x144>
 8005ce4:	dc15      	bgt.n	8005d12 <UART_SetConfig+0x156>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <UART_SetConfig+0x134>
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d005      	beq.n	8005cfa <UART_SetConfig+0x13e>
 8005cee:	e010      	b.n	8005d12 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7fe ff3c 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	617b      	str	r3, [r7, #20]
        break;
 8005cf8:	e012      	b.n	8005d20 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cfa:	4b63      	ldr	r3, [pc, #396]	; (8005e88 <UART_SetConfig+0x2cc>)
 8005cfc:	617b      	str	r3, [r7, #20]
        break;
 8005cfe:	e00f      	b.n	8005d20 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d00:	f7fe fea8 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005d04:	0003      	movs	r3, r0
 8005d06:	617b      	str	r3, [r7, #20]
        break;
 8005d08:	e00a      	b.n	8005d20 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	617b      	str	r3, [r7, #20]
        break;
 8005d10:	e006      	b.n	8005d20 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d16:	231a      	movs	r3, #26
 8005d18:	18fb      	adds	r3, r7, r3
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	701a      	strb	r2, [r3, #0]
        break;
 8005d1e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d100      	bne.n	8005d28 <UART_SetConfig+0x16c>
 8005d26:	e08e      	b.n	8005e46 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d2c:	4b57      	ldr	r3, [pc, #348]	; (8005e8c <UART_SetConfig+0x2d0>)
 8005d2e:	0052      	lsls	r2, r2, #1
 8005d30:	5ad3      	ldrh	r3, [r2, r3]
 8005d32:	0019      	movs	r1, r3
 8005d34:	6978      	ldr	r0, [r7, #20]
 8005d36:	f7fa f9f5 	bl	8000124 <__udivsi3>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	005a      	lsls	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	18d2      	adds	r2, r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	0010      	movs	r0, r2
 8005d4e:	f7fa f9e9 	bl	8000124 <__udivsi3>
 8005d52:	0003      	movs	r3, r0
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	2b0f      	cmp	r3, #15
 8005d5c:	d91c      	bls.n	8005d98 <UART_SetConfig+0x1dc>
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	2380      	movs	r3, #128	; 0x80
 8005d62:	025b      	lsls	r3, r3, #9
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d217      	bcs.n	8005d98 <UART_SetConfig+0x1dc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	200e      	movs	r0, #14
 8005d6e:	183b      	adds	r3, r7, r0
 8005d70:	210f      	movs	r1, #15
 8005d72:	438a      	bics	r2, r1
 8005d74:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	085b      	lsrs	r3, r3, #1
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2207      	movs	r2, #7
 8005d7e:	4013      	ands	r3, r2
 8005d80:	b299      	uxth	r1, r3
 8005d82:	183b      	adds	r3, r7, r0
 8005d84:	183a      	adds	r2, r7, r0
 8005d86:	8812      	ldrh	r2, [r2, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	183a      	adds	r2, r7, r0
 8005d92:	8812      	ldrh	r2, [r2, #0]
 8005d94:	60da      	str	r2, [r3, #12]
 8005d96:	e056      	b.n	8005e46 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 8005d98:	231a      	movs	r3, #26
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e051      	b.n	8005e46 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005da2:	231b      	movs	r3, #27
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d015      	beq.n	8005dd8 <UART_SetConfig+0x21c>
 8005dac:	dc18      	bgt.n	8005de0 <UART_SetConfig+0x224>
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d00d      	beq.n	8005dce <UART_SetConfig+0x212>
 8005db2:	dc15      	bgt.n	8005de0 <UART_SetConfig+0x224>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <UART_SetConfig+0x202>
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d005      	beq.n	8005dc8 <UART_SetConfig+0x20c>
 8005dbc:	e010      	b.n	8005de0 <UART_SetConfig+0x224>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dbe:	f7fe fed5 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8005dc2:	0003      	movs	r3, r0
 8005dc4:	617b      	str	r3, [r7, #20]
        break;
 8005dc6:	e012      	b.n	8005dee <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc8:	4b2f      	ldr	r3, [pc, #188]	; (8005e88 <UART_SetConfig+0x2cc>)
 8005dca:	617b      	str	r3, [r7, #20]
        break;
 8005dcc:	e00f      	b.n	8005dee <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dce:	f7fe fe41 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005dd2:	0003      	movs	r3, r0
 8005dd4:	617b      	str	r3, [r7, #20]
        break;
 8005dd6:	e00a      	b.n	8005dee <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	617b      	str	r3, [r7, #20]
        break;
 8005dde:	e006      	b.n	8005dee <UART_SetConfig+0x232>
      default:
        pclk = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005de4:	231a      	movs	r3, #26
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	2201      	movs	r2, #1
 8005dea:	701a      	strb	r2, [r3, #0]
        break;
 8005dec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d028      	beq.n	8005e46 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df8:	4b24      	ldr	r3, [pc, #144]	; (8005e8c <UART_SetConfig+0x2d0>)
 8005dfa:	0052      	lsls	r2, r2, #1
 8005dfc:	5ad3      	ldrh	r3, [r2, r3]
 8005dfe:	0019      	movs	r1, r3
 8005e00:	6978      	ldr	r0, [r7, #20]
 8005e02:	f7fa f98f 	bl	8000124 <__udivsi3>
 8005e06:	0003      	movs	r3, r0
 8005e08:	001a      	movs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	18d2      	adds	r2, r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	0019      	movs	r1, r3
 8005e18:	0010      	movs	r0, r2
 8005e1a:	f7fa f983 	bl	8000124 <__udivsi3>
 8005e1e:	0003      	movs	r3, r0
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	d909      	bls.n	8005e3e <UART_SetConfig+0x282>
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	025b      	lsls	r3, r3, #9
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d204      	bcs.n	8005e3e <UART_SetConfig+0x282>
      {
        huart->Instance->BRR = usartdiv;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	60da      	str	r2, [r3, #12]
 8005e3c:	e003      	b.n	8005e46 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 8005e3e:	231a      	movs	r3, #26
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	226a      	movs	r2, #106	; 0x6a
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2268      	movs	r2, #104	; 0x68
 8005e52:	2101      	movs	r1, #1
 8005e54:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005e62:	231a      	movs	r3, #26
 8005e64:	18fb      	adds	r3, r7, r3
 8005e66:	781b      	ldrb	r3, [r3, #0]
}
 8005e68:	0018      	movs	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b008      	add	sp, #32
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	cfff69f3 	.word	0xcfff69f3
 8005e74:	ffffcfff 	.word	0xffffcfff
 8005e78:	11fff4ff 	.word	0x11fff4ff
 8005e7c:	40013800 	.word	0x40013800
 8005e80:	40021000 	.word	0x40021000
 8005e84:	40004400 	.word	0x40004400
 8005e88:	00f42400 	.word	0x00f42400
 8005e8c:	08006f08 	.word	0x08006f08

08005e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	4a4a      	ldr	r2, [pc, #296]	; (8005fd4 <UART_AdvFeatureConfig+0x144>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	0019      	movs	r1, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d00b      	beq.n	8005edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4a43      	ldr	r2, [pc, #268]	; (8005fd8 <UART_AdvFeatureConfig+0x148>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	0019      	movs	r1, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	2204      	movs	r2, #4
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d00b      	beq.n	8005efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4a3b      	ldr	r2, [pc, #236]	; (8005fdc <UART_AdvFeatureConfig+0x14c>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	2208      	movs	r2, #8
 8005f04:	4013      	ands	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	4a34      	ldr	r2, [pc, #208]	; (8005fe0 <UART_AdvFeatureConfig+0x150>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	0019      	movs	r1, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	2210      	movs	r2, #16
 8005f26:	4013      	ands	r3, r2
 8005f28:	d00b      	beq.n	8005f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4a2c      	ldr	r2, [pc, #176]	; (8005fe4 <UART_AdvFeatureConfig+0x154>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	0019      	movs	r1, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	2220      	movs	r2, #32
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d00b      	beq.n	8005f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	4a25      	ldr	r2, [pc, #148]	; (8005fe8 <UART_AdvFeatureConfig+0x158>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	0019      	movs	r1, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	2240      	movs	r2, #64	; 0x40
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d01d      	beq.n	8005faa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <UART_AdvFeatureConfig+0x15c>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	0019      	movs	r1, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	035b      	lsls	r3, r3, #13
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d10b      	bne.n	8005faa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <UART_AdvFeatureConfig+0x160>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d00b      	beq.n	8005fcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	4a0e      	ldr	r2, [pc, #56]	; (8005ff4 <UART_AdvFeatureConfig+0x164>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
  }
}
 8005fcc:	46c0      	nop			; (mov r8, r8)
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b002      	add	sp, #8
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	fffdffff 	.word	0xfffdffff
 8005fd8:	fffeffff 	.word	0xfffeffff
 8005fdc:	fffbffff 	.word	0xfffbffff
 8005fe0:	ffff7fff 	.word	0xffff7fff
 8005fe4:	ffffefff 	.word	0xffffefff
 8005fe8:	ffffdfff 	.word	0xffffdfff
 8005fec:	ffefffff 	.word	0xffefffff
 8005ff0:	ff9fffff 	.word	0xff9fffff
 8005ff4:	fff7ffff 	.word	0xfff7ffff

08005ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	228c      	movs	r2, #140	; 0x8c
 8006004:	2100      	movs	r1, #0
 8006006:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006008:	f7fc ffdc 	bl	8002fc4 <HAL_GetTick>
 800600c:	0003      	movs	r3, r0
 800600e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2208      	movs	r2, #8
 8006018:	4013      	ands	r3, r2
 800601a:	2b08      	cmp	r3, #8
 800601c:	d10c      	bne.n	8006038 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2280      	movs	r2, #128	; 0x80
 8006022:	0391      	lsls	r1, r2, #14
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4a18      	ldr	r2, [pc, #96]	; (8006088 <UART_CheckIdleState+0x90>)
 8006028:	9200      	str	r2, [sp, #0]
 800602a:	2200      	movs	r2, #0
 800602c:	f000 f82e 	bl	800608c <UART_WaitOnFlagUntilTimeout>
 8006030:	1e03      	subs	r3, r0, #0
 8006032:	d001      	beq.n	8006038 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e023      	b.n	8006080 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2204      	movs	r2, #4
 8006040:	4013      	ands	r3, r2
 8006042:	2b04      	cmp	r3, #4
 8006044:	d10c      	bne.n	8006060 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2280      	movs	r2, #128	; 0x80
 800604a:	03d1      	lsls	r1, r2, #15
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4a0e      	ldr	r2, [pc, #56]	; (8006088 <UART_CheckIdleState+0x90>)
 8006050:	9200      	str	r2, [sp, #0]
 8006052:	2200      	movs	r2, #0
 8006054:	f000 f81a 	bl	800608c <UART_WaitOnFlagUntilTimeout>
 8006058:	1e03      	subs	r3, r0, #0
 800605a:	d001      	beq.n	8006060 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e00f      	b.n	8006080 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2284      	movs	r2, #132	; 0x84
 8006064:	2120      	movs	r1, #32
 8006066:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2288      	movs	r2, #136	; 0x88
 800606c:	2120      	movs	r1, #32
 800606e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2280      	movs	r2, #128	; 0x80
 800607a:	2100      	movs	r1, #0
 800607c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	0018      	movs	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	b004      	add	sp, #16
 8006086:	bd80      	pop	{r7, pc}
 8006088:	01ffffff 	.word	0x01ffffff

0800608c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b094      	sub	sp, #80	; 0x50
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	1dfb      	adds	r3, r7, #7
 800609a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609c:	e0a7      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060a0:	3301      	adds	r3, #1
 80060a2:	d100      	bne.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80060a4:	e0a3      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7fc ff8d 	bl	8002fc4 <HAL_GetTick>
 80060aa:	0002      	movs	r2, r0
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <UART_WaitOnFlagUntilTimeout+0x30>
 80060b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d13f      	bne.n	800613c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060bc:	f3ef 8310 	mrs	r3, PRIMASK
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80060c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060c4:	647b      	str	r3, [r7, #68]	; 0x44
 80060c6:	2301      	movs	r3, #1
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	f383 8810 	msr	PRIMASK, r3
}
 80060d0:	46c0      	nop			; (mov r8, r8)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	494e      	ldr	r1, [pc, #312]	; (8006218 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80060de:	400a      	ands	r2, r1
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	f383 8810 	msr	PRIMASK, r3
}
 80060ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ee:	f3ef 8310 	mrs	r3, PRIMASK
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80060f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	643b      	str	r3, [r7, #64]	; 0x40
 80060f8:	2301      	movs	r3, #1
 80060fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	f383 8810 	msr	PRIMASK, r3
}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2101      	movs	r1, #1
 8006110:	438a      	bics	r2, r1
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611a:	f383 8810 	msr	PRIMASK, r3
}
 800611e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2284      	movs	r2, #132	; 0x84
 8006124:	2120      	movs	r1, #32
 8006126:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2288      	movs	r2, #136	; 0x88
 800612c:	2120      	movs	r1, #32
 800612e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2280      	movs	r2, #128	; 0x80
 8006134:	2100      	movs	r1, #0
 8006136:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e069      	b.n	8006210 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2204      	movs	r2, #4
 8006144:	4013      	ands	r3, r2
 8006146:	d052      	beq.n	80061ee <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	2380      	movs	r3, #128	; 0x80
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	401a      	ands	r2, r3
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	429a      	cmp	r2, r3
 800615a:	d148      	bne.n	80061ee <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2280      	movs	r2, #128	; 0x80
 8006162:	0112      	lsls	r2, r2, #4
 8006164:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006166:	f3ef 8310 	mrs	r3, PRIMASK
 800616a:	613b      	str	r3, [r7, #16]
  return(result);
 800616c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800616e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f383 8810 	msr	PRIMASK, r3
}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4924      	ldr	r1, [pc, #144]	; (8006218 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006188:	400a      	ands	r2, r1
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800618e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f383 8810 	msr	PRIMASK, r3
}
 8006196:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006198:	f3ef 8310 	mrs	r3, PRIMASK
 800619c:	61fb      	str	r3, [r7, #28]
  return(result);
 800619e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061a2:	2301      	movs	r3, #1
 80061a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	f383 8810 	msr	PRIMASK, r3
}
 80061ac:	46c0      	nop			; (mov r8, r8)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2101      	movs	r1, #1
 80061ba:	438a      	bics	r2, r1
 80061bc:	609a      	str	r2, [r3, #8]
 80061be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c4:	f383 8810 	msr	PRIMASK, r3
}
 80061c8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2284      	movs	r2, #132	; 0x84
 80061ce:	2120      	movs	r1, #32
 80061d0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2288      	movs	r2, #136	; 0x88
 80061d6:	2120      	movs	r1, #32
 80061d8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	228c      	movs	r2, #140	; 0x8c
 80061de:	2120      	movs	r1, #32
 80061e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2280      	movs	r2, #128	; 0x80
 80061e6:	2100      	movs	r1, #0
 80061e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e010      	b.n	8006210 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	4013      	ands	r3, r2
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	425a      	negs	r2, r3
 80061fe:	4153      	adcs	r3, r2
 8006200:	b2db      	uxtb	r3, r3
 8006202:	001a      	movs	r2, r3
 8006204:	1dfb      	adds	r3, r7, #7
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d100      	bne.n	800620e <UART_WaitOnFlagUntilTimeout+0x182>
 800620c:	e747      	b.n	800609e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	0018      	movs	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	b014      	add	sp, #80	; 0x50
 8006216:	bd80      	pop	{r7, pc}
 8006218:	fffffe5f 	.word	0xfffffe5f

0800621c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2280      	movs	r2, #128	; 0x80
 8006228:	5c9b      	ldrb	r3, [r3, r2]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_UARTEx_DisableFifoMode+0x16>
 800622e:	2302      	movs	r3, #2
 8006230:	e027      	b.n	8006282 <HAL_UARTEx_DisableFifoMode+0x66>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2280      	movs	r2, #128	; 0x80
 8006236:	2101      	movs	r1, #1
 8006238:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2284      	movs	r2, #132	; 0x84
 800623e:	2124      	movs	r1, #36	; 0x24
 8006240:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2101      	movs	r1, #1
 8006256:	438a      	bics	r2, r1
 8006258:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4a0b      	ldr	r2, [pc, #44]	; (800628c <HAL_UARTEx_DisableFifoMode+0x70>)
 800625e:	4013      	ands	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2284      	movs	r2, #132	; 0x84
 8006274:	2120      	movs	r1, #32
 8006276:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2280      	movs	r2, #128	; 0x80
 800627c:	2100      	movs	r1, #0
 800627e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	0018      	movs	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	b004      	add	sp, #16
 8006288:	bd80      	pop	{r7, pc}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	dfffffff 	.word	0xdfffffff

08006290 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2280      	movs	r2, #128	; 0x80
 800629e:	5c9b      	ldrb	r3, [r3, r2]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e02e      	b.n	8006306 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2280      	movs	r2, #128	; 0x80
 80062ac:	2101      	movs	r1, #1
 80062ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2284      	movs	r2, #132	; 0x84
 80062b4:	2124      	movs	r1, #36	; 0x24
 80062b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2101      	movs	r1, #1
 80062cc:	438a      	bics	r2, r1
 80062ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	08d9      	lsrs	r1, r3, #3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	0018      	movs	r0, r3
 80062e8:	f000 f854 	bl	8006394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2284      	movs	r2, #132	; 0x84
 80062f8:	2120      	movs	r1, #32
 80062fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2280      	movs	r2, #128	; 0x80
 8006300:	2100      	movs	r1, #0
 8006302:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	0018      	movs	r0, r3
 8006308:	46bd      	mov	sp, r7
 800630a:	b004      	add	sp, #16
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2280      	movs	r2, #128	; 0x80
 800631e:	5c9b      	ldrb	r3, [r3, r2]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006324:	2302      	movs	r3, #2
 8006326:	e02f      	b.n	8006388 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2280      	movs	r2, #128	; 0x80
 800632c:	2101      	movs	r1, #1
 800632e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2284      	movs	r2, #132	; 0x84
 8006334:	2124      	movs	r1, #36	; 0x24
 8006336:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2101      	movs	r1, #1
 800634c:	438a      	bics	r2, r1
 800634e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	4a0e      	ldr	r2, [pc, #56]	; (8006390 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006358:	4013      	ands	r3, r2
 800635a:	0019      	movs	r1, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	0018      	movs	r0, r3
 800636a:	f000 f813 	bl	8006394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2284      	movs	r2, #132	; 0x84
 800637a:	2120      	movs	r1, #32
 800637c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2280      	movs	r2, #128	; 0x80
 8006382:	2100      	movs	r1, #0
 8006384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	0018      	movs	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	b004      	add	sp, #16
 800638e:	bd80      	pop	{r7, pc}
 8006390:	f1ffffff 	.word	0xf1ffffff

08006394 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d108      	bne.n	80063b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	226a      	movs	r2, #106	; 0x6a
 80063a8:	2101      	movs	r1, #1
 80063aa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2268      	movs	r2, #104	; 0x68
 80063b0:	2101      	movs	r1, #1
 80063b2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063b4:	e043      	b.n	800643e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063b6:	260f      	movs	r6, #15
 80063b8:	19bb      	adds	r3, r7, r6
 80063ba:	2208      	movs	r2, #8
 80063bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063be:	200e      	movs	r0, #14
 80063c0:	183b      	adds	r3, r7, r0
 80063c2:	2208      	movs	r2, #8
 80063c4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	0e5b      	lsrs	r3, r3, #25
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	240d      	movs	r4, #13
 80063d2:	193b      	adds	r3, r7, r4
 80063d4:	2107      	movs	r1, #7
 80063d6:	400a      	ands	r2, r1
 80063d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	0f5b      	lsrs	r3, r3, #29
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	250c      	movs	r5, #12
 80063e6:	197b      	adds	r3, r7, r5
 80063e8:	2107      	movs	r1, #7
 80063ea:	400a      	ands	r2, r1
 80063ec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ee:	183b      	adds	r3, r7, r0
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	197a      	adds	r2, r7, r5
 80063f4:	7812      	ldrb	r2, [r2, #0]
 80063f6:	4914      	ldr	r1, [pc, #80]	; (8006448 <UARTEx_SetNbDataToProcess+0xb4>)
 80063f8:	5c8a      	ldrb	r2, [r1, r2]
 80063fa:	435a      	muls	r2, r3
 80063fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80063fe:	197b      	adds	r3, r7, r5
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	4a12      	ldr	r2, [pc, #72]	; (800644c <UARTEx_SetNbDataToProcess+0xb8>)
 8006404:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006406:	0019      	movs	r1, r3
 8006408:	f7f9 ff16 	bl	8000238 <__divsi3>
 800640c:	0003      	movs	r3, r0
 800640e:	b299      	uxth	r1, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	226a      	movs	r2, #106	; 0x6a
 8006414:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006416:	19bb      	adds	r3, r7, r6
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	193a      	adds	r2, r7, r4
 800641c:	7812      	ldrb	r2, [r2, #0]
 800641e:	490a      	ldr	r1, [pc, #40]	; (8006448 <UARTEx_SetNbDataToProcess+0xb4>)
 8006420:	5c8a      	ldrb	r2, [r1, r2]
 8006422:	435a      	muls	r2, r3
 8006424:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006426:	193b      	adds	r3, r7, r4
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	4a08      	ldr	r2, [pc, #32]	; (800644c <UARTEx_SetNbDataToProcess+0xb8>)
 800642c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800642e:	0019      	movs	r1, r3
 8006430:	f7f9 ff02 	bl	8000238 <__divsi3>
 8006434:	0003      	movs	r3, r0
 8006436:	b299      	uxth	r1, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2268      	movs	r2, #104	; 0x68
 800643c:	5299      	strh	r1, [r3, r2]
}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	46bd      	mov	sp, r7
 8006442:	b005      	add	sp, #20
 8006444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006446:	46c0      	nop			; (mov r8, r8)
 8006448:	08006f20 	.word	0x08006f20
 800644c:	08006f28 	.word	0x08006f28

08006450 <__errno>:
 8006450:	4b01      	ldr	r3, [pc, #4]	; (8006458 <__errno+0x8>)
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	4770      	bx	lr
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	2000001c 	.word	0x2000001c

0800645c <__libc_init_array>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	2600      	movs	r6, #0
 8006460:	4d0c      	ldr	r5, [pc, #48]	; (8006494 <__libc_init_array+0x38>)
 8006462:	4c0d      	ldr	r4, [pc, #52]	; (8006498 <__libc_init_array+0x3c>)
 8006464:	1b64      	subs	r4, r4, r5
 8006466:	10a4      	asrs	r4, r4, #2
 8006468:	42a6      	cmp	r6, r4
 800646a:	d109      	bne.n	8006480 <__libc_init_array+0x24>
 800646c:	2600      	movs	r6, #0
 800646e:	f000 fc47 	bl	8006d00 <_init>
 8006472:	4d0a      	ldr	r5, [pc, #40]	; (800649c <__libc_init_array+0x40>)
 8006474:	4c0a      	ldr	r4, [pc, #40]	; (80064a0 <__libc_init_array+0x44>)
 8006476:	1b64      	subs	r4, r4, r5
 8006478:	10a4      	asrs	r4, r4, #2
 800647a:	42a6      	cmp	r6, r4
 800647c:	d105      	bne.n	800648a <__libc_init_array+0x2e>
 800647e:	bd70      	pop	{r4, r5, r6, pc}
 8006480:	00b3      	lsls	r3, r6, #2
 8006482:	58eb      	ldr	r3, [r5, r3]
 8006484:	4798      	blx	r3
 8006486:	3601      	adds	r6, #1
 8006488:	e7ee      	b.n	8006468 <__libc_init_array+0xc>
 800648a:	00b3      	lsls	r3, r6, #2
 800648c:	58eb      	ldr	r3, [r5, r3]
 800648e:	4798      	blx	r3
 8006490:	3601      	adds	r6, #1
 8006492:	e7f2      	b.n	800647a <__libc_init_array+0x1e>
 8006494:	08006f64 	.word	0x08006f64
 8006498:	08006f64 	.word	0x08006f64
 800649c:	08006f64 	.word	0x08006f64
 80064a0:	08006f68 	.word	0x08006f68

080064a4 <memset>:
 80064a4:	0003      	movs	r3, r0
 80064a6:	1882      	adds	r2, r0, r2
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d100      	bne.n	80064ae <memset+0xa>
 80064ac:	4770      	bx	lr
 80064ae:	7019      	strb	r1, [r3, #0]
 80064b0:	3301      	adds	r3, #1
 80064b2:	e7f9      	b.n	80064a8 <memset+0x4>

080064b4 <siprintf>:
 80064b4:	b40e      	push	{r1, r2, r3}
 80064b6:	b500      	push	{lr}
 80064b8:	490b      	ldr	r1, [pc, #44]	; (80064e8 <siprintf+0x34>)
 80064ba:	b09c      	sub	sp, #112	; 0x70
 80064bc:	ab1d      	add	r3, sp, #116	; 0x74
 80064be:	9002      	str	r0, [sp, #8]
 80064c0:	9006      	str	r0, [sp, #24]
 80064c2:	9107      	str	r1, [sp, #28]
 80064c4:	9104      	str	r1, [sp, #16]
 80064c6:	4809      	ldr	r0, [pc, #36]	; (80064ec <siprintf+0x38>)
 80064c8:	4909      	ldr	r1, [pc, #36]	; (80064f0 <siprintf+0x3c>)
 80064ca:	cb04      	ldmia	r3!, {r2}
 80064cc:	9105      	str	r1, [sp, #20]
 80064ce:	6800      	ldr	r0, [r0, #0]
 80064d0:	a902      	add	r1, sp, #8
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	f000 f870 	bl	80065b8 <_svfiprintf_r>
 80064d8:	2300      	movs	r3, #0
 80064da:	9a02      	ldr	r2, [sp, #8]
 80064dc:	7013      	strb	r3, [r2, #0]
 80064de:	b01c      	add	sp, #112	; 0x70
 80064e0:	bc08      	pop	{r3}
 80064e2:	b003      	add	sp, #12
 80064e4:	4718      	bx	r3
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	7fffffff 	.word	0x7fffffff
 80064ec:	2000001c 	.word	0x2000001c
 80064f0:	ffff0208 	.word	0xffff0208

080064f4 <__ssputs_r>:
 80064f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f6:	688e      	ldr	r6, [r1, #8]
 80064f8:	b085      	sub	sp, #20
 80064fa:	0007      	movs	r7, r0
 80064fc:	000c      	movs	r4, r1
 80064fe:	9203      	str	r2, [sp, #12]
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	429e      	cmp	r6, r3
 8006504:	d83c      	bhi.n	8006580 <__ssputs_r+0x8c>
 8006506:	2390      	movs	r3, #144	; 0x90
 8006508:	898a      	ldrh	r2, [r1, #12]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	421a      	tst	r2, r3
 800650e:	d034      	beq.n	800657a <__ssputs_r+0x86>
 8006510:	2503      	movs	r5, #3
 8006512:	6909      	ldr	r1, [r1, #16]
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	1a5b      	subs	r3, r3, r1
 8006518:	9302      	str	r3, [sp, #8]
 800651a:	6963      	ldr	r3, [r4, #20]
 800651c:	9802      	ldr	r0, [sp, #8]
 800651e:	435d      	muls	r5, r3
 8006520:	0feb      	lsrs	r3, r5, #31
 8006522:	195d      	adds	r5, r3, r5
 8006524:	9b01      	ldr	r3, [sp, #4]
 8006526:	106d      	asrs	r5, r5, #1
 8006528:	3301      	adds	r3, #1
 800652a:	181b      	adds	r3, r3, r0
 800652c:	42ab      	cmp	r3, r5
 800652e:	d900      	bls.n	8006532 <__ssputs_r+0x3e>
 8006530:	001d      	movs	r5, r3
 8006532:	0553      	lsls	r3, r2, #21
 8006534:	d532      	bpl.n	800659c <__ssputs_r+0xa8>
 8006536:	0029      	movs	r1, r5
 8006538:	0038      	movs	r0, r7
 800653a:	f000 fb31 	bl	8006ba0 <_malloc_r>
 800653e:	1e06      	subs	r6, r0, #0
 8006540:	d109      	bne.n	8006556 <__ssputs_r+0x62>
 8006542:	230c      	movs	r3, #12
 8006544:	603b      	str	r3, [r7, #0]
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	2001      	movs	r0, #1
 800654a:	89a2      	ldrh	r2, [r4, #12]
 800654c:	4240      	negs	r0, r0
 800654e:	4313      	orrs	r3, r2
 8006550:	81a3      	strh	r3, [r4, #12]
 8006552:	b005      	add	sp, #20
 8006554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006556:	9a02      	ldr	r2, [sp, #8]
 8006558:	6921      	ldr	r1, [r4, #16]
 800655a:	f000 faba 	bl	8006ad2 <memcpy>
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	4a14      	ldr	r2, [pc, #80]	; (80065b4 <__ssputs_r+0xc0>)
 8006562:	401a      	ands	r2, r3
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	4313      	orrs	r3, r2
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	9b02      	ldr	r3, [sp, #8]
 800656c:	6126      	str	r6, [r4, #16]
 800656e:	18f6      	adds	r6, r6, r3
 8006570:	6026      	str	r6, [r4, #0]
 8006572:	6165      	str	r5, [r4, #20]
 8006574:	9e01      	ldr	r6, [sp, #4]
 8006576:	1aed      	subs	r5, r5, r3
 8006578:	60a5      	str	r5, [r4, #8]
 800657a:	9b01      	ldr	r3, [sp, #4]
 800657c:	429e      	cmp	r6, r3
 800657e:	d900      	bls.n	8006582 <__ssputs_r+0x8e>
 8006580:	9e01      	ldr	r6, [sp, #4]
 8006582:	0032      	movs	r2, r6
 8006584:	9903      	ldr	r1, [sp, #12]
 8006586:	6820      	ldr	r0, [r4, #0]
 8006588:	f000 faac 	bl	8006ae4 <memmove>
 800658c:	68a3      	ldr	r3, [r4, #8]
 800658e:	2000      	movs	r0, #0
 8006590:	1b9b      	subs	r3, r3, r6
 8006592:	60a3      	str	r3, [r4, #8]
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	199e      	adds	r6, r3, r6
 8006598:	6026      	str	r6, [r4, #0]
 800659a:	e7da      	b.n	8006552 <__ssputs_r+0x5e>
 800659c:	002a      	movs	r2, r5
 800659e:	0038      	movs	r0, r7
 80065a0:	f000 fb5c 	bl	8006c5c <_realloc_r>
 80065a4:	1e06      	subs	r6, r0, #0
 80065a6:	d1e0      	bne.n	800656a <__ssputs_r+0x76>
 80065a8:	0038      	movs	r0, r7
 80065aa:	6921      	ldr	r1, [r4, #16]
 80065ac:	f000 faae 	bl	8006b0c <_free_r>
 80065b0:	e7c7      	b.n	8006542 <__ssputs_r+0x4e>
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	fffffb7f 	.word	0xfffffb7f

080065b8 <_svfiprintf_r>:
 80065b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ba:	b0a1      	sub	sp, #132	; 0x84
 80065bc:	9003      	str	r0, [sp, #12]
 80065be:	001d      	movs	r5, r3
 80065c0:	898b      	ldrh	r3, [r1, #12]
 80065c2:	000f      	movs	r7, r1
 80065c4:	0016      	movs	r6, r2
 80065c6:	061b      	lsls	r3, r3, #24
 80065c8:	d511      	bpl.n	80065ee <_svfiprintf_r+0x36>
 80065ca:	690b      	ldr	r3, [r1, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10e      	bne.n	80065ee <_svfiprintf_r+0x36>
 80065d0:	2140      	movs	r1, #64	; 0x40
 80065d2:	f000 fae5 	bl	8006ba0 <_malloc_r>
 80065d6:	6038      	str	r0, [r7, #0]
 80065d8:	6138      	str	r0, [r7, #16]
 80065da:	2800      	cmp	r0, #0
 80065dc:	d105      	bne.n	80065ea <_svfiprintf_r+0x32>
 80065de:	230c      	movs	r3, #12
 80065e0:	9a03      	ldr	r2, [sp, #12]
 80065e2:	3801      	subs	r0, #1
 80065e4:	6013      	str	r3, [r2, #0]
 80065e6:	b021      	add	sp, #132	; 0x84
 80065e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ea:	2340      	movs	r3, #64	; 0x40
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	2300      	movs	r3, #0
 80065f0:	ac08      	add	r4, sp, #32
 80065f2:	6163      	str	r3, [r4, #20]
 80065f4:	3320      	adds	r3, #32
 80065f6:	7663      	strb	r3, [r4, #25]
 80065f8:	3310      	adds	r3, #16
 80065fa:	76a3      	strb	r3, [r4, #26]
 80065fc:	9507      	str	r5, [sp, #28]
 80065fe:	0035      	movs	r5, r6
 8006600:	782b      	ldrb	r3, [r5, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <_svfiprintf_r+0x52>
 8006606:	2b25      	cmp	r3, #37	; 0x25
 8006608:	d147      	bne.n	800669a <_svfiprintf_r+0xe2>
 800660a:	1bab      	subs	r3, r5, r6
 800660c:	9305      	str	r3, [sp, #20]
 800660e:	42b5      	cmp	r5, r6
 8006610:	d00c      	beq.n	800662c <_svfiprintf_r+0x74>
 8006612:	0032      	movs	r2, r6
 8006614:	0039      	movs	r1, r7
 8006616:	9803      	ldr	r0, [sp, #12]
 8006618:	f7ff ff6c 	bl	80064f4 <__ssputs_r>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d100      	bne.n	8006622 <_svfiprintf_r+0x6a>
 8006620:	e0ae      	b.n	8006780 <_svfiprintf_r+0x1c8>
 8006622:	6962      	ldr	r2, [r4, #20]
 8006624:	9b05      	ldr	r3, [sp, #20]
 8006626:	4694      	mov	ip, r2
 8006628:	4463      	add	r3, ip
 800662a:	6163      	str	r3, [r4, #20]
 800662c:	782b      	ldrb	r3, [r5, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d100      	bne.n	8006634 <_svfiprintf_r+0x7c>
 8006632:	e0a5      	b.n	8006780 <_svfiprintf_r+0x1c8>
 8006634:	2201      	movs	r2, #1
 8006636:	2300      	movs	r3, #0
 8006638:	4252      	negs	r2, r2
 800663a:	6062      	str	r2, [r4, #4]
 800663c:	a904      	add	r1, sp, #16
 800663e:	3254      	adds	r2, #84	; 0x54
 8006640:	1852      	adds	r2, r2, r1
 8006642:	1c6e      	adds	r6, r5, #1
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	60e3      	str	r3, [r4, #12]
 8006648:	60a3      	str	r3, [r4, #8]
 800664a:	7013      	strb	r3, [r2, #0]
 800664c:	65a3      	str	r3, [r4, #88]	; 0x58
 800664e:	2205      	movs	r2, #5
 8006650:	7831      	ldrb	r1, [r6, #0]
 8006652:	4854      	ldr	r0, [pc, #336]	; (80067a4 <_svfiprintf_r+0x1ec>)
 8006654:	f000 fa32 	bl	8006abc <memchr>
 8006658:	1c75      	adds	r5, r6, #1
 800665a:	2800      	cmp	r0, #0
 800665c:	d11f      	bne.n	800669e <_svfiprintf_r+0xe6>
 800665e:	6822      	ldr	r2, [r4, #0]
 8006660:	06d3      	lsls	r3, r2, #27
 8006662:	d504      	bpl.n	800666e <_svfiprintf_r+0xb6>
 8006664:	2353      	movs	r3, #83	; 0x53
 8006666:	a904      	add	r1, sp, #16
 8006668:	185b      	adds	r3, r3, r1
 800666a:	2120      	movs	r1, #32
 800666c:	7019      	strb	r1, [r3, #0]
 800666e:	0713      	lsls	r3, r2, #28
 8006670:	d504      	bpl.n	800667c <_svfiprintf_r+0xc4>
 8006672:	2353      	movs	r3, #83	; 0x53
 8006674:	a904      	add	r1, sp, #16
 8006676:	185b      	adds	r3, r3, r1
 8006678:	212b      	movs	r1, #43	; 0x2b
 800667a:	7019      	strb	r1, [r3, #0]
 800667c:	7833      	ldrb	r3, [r6, #0]
 800667e:	2b2a      	cmp	r3, #42	; 0x2a
 8006680:	d016      	beq.n	80066b0 <_svfiprintf_r+0xf8>
 8006682:	0035      	movs	r5, r6
 8006684:	2100      	movs	r1, #0
 8006686:	200a      	movs	r0, #10
 8006688:	68e3      	ldr	r3, [r4, #12]
 800668a:	782a      	ldrb	r2, [r5, #0]
 800668c:	1c6e      	adds	r6, r5, #1
 800668e:	3a30      	subs	r2, #48	; 0x30
 8006690:	2a09      	cmp	r2, #9
 8006692:	d94e      	bls.n	8006732 <_svfiprintf_r+0x17a>
 8006694:	2900      	cmp	r1, #0
 8006696:	d111      	bne.n	80066bc <_svfiprintf_r+0x104>
 8006698:	e017      	b.n	80066ca <_svfiprintf_r+0x112>
 800669a:	3501      	adds	r5, #1
 800669c:	e7b0      	b.n	8006600 <_svfiprintf_r+0x48>
 800669e:	4b41      	ldr	r3, [pc, #260]	; (80067a4 <_svfiprintf_r+0x1ec>)
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	1ac0      	subs	r0, r0, r3
 80066a4:	2301      	movs	r3, #1
 80066a6:	4083      	lsls	r3, r0
 80066a8:	4313      	orrs	r3, r2
 80066aa:	002e      	movs	r6, r5
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	e7ce      	b.n	800664e <_svfiprintf_r+0x96>
 80066b0:	9b07      	ldr	r3, [sp, #28]
 80066b2:	1d19      	adds	r1, r3, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	9107      	str	r1, [sp, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	db01      	blt.n	80066c0 <_svfiprintf_r+0x108>
 80066bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80066be:	e004      	b.n	80066ca <_svfiprintf_r+0x112>
 80066c0:	425b      	negs	r3, r3
 80066c2:	60e3      	str	r3, [r4, #12]
 80066c4:	2302      	movs	r3, #2
 80066c6:	4313      	orrs	r3, r2
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	782b      	ldrb	r3, [r5, #0]
 80066cc:	2b2e      	cmp	r3, #46	; 0x2e
 80066ce:	d10a      	bne.n	80066e6 <_svfiprintf_r+0x12e>
 80066d0:	786b      	ldrb	r3, [r5, #1]
 80066d2:	2b2a      	cmp	r3, #42	; 0x2a
 80066d4:	d135      	bne.n	8006742 <_svfiprintf_r+0x18a>
 80066d6:	9b07      	ldr	r3, [sp, #28]
 80066d8:	3502      	adds	r5, #2
 80066da:	1d1a      	adds	r2, r3, #4
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	9207      	str	r2, [sp, #28]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	db2b      	blt.n	800673c <_svfiprintf_r+0x184>
 80066e4:	9309      	str	r3, [sp, #36]	; 0x24
 80066e6:	4e30      	ldr	r6, [pc, #192]	; (80067a8 <_svfiprintf_r+0x1f0>)
 80066e8:	2203      	movs	r2, #3
 80066ea:	0030      	movs	r0, r6
 80066ec:	7829      	ldrb	r1, [r5, #0]
 80066ee:	f000 f9e5 	bl	8006abc <memchr>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d006      	beq.n	8006704 <_svfiprintf_r+0x14c>
 80066f6:	2340      	movs	r3, #64	; 0x40
 80066f8:	1b80      	subs	r0, r0, r6
 80066fa:	4083      	lsls	r3, r0
 80066fc:	6822      	ldr	r2, [r4, #0]
 80066fe:	3501      	adds	r5, #1
 8006700:	4313      	orrs	r3, r2
 8006702:	6023      	str	r3, [r4, #0]
 8006704:	7829      	ldrb	r1, [r5, #0]
 8006706:	2206      	movs	r2, #6
 8006708:	4828      	ldr	r0, [pc, #160]	; (80067ac <_svfiprintf_r+0x1f4>)
 800670a:	1c6e      	adds	r6, r5, #1
 800670c:	7621      	strb	r1, [r4, #24]
 800670e:	f000 f9d5 	bl	8006abc <memchr>
 8006712:	2800      	cmp	r0, #0
 8006714:	d03c      	beq.n	8006790 <_svfiprintf_r+0x1d8>
 8006716:	4b26      	ldr	r3, [pc, #152]	; (80067b0 <_svfiprintf_r+0x1f8>)
 8006718:	2b00      	cmp	r3, #0
 800671a:	d125      	bne.n	8006768 <_svfiprintf_r+0x1b0>
 800671c:	2207      	movs	r2, #7
 800671e:	9b07      	ldr	r3, [sp, #28]
 8006720:	3307      	adds	r3, #7
 8006722:	4393      	bics	r3, r2
 8006724:	3308      	adds	r3, #8
 8006726:	9307      	str	r3, [sp, #28]
 8006728:	6963      	ldr	r3, [r4, #20]
 800672a:	9a04      	ldr	r2, [sp, #16]
 800672c:	189b      	adds	r3, r3, r2
 800672e:	6163      	str	r3, [r4, #20]
 8006730:	e765      	b.n	80065fe <_svfiprintf_r+0x46>
 8006732:	4343      	muls	r3, r0
 8006734:	0035      	movs	r5, r6
 8006736:	2101      	movs	r1, #1
 8006738:	189b      	adds	r3, r3, r2
 800673a:	e7a6      	b.n	800668a <_svfiprintf_r+0xd2>
 800673c:	2301      	movs	r3, #1
 800673e:	425b      	negs	r3, r3
 8006740:	e7d0      	b.n	80066e4 <_svfiprintf_r+0x12c>
 8006742:	2300      	movs	r3, #0
 8006744:	200a      	movs	r0, #10
 8006746:	001a      	movs	r2, r3
 8006748:	3501      	adds	r5, #1
 800674a:	6063      	str	r3, [r4, #4]
 800674c:	7829      	ldrb	r1, [r5, #0]
 800674e:	1c6e      	adds	r6, r5, #1
 8006750:	3930      	subs	r1, #48	; 0x30
 8006752:	2909      	cmp	r1, #9
 8006754:	d903      	bls.n	800675e <_svfiprintf_r+0x1a6>
 8006756:	2b00      	cmp	r3, #0
 8006758:	d0c5      	beq.n	80066e6 <_svfiprintf_r+0x12e>
 800675a:	9209      	str	r2, [sp, #36]	; 0x24
 800675c:	e7c3      	b.n	80066e6 <_svfiprintf_r+0x12e>
 800675e:	4342      	muls	r2, r0
 8006760:	0035      	movs	r5, r6
 8006762:	2301      	movs	r3, #1
 8006764:	1852      	adds	r2, r2, r1
 8006766:	e7f1      	b.n	800674c <_svfiprintf_r+0x194>
 8006768:	ab07      	add	r3, sp, #28
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	003a      	movs	r2, r7
 800676e:	0021      	movs	r1, r4
 8006770:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <_svfiprintf_r+0x1fc>)
 8006772:	9803      	ldr	r0, [sp, #12]
 8006774:	e000      	b.n	8006778 <_svfiprintf_r+0x1c0>
 8006776:	bf00      	nop
 8006778:	9004      	str	r0, [sp, #16]
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	3301      	adds	r3, #1
 800677e:	d1d3      	bne.n	8006728 <_svfiprintf_r+0x170>
 8006780:	89bb      	ldrh	r3, [r7, #12]
 8006782:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006784:	065b      	lsls	r3, r3, #25
 8006786:	d400      	bmi.n	800678a <_svfiprintf_r+0x1d2>
 8006788:	e72d      	b.n	80065e6 <_svfiprintf_r+0x2e>
 800678a:	2001      	movs	r0, #1
 800678c:	4240      	negs	r0, r0
 800678e:	e72a      	b.n	80065e6 <_svfiprintf_r+0x2e>
 8006790:	ab07      	add	r3, sp, #28
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	003a      	movs	r2, r7
 8006796:	0021      	movs	r1, r4
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <_svfiprintf_r+0x1fc>)
 800679a:	9803      	ldr	r0, [sp, #12]
 800679c:	f000 f87c 	bl	8006898 <_printf_i>
 80067a0:	e7ea      	b.n	8006778 <_svfiprintf_r+0x1c0>
 80067a2:	46c0      	nop			; (mov r8, r8)
 80067a4:	08006f30 	.word	0x08006f30
 80067a8:	08006f36 	.word	0x08006f36
 80067ac:	08006f3a 	.word	0x08006f3a
 80067b0:	00000000 	.word	0x00000000
 80067b4:	080064f5 	.word	0x080064f5

080067b8 <_printf_common>:
 80067b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ba:	0015      	movs	r5, r2
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	688a      	ldr	r2, [r1, #8]
 80067c0:	690b      	ldr	r3, [r1, #16]
 80067c2:	000c      	movs	r4, r1
 80067c4:	9000      	str	r0, [sp, #0]
 80067c6:	4293      	cmp	r3, r2
 80067c8:	da00      	bge.n	80067cc <_printf_common+0x14>
 80067ca:	0013      	movs	r3, r2
 80067cc:	0022      	movs	r2, r4
 80067ce:	602b      	str	r3, [r5, #0]
 80067d0:	3243      	adds	r2, #67	; 0x43
 80067d2:	7812      	ldrb	r2, [r2, #0]
 80067d4:	2a00      	cmp	r2, #0
 80067d6:	d001      	beq.n	80067dc <_printf_common+0x24>
 80067d8:	3301      	adds	r3, #1
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	069b      	lsls	r3, r3, #26
 80067e0:	d502      	bpl.n	80067e8 <_printf_common+0x30>
 80067e2:	682b      	ldr	r3, [r5, #0]
 80067e4:	3302      	adds	r3, #2
 80067e6:	602b      	str	r3, [r5, #0]
 80067e8:	6822      	ldr	r2, [r4, #0]
 80067ea:	2306      	movs	r3, #6
 80067ec:	0017      	movs	r7, r2
 80067ee:	401f      	ands	r7, r3
 80067f0:	421a      	tst	r2, r3
 80067f2:	d027      	beq.n	8006844 <_printf_common+0x8c>
 80067f4:	0023      	movs	r3, r4
 80067f6:	3343      	adds	r3, #67	; 0x43
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	1e5a      	subs	r2, r3, #1
 80067fc:	4193      	sbcs	r3, r2
 80067fe:	6822      	ldr	r2, [r4, #0]
 8006800:	0692      	lsls	r2, r2, #26
 8006802:	d430      	bmi.n	8006866 <_printf_common+0xae>
 8006804:	0022      	movs	r2, r4
 8006806:	9901      	ldr	r1, [sp, #4]
 8006808:	9800      	ldr	r0, [sp, #0]
 800680a:	9e08      	ldr	r6, [sp, #32]
 800680c:	3243      	adds	r2, #67	; 0x43
 800680e:	47b0      	blx	r6
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d025      	beq.n	8006860 <_printf_common+0xa8>
 8006814:	2306      	movs	r3, #6
 8006816:	6820      	ldr	r0, [r4, #0]
 8006818:	682a      	ldr	r2, [r5, #0]
 800681a:	68e1      	ldr	r1, [r4, #12]
 800681c:	2500      	movs	r5, #0
 800681e:	4003      	ands	r3, r0
 8006820:	2b04      	cmp	r3, #4
 8006822:	d103      	bne.n	800682c <_printf_common+0x74>
 8006824:	1a8d      	subs	r5, r1, r2
 8006826:	43eb      	mvns	r3, r5
 8006828:	17db      	asrs	r3, r3, #31
 800682a:	401d      	ands	r5, r3
 800682c:	68a3      	ldr	r3, [r4, #8]
 800682e:	6922      	ldr	r2, [r4, #16]
 8006830:	4293      	cmp	r3, r2
 8006832:	dd01      	ble.n	8006838 <_printf_common+0x80>
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	18ed      	adds	r5, r5, r3
 8006838:	2700      	movs	r7, #0
 800683a:	42bd      	cmp	r5, r7
 800683c:	d120      	bne.n	8006880 <_printf_common+0xc8>
 800683e:	2000      	movs	r0, #0
 8006840:	e010      	b.n	8006864 <_printf_common+0xac>
 8006842:	3701      	adds	r7, #1
 8006844:	68e3      	ldr	r3, [r4, #12]
 8006846:	682a      	ldr	r2, [r5, #0]
 8006848:	1a9b      	subs	r3, r3, r2
 800684a:	42bb      	cmp	r3, r7
 800684c:	ddd2      	ble.n	80067f4 <_printf_common+0x3c>
 800684e:	0022      	movs	r2, r4
 8006850:	2301      	movs	r3, #1
 8006852:	9901      	ldr	r1, [sp, #4]
 8006854:	9800      	ldr	r0, [sp, #0]
 8006856:	9e08      	ldr	r6, [sp, #32]
 8006858:	3219      	adds	r2, #25
 800685a:	47b0      	blx	r6
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d1f0      	bne.n	8006842 <_printf_common+0x8a>
 8006860:	2001      	movs	r0, #1
 8006862:	4240      	negs	r0, r0
 8006864:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006866:	2030      	movs	r0, #48	; 0x30
 8006868:	18e1      	adds	r1, r4, r3
 800686a:	3143      	adds	r1, #67	; 0x43
 800686c:	7008      	strb	r0, [r1, #0]
 800686e:	0021      	movs	r1, r4
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	3145      	adds	r1, #69	; 0x45
 8006874:	7809      	ldrb	r1, [r1, #0]
 8006876:	18a2      	adds	r2, r4, r2
 8006878:	3243      	adds	r2, #67	; 0x43
 800687a:	3302      	adds	r3, #2
 800687c:	7011      	strb	r1, [r2, #0]
 800687e:	e7c1      	b.n	8006804 <_printf_common+0x4c>
 8006880:	0022      	movs	r2, r4
 8006882:	2301      	movs	r3, #1
 8006884:	9901      	ldr	r1, [sp, #4]
 8006886:	9800      	ldr	r0, [sp, #0]
 8006888:	9e08      	ldr	r6, [sp, #32]
 800688a:	321a      	adds	r2, #26
 800688c:	47b0      	blx	r6
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	d0e6      	beq.n	8006860 <_printf_common+0xa8>
 8006892:	3701      	adds	r7, #1
 8006894:	e7d1      	b.n	800683a <_printf_common+0x82>
	...

08006898 <_printf_i>:
 8006898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800689a:	b08b      	sub	sp, #44	; 0x2c
 800689c:	9206      	str	r2, [sp, #24]
 800689e:	000a      	movs	r2, r1
 80068a0:	3243      	adds	r2, #67	; 0x43
 80068a2:	9307      	str	r3, [sp, #28]
 80068a4:	9005      	str	r0, [sp, #20]
 80068a6:	9204      	str	r2, [sp, #16]
 80068a8:	7e0a      	ldrb	r2, [r1, #24]
 80068aa:	000c      	movs	r4, r1
 80068ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068ae:	2a78      	cmp	r2, #120	; 0x78
 80068b0:	d806      	bhi.n	80068c0 <_printf_i+0x28>
 80068b2:	2a62      	cmp	r2, #98	; 0x62
 80068b4:	d808      	bhi.n	80068c8 <_printf_i+0x30>
 80068b6:	2a00      	cmp	r2, #0
 80068b8:	d100      	bne.n	80068bc <_printf_i+0x24>
 80068ba:	e0c0      	b.n	8006a3e <_printf_i+0x1a6>
 80068bc:	2a58      	cmp	r2, #88	; 0x58
 80068be:	d052      	beq.n	8006966 <_printf_i+0xce>
 80068c0:	0026      	movs	r6, r4
 80068c2:	3642      	adds	r6, #66	; 0x42
 80068c4:	7032      	strb	r2, [r6, #0]
 80068c6:	e022      	b.n	800690e <_printf_i+0x76>
 80068c8:	0010      	movs	r0, r2
 80068ca:	3863      	subs	r0, #99	; 0x63
 80068cc:	2815      	cmp	r0, #21
 80068ce:	d8f7      	bhi.n	80068c0 <_printf_i+0x28>
 80068d0:	f7f9 fc1e 	bl	8000110 <__gnu_thumb1_case_shi>
 80068d4:	001f0016 	.word	0x001f0016
 80068d8:	fff6fff6 	.word	0xfff6fff6
 80068dc:	fff6fff6 	.word	0xfff6fff6
 80068e0:	fff6001f 	.word	0xfff6001f
 80068e4:	fff6fff6 	.word	0xfff6fff6
 80068e8:	00a8fff6 	.word	0x00a8fff6
 80068ec:	009a0036 	.word	0x009a0036
 80068f0:	fff6fff6 	.word	0xfff6fff6
 80068f4:	fff600b9 	.word	0xfff600b9
 80068f8:	fff60036 	.word	0xfff60036
 80068fc:	009efff6 	.word	0x009efff6
 8006900:	0026      	movs	r6, r4
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	3642      	adds	r6, #66	; 0x42
 8006906:	1d11      	adds	r1, r2, #4
 8006908:	6019      	str	r1, [r3, #0]
 800690a:	6813      	ldr	r3, [r2, #0]
 800690c:	7033      	strb	r3, [r6, #0]
 800690e:	2301      	movs	r3, #1
 8006910:	e0a7      	b.n	8006a62 <_printf_i+0x1ca>
 8006912:	6808      	ldr	r0, [r1, #0]
 8006914:	6819      	ldr	r1, [r3, #0]
 8006916:	1d0a      	adds	r2, r1, #4
 8006918:	0605      	lsls	r5, r0, #24
 800691a:	d50b      	bpl.n	8006934 <_printf_i+0x9c>
 800691c:	680d      	ldr	r5, [r1, #0]
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	2d00      	cmp	r5, #0
 8006922:	da03      	bge.n	800692c <_printf_i+0x94>
 8006924:	232d      	movs	r3, #45	; 0x2d
 8006926:	9a04      	ldr	r2, [sp, #16]
 8006928:	426d      	negs	r5, r5
 800692a:	7013      	strb	r3, [r2, #0]
 800692c:	4b61      	ldr	r3, [pc, #388]	; (8006ab4 <_printf_i+0x21c>)
 800692e:	270a      	movs	r7, #10
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	e032      	b.n	800699a <_printf_i+0x102>
 8006934:	680d      	ldr	r5, [r1, #0]
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	0641      	lsls	r1, r0, #25
 800693a:	d5f1      	bpl.n	8006920 <_printf_i+0x88>
 800693c:	b22d      	sxth	r5, r5
 800693e:	e7ef      	b.n	8006920 <_printf_i+0x88>
 8006940:	680d      	ldr	r5, [r1, #0]
 8006942:	6819      	ldr	r1, [r3, #0]
 8006944:	1d08      	adds	r0, r1, #4
 8006946:	6018      	str	r0, [r3, #0]
 8006948:	062e      	lsls	r6, r5, #24
 800694a:	d501      	bpl.n	8006950 <_printf_i+0xb8>
 800694c:	680d      	ldr	r5, [r1, #0]
 800694e:	e003      	b.n	8006958 <_printf_i+0xc0>
 8006950:	066d      	lsls	r5, r5, #25
 8006952:	d5fb      	bpl.n	800694c <_printf_i+0xb4>
 8006954:	680d      	ldr	r5, [r1, #0]
 8006956:	b2ad      	uxth	r5, r5
 8006958:	4b56      	ldr	r3, [pc, #344]	; (8006ab4 <_printf_i+0x21c>)
 800695a:	270a      	movs	r7, #10
 800695c:	9303      	str	r3, [sp, #12]
 800695e:	2a6f      	cmp	r2, #111	; 0x6f
 8006960:	d117      	bne.n	8006992 <_printf_i+0xfa>
 8006962:	2708      	movs	r7, #8
 8006964:	e015      	b.n	8006992 <_printf_i+0xfa>
 8006966:	3145      	adds	r1, #69	; 0x45
 8006968:	700a      	strb	r2, [r1, #0]
 800696a:	4a52      	ldr	r2, [pc, #328]	; (8006ab4 <_printf_i+0x21c>)
 800696c:	9203      	str	r2, [sp, #12]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	6821      	ldr	r1, [r4, #0]
 8006972:	ca20      	ldmia	r2!, {r5}
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	0608      	lsls	r0, r1, #24
 8006978:	d550      	bpl.n	8006a1c <_printf_i+0x184>
 800697a:	07cb      	lsls	r3, r1, #31
 800697c:	d502      	bpl.n	8006984 <_printf_i+0xec>
 800697e:	2320      	movs	r3, #32
 8006980:	4319      	orrs	r1, r3
 8006982:	6021      	str	r1, [r4, #0]
 8006984:	2710      	movs	r7, #16
 8006986:	2d00      	cmp	r5, #0
 8006988:	d103      	bne.n	8006992 <_printf_i+0xfa>
 800698a:	2320      	movs	r3, #32
 800698c:	6822      	ldr	r2, [r4, #0]
 800698e:	439a      	bics	r2, r3
 8006990:	6022      	str	r2, [r4, #0]
 8006992:	0023      	movs	r3, r4
 8006994:	2200      	movs	r2, #0
 8006996:	3343      	adds	r3, #67	; 0x43
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	6863      	ldr	r3, [r4, #4]
 800699c:	60a3      	str	r3, [r4, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	db03      	blt.n	80069aa <_printf_i+0x112>
 80069a2:	2204      	movs	r2, #4
 80069a4:	6821      	ldr	r1, [r4, #0]
 80069a6:	4391      	bics	r1, r2
 80069a8:	6021      	str	r1, [r4, #0]
 80069aa:	2d00      	cmp	r5, #0
 80069ac:	d102      	bne.n	80069b4 <_printf_i+0x11c>
 80069ae:	9e04      	ldr	r6, [sp, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00c      	beq.n	80069ce <_printf_i+0x136>
 80069b4:	9e04      	ldr	r6, [sp, #16]
 80069b6:	0028      	movs	r0, r5
 80069b8:	0039      	movs	r1, r7
 80069ba:	f7f9 fc39 	bl	8000230 <__aeabi_uidivmod>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	3e01      	subs	r6, #1
 80069c2:	5c5b      	ldrb	r3, [r3, r1]
 80069c4:	7033      	strb	r3, [r6, #0]
 80069c6:	002b      	movs	r3, r5
 80069c8:	0005      	movs	r5, r0
 80069ca:	429f      	cmp	r7, r3
 80069cc:	d9f3      	bls.n	80069b6 <_printf_i+0x11e>
 80069ce:	2f08      	cmp	r7, #8
 80069d0:	d109      	bne.n	80069e6 <_printf_i+0x14e>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	07db      	lsls	r3, r3, #31
 80069d6:	d506      	bpl.n	80069e6 <_printf_i+0x14e>
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	6922      	ldr	r2, [r4, #16]
 80069dc:	4293      	cmp	r3, r2
 80069de:	dc02      	bgt.n	80069e6 <_printf_i+0x14e>
 80069e0:	2330      	movs	r3, #48	; 0x30
 80069e2:	3e01      	subs	r6, #1
 80069e4:	7033      	strb	r3, [r6, #0]
 80069e6:	9b04      	ldr	r3, [sp, #16]
 80069e8:	1b9b      	subs	r3, r3, r6
 80069ea:	6123      	str	r3, [r4, #16]
 80069ec:	9b07      	ldr	r3, [sp, #28]
 80069ee:	0021      	movs	r1, r4
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	9805      	ldr	r0, [sp, #20]
 80069f4:	9b06      	ldr	r3, [sp, #24]
 80069f6:	aa09      	add	r2, sp, #36	; 0x24
 80069f8:	f7ff fede 	bl	80067b8 <_printf_common>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d135      	bne.n	8006a6c <_printf_i+0x1d4>
 8006a00:	2001      	movs	r0, #1
 8006a02:	4240      	negs	r0, r0
 8006a04:	b00b      	add	sp, #44	; 0x2c
 8006a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a08:	2220      	movs	r2, #32
 8006a0a:	6809      	ldr	r1, [r1, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	6022      	str	r2, [r4, #0]
 8006a10:	0022      	movs	r2, r4
 8006a12:	2178      	movs	r1, #120	; 0x78
 8006a14:	3245      	adds	r2, #69	; 0x45
 8006a16:	7011      	strb	r1, [r2, #0]
 8006a18:	4a27      	ldr	r2, [pc, #156]	; (8006ab8 <_printf_i+0x220>)
 8006a1a:	e7a7      	b.n	800696c <_printf_i+0xd4>
 8006a1c:	0648      	lsls	r0, r1, #25
 8006a1e:	d5ac      	bpl.n	800697a <_printf_i+0xe2>
 8006a20:	b2ad      	uxth	r5, r5
 8006a22:	e7aa      	b.n	800697a <_printf_i+0xe2>
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	680d      	ldr	r5, [r1, #0]
 8006a28:	1d10      	adds	r0, r2, #4
 8006a2a:	6949      	ldr	r1, [r1, #20]
 8006a2c:	6018      	str	r0, [r3, #0]
 8006a2e:	6813      	ldr	r3, [r2, #0]
 8006a30:	062e      	lsls	r6, r5, #24
 8006a32:	d501      	bpl.n	8006a38 <_printf_i+0x1a0>
 8006a34:	6019      	str	r1, [r3, #0]
 8006a36:	e002      	b.n	8006a3e <_printf_i+0x1a6>
 8006a38:	066d      	lsls	r5, r5, #25
 8006a3a:	d5fb      	bpl.n	8006a34 <_printf_i+0x19c>
 8006a3c:	8019      	strh	r1, [r3, #0]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	9e04      	ldr	r6, [sp, #16]
 8006a42:	6123      	str	r3, [r4, #16]
 8006a44:	e7d2      	b.n	80069ec <_printf_i+0x154>
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	1d11      	adds	r1, r2, #4
 8006a4a:	6019      	str	r1, [r3, #0]
 8006a4c:	6816      	ldr	r6, [r2, #0]
 8006a4e:	2100      	movs	r1, #0
 8006a50:	0030      	movs	r0, r6
 8006a52:	6862      	ldr	r2, [r4, #4]
 8006a54:	f000 f832 	bl	8006abc <memchr>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d001      	beq.n	8006a60 <_printf_i+0x1c8>
 8006a5c:	1b80      	subs	r0, r0, r6
 8006a5e:	6060      	str	r0, [r4, #4]
 8006a60:	6863      	ldr	r3, [r4, #4]
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	2300      	movs	r3, #0
 8006a66:	9a04      	ldr	r2, [sp, #16]
 8006a68:	7013      	strb	r3, [r2, #0]
 8006a6a:	e7bf      	b.n	80069ec <_printf_i+0x154>
 8006a6c:	6923      	ldr	r3, [r4, #16]
 8006a6e:	0032      	movs	r2, r6
 8006a70:	9906      	ldr	r1, [sp, #24]
 8006a72:	9805      	ldr	r0, [sp, #20]
 8006a74:	9d07      	ldr	r5, [sp, #28]
 8006a76:	47a8      	blx	r5
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d0c1      	beq.n	8006a00 <_printf_i+0x168>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	079b      	lsls	r3, r3, #30
 8006a80:	d415      	bmi.n	8006aae <_printf_i+0x216>
 8006a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a84:	68e0      	ldr	r0, [r4, #12]
 8006a86:	4298      	cmp	r0, r3
 8006a88:	dabc      	bge.n	8006a04 <_printf_i+0x16c>
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	e7ba      	b.n	8006a04 <_printf_i+0x16c>
 8006a8e:	0022      	movs	r2, r4
 8006a90:	2301      	movs	r3, #1
 8006a92:	9906      	ldr	r1, [sp, #24]
 8006a94:	9805      	ldr	r0, [sp, #20]
 8006a96:	9e07      	ldr	r6, [sp, #28]
 8006a98:	3219      	adds	r2, #25
 8006a9a:	47b0      	blx	r6
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d0af      	beq.n	8006a00 <_printf_i+0x168>
 8006aa0:	3501      	adds	r5, #1
 8006aa2:	68e3      	ldr	r3, [r4, #12]
 8006aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	42ab      	cmp	r3, r5
 8006aaa:	dcf0      	bgt.n	8006a8e <_printf_i+0x1f6>
 8006aac:	e7e9      	b.n	8006a82 <_printf_i+0x1ea>
 8006aae:	2500      	movs	r5, #0
 8006ab0:	e7f7      	b.n	8006aa2 <_printf_i+0x20a>
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	08006f41 	.word	0x08006f41
 8006ab8:	08006f52 	.word	0x08006f52

08006abc <memchr>:
 8006abc:	b2c9      	uxtb	r1, r1
 8006abe:	1882      	adds	r2, r0, r2
 8006ac0:	4290      	cmp	r0, r2
 8006ac2:	d101      	bne.n	8006ac8 <memchr+0xc>
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	4770      	bx	lr
 8006ac8:	7803      	ldrb	r3, [r0, #0]
 8006aca:	428b      	cmp	r3, r1
 8006acc:	d0fb      	beq.n	8006ac6 <memchr+0xa>
 8006ace:	3001      	adds	r0, #1
 8006ad0:	e7f6      	b.n	8006ac0 <memchr+0x4>

08006ad2 <memcpy>:
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	b510      	push	{r4, lr}
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d100      	bne.n	8006adc <memcpy+0xa>
 8006ada:	bd10      	pop	{r4, pc}
 8006adc:	5ccc      	ldrb	r4, [r1, r3]
 8006ade:	54c4      	strb	r4, [r0, r3]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	e7f8      	b.n	8006ad6 <memcpy+0x4>

08006ae4 <memmove>:
 8006ae4:	b510      	push	{r4, lr}
 8006ae6:	4288      	cmp	r0, r1
 8006ae8:	d902      	bls.n	8006af0 <memmove+0xc>
 8006aea:	188b      	adds	r3, r1, r2
 8006aec:	4298      	cmp	r0, r3
 8006aee:	d303      	bcc.n	8006af8 <memmove+0x14>
 8006af0:	2300      	movs	r3, #0
 8006af2:	e007      	b.n	8006b04 <memmove+0x20>
 8006af4:	5c8b      	ldrb	r3, [r1, r2]
 8006af6:	5483      	strb	r3, [r0, r2]
 8006af8:	3a01      	subs	r2, #1
 8006afa:	d2fb      	bcs.n	8006af4 <memmove+0x10>
 8006afc:	bd10      	pop	{r4, pc}
 8006afe:	5ccc      	ldrb	r4, [r1, r3]
 8006b00:	54c4      	strb	r4, [r0, r3]
 8006b02:	3301      	adds	r3, #1
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d1fa      	bne.n	8006afe <memmove+0x1a>
 8006b08:	e7f8      	b.n	8006afc <memmove+0x18>
	...

08006b0c <_free_r>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	0005      	movs	r5, r0
 8006b10:	2900      	cmp	r1, #0
 8006b12:	d010      	beq.n	8006b36 <_free_r+0x2a>
 8006b14:	1f0c      	subs	r4, r1, #4
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	da00      	bge.n	8006b1e <_free_r+0x12>
 8006b1c:	18e4      	adds	r4, r4, r3
 8006b1e:	0028      	movs	r0, r5
 8006b20:	f000 f8d4 	bl	8006ccc <__malloc_lock>
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <_free_r+0x90>)
 8006b26:	6813      	ldr	r3, [r2, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <_free_r+0x2c>
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	6014      	str	r4, [r2, #0]
 8006b30:	0028      	movs	r0, r5
 8006b32:	f000 f8d3 	bl	8006cdc <__malloc_unlock>
 8006b36:	bd70      	pop	{r4, r5, r6, pc}
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d908      	bls.n	8006b4e <_free_r+0x42>
 8006b3c:	6821      	ldr	r1, [r4, #0]
 8006b3e:	1860      	adds	r0, r4, r1
 8006b40:	4283      	cmp	r3, r0
 8006b42:	d1f3      	bne.n	8006b2c <_free_r+0x20>
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	1841      	adds	r1, r0, r1
 8006b4a:	6021      	str	r1, [r4, #0]
 8006b4c:	e7ee      	b.n	8006b2c <_free_r+0x20>
 8006b4e:	001a      	movs	r2, r3
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <_free_r+0x4e>
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	d9f9      	bls.n	8006b4e <_free_r+0x42>
 8006b5a:	6811      	ldr	r1, [r2, #0]
 8006b5c:	1850      	adds	r0, r2, r1
 8006b5e:	42a0      	cmp	r0, r4
 8006b60:	d10b      	bne.n	8006b7a <_free_r+0x6e>
 8006b62:	6820      	ldr	r0, [r4, #0]
 8006b64:	1809      	adds	r1, r1, r0
 8006b66:	1850      	adds	r0, r2, r1
 8006b68:	6011      	str	r1, [r2, #0]
 8006b6a:	4283      	cmp	r3, r0
 8006b6c:	d1e0      	bne.n	8006b30 <_free_r+0x24>
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	1841      	adds	r1, r0, r1
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	6053      	str	r3, [r2, #4]
 8006b78:	e7da      	b.n	8006b30 <_free_r+0x24>
 8006b7a:	42a0      	cmp	r0, r4
 8006b7c:	d902      	bls.n	8006b84 <_free_r+0x78>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	e7d5      	b.n	8006b30 <_free_r+0x24>
 8006b84:	6821      	ldr	r1, [r4, #0]
 8006b86:	1860      	adds	r0, r4, r1
 8006b88:	4283      	cmp	r3, r0
 8006b8a:	d103      	bne.n	8006b94 <_free_r+0x88>
 8006b8c:	6818      	ldr	r0, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	1841      	adds	r1, r0, r1
 8006b92:	6021      	str	r1, [r4, #0]
 8006b94:	6063      	str	r3, [r4, #4]
 8006b96:	6054      	str	r4, [r2, #4]
 8006b98:	e7ca      	b.n	8006b30 <_free_r+0x24>
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	200000b0 	.word	0x200000b0

08006ba0 <_malloc_r>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	1ccd      	adds	r5, r1, #3
 8006ba6:	439d      	bics	r5, r3
 8006ba8:	3508      	adds	r5, #8
 8006baa:	0006      	movs	r6, r0
 8006bac:	2d0c      	cmp	r5, #12
 8006bae:	d21f      	bcs.n	8006bf0 <_malloc_r+0x50>
 8006bb0:	250c      	movs	r5, #12
 8006bb2:	42a9      	cmp	r1, r5
 8006bb4:	d81e      	bhi.n	8006bf4 <_malloc_r+0x54>
 8006bb6:	0030      	movs	r0, r6
 8006bb8:	f000 f888 	bl	8006ccc <__malloc_lock>
 8006bbc:	4925      	ldr	r1, [pc, #148]	; (8006c54 <_malloc_r+0xb4>)
 8006bbe:	680a      	ldr	r2, [r1, #0]
 8006bc0:	0014      	movs	r4, r2
 8006bc2:	2c00      	cmp	r4, #0
 8006bc4:	d11a      	bne.n	8006bfc <_malloc_r+0x5c>
 8006bc6:	4f24      	ldr	r7, [pc, #144]	; (8006c58 <_malloc_r+0xb8>)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d104      	bne.n	8006bd8 <_malloc_r+0x38>
 8006bce:	0021      	movs	r1, r4
 8006bd0:	0030      	movs	r0, r6
 8006bd2:	f000 f869 	bl	8006ca8 <_sbrk_r>
 8006bd6:	6038      	str	r0, [r7, #0]
 8006bd8:	0029      	movs	r1, r5
 8006bda:	0030      	movs	r0, r6
 8006bdc:	f000 f864 	bl	8006ca8 <_sbrk_r>
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	d12b      	bne.n	8006c3c <_malloc_r+0x9c>
 8006be4:	230c      	movs	r3, #12
 8006be6:	0030      	movs	r0, r6
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	f000 f877 	bl	8006cdc <__malloc_unlock>
 8006bee:	e003      	b.n	8006bf8 <_malloc_r+0x58>
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	dade      	bge.n	8006bb2 <_malloc_r+0x12>
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	6033      	str	r3, [r6, #0]
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	1b5b      	subs	r3, r3, r5
 8006c00:	d419      	bmi.n	8006c36 <_malloc_r+0x96>
 8006c02:	2b0b      	cmp	r3, #11
 8006c04:	d903      	bls.n	8006c0e <_malloc_r+0x6e>
 8006c06:	6023      	str	r3, [r4, #0]
 8006c08:	18e4      	adds	r4, r4, r3
 8006c0a:	6025      	str	r5, [r4, #0]
 8006c0c:	e003      	b.n	8006c16 <_malloc_r+0x76>
 8006c0e:	6863      	ldr	r3, [r4, #4]
 8006c10:	42a2      	cmp	r2, r4
 8006c12:	d10e      	bne.n	8006c32 <_malloc_r+0x92>
 8006c14:	600b      	str	r3, [r1, #0]
 8006c16:	0030      	movs	r0, r6
 8006c18:	f000 f860 	bl	8006cdc <__malloc_unlock>
 8006c1c:	0020      	movs	r0, r4
 8006c1e:	2207      	movs	r2, #7
 8006c20:	300b      	adds	r0, #11
 8006c22:	1d23      	adds	r3, r4, #4
 8006c24:	4390      	bics	r0, r2
 8006c26:	1ac2      	subs	r2, r0, r3
 8006c28:	4298      	cmp	r0, r3
 8006c2a:	d0e6      	beq.n	8006bfa <_malloc_r+0x5a>
 8006c2c:	1a1b      	subs	r3, r3, r0
 8006c2e:	50a3      	str	r3, [r4, r2]
 8006c30:	e7e3      	b.n	8006bfa <_malloc_r+0x5a>
 8006c32:	6053      	str	r3, [r2, #4]
 8006c34:	e7ef      	b.n	8006c16 <_malloc_r+0x76>
 8006c36:	0022      	movs	r2, r4
 8006c38:	6864      	ldr	r4, [r4, #4]
 8006c3a:	e7c2      	b.n	8006bc2 <_malloc_r+0x22>
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	1cc4      	adds	r4, r0, #3
 8006c40:	439c      	bics	r4, r3
 8006c42:	42a0      	cmp	r0, r4
 8006c44:	d0e1      	beq.n	8006c0a <_malloc_r+0x6a>
 8006c46:	1a21      	subs	r1, r4, r0
 8006c48:	0030      	movs	r0, r6
 8006c4a:	f000 f82d 	bl	8006ca8 <_sbrk_r>
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d1db      	bne.n	8006c0a <_malloc_r+0x6a>
 8006c52:	e7c7      	b.n	8006be4 <_malloc_r+0x44>
 8006c54:	200000b0 	.word	0x200000b0
 8006c58:	200000b4 	.word	0x200000b4

08006c5c <_realloc_r>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	0007      	movs	r7, r0
 8006c60:	000d      	movs	r5, r1
 8006c62:	0016      	movs	r6, r2
 8006c64:	2900      	cmp	r1, #0
 8006c66:	d105      	bne.n	8006c74 <_realloc_r+0x18>
 8006c68:	0011      	movs	r1, r2
 8006c6a:	f7ff ff99 	bl	8006ba0 <_malloc_r>
 8006c6e:	0004      	movs	r4, r0
 8006c70:	0020      	movs	r0, r4
 8006c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c74:	2a00      	cmp	r2, #0
 8006c76:	d103      	bne.n	8006c80 <_realloc_r+0x24>
 8006c78:	f7ff ff48 	bl	8006b0c <_free_r>
 8006c7c:	0034      	movs	r4, r6
 8006c7e:	e7f7      	b.n	8006c70 <_realloc_r+0x14>
 8006c80:	f000 f834 	bl	8006cec <_malloc_usable_size_r>
 8006c84:	002c      	movs	r4, r5
 8006c86:	42b0      	cmp	r0, r6
 8006c88:	d2f2      	bcs.n	8006c70 <_realloc_r+0x14>
 8006c8a:	0031      	movs	r1, r6
 8006c8c:	0038      	movs	r0, r7
 8006c8e:	f7ff ff87 	bl	8006ba0 <_malloc_r>
 8006c92:	1e04      	subs	r4, r0, #0
 8006c94:	d0ec      	beq.n	8006c70 <_realloc_r+0x14>
 8006c96:	0029      	movs	r1, r5
 8006c98:	0032      	movs	r2, r6
 8006c9a:	f7ff ff1a 	bl	8006ad2 <memcpy>
 8006c9e:	0029      	movs	r1, r5
 8006ca0:	0038      	movs	r0, r7
 8006ca2:	f7ff ff33 	bl	8006b0c <_free_r>
 8006ca6:	e7e3      	b.n	8006c70 <_realloc_r+0x14>

08006ca8 <_sbrk_r>:
 8006ca8:	2300      	movs	r3, #0
 8006caa:	b570      	push	{r4, r5, r6, lr}
 8006cac:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_sbrk_r+0x20>)
 8006cae:	0004      	movs	r4, r0
 8006cb0:	0008      	movs	r0, r1
 8006cb2:	602b      	str	r3, [r5, #0]
 8006cb4:	f7fc f8a4 	bl	8002e00 <_sbrk>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d103      	bne.n	8006cc4 <_sbrk_r+0x1c>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d000      	beq.n	8006cc4 <_sbrk_r+0x1c>
 8006cc2:	6023      	str	r3, [r4, #0]
 8006cc4:	bd70      	pop	{r4, r5, r6, pc}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	20000268 	.word	0x20000268

08006ccc <__malloc_lock>:
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	4802      	ldr	r0, [pc, #8]	; (8006cd8 <__malloc_lock+0xc>)
 8006cd0:	f000 f814 	bl	8006cfc <__retarget_lock_acquire_recursive>
 8006cd4:	bd10      	pop	{r4, pc}
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	20000270 	.word	0x20000270

08006cdc <__malloc_unlock>:
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	4802      	ldr	r0, [pc, #8]	; (8006ce8 <__malloc_unlock+0xc>)
 8006ce0:	f000 f80d 	bl	8006cfe <__retarget_lock_release_recursive>
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	20000270 	.word	0x20000270

08006cec <_malloc_usable_size_r>:
 8006cec:	1f0b      	subs	r3, r1, #4
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	1f18      	subs	r0, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	da01      	bge.n	8006cfa <_malloc_usable_size_r+0xe>
 8006cf6:	580b      	ldr	r3, [r1, r0]
 8006cf8:	18c0      	adds	r0, r0, r3
 8006cfa:	4770      	bx	lr

08006cfc <__retarget_lock_acquire_recursive>:
 8006cfc:	4770      	bx	lr

08006cfe <__retarget_lock_release_recursive>:
 8006cfe:	4770      	bx	lr

08006d00 <_init>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr

08006d0c <_fini>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr
